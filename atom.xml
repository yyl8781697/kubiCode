<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kubi Code'Blog]]></title>
  <subtitle><![CDATA[The palest ink is better than the best memory.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yyl8781697.github.io/"/>
  <updated>2015-05-04T14:47:38.000Z</updated>
  <id>http://yyl8781697.github.io/</id>
  
  <author>
    <name><![CDATA[Kubi Code]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[You-Donnot-Kown-About-The-Clone]]></title>
    <link href="http://yyl8781697.github.io/2015/05/03/Java%20Base/You-Donnot-Kown-About-The-Clone/"/>
    <id>http://yyl8781697.github.io/2015/05/03/Java Base/You-Donnot-Kown-About-The-Clone/</id>
    <published>2015-05-03T14:59:55.000Z</published>
    <updated>2015-05-04T14:47:38.000Z</updated>
    <content type="html"><![CDATA[<p><br><br><br><br><br></p>
<h2 id="clone()_元定义">clone() 元定义</h2><p>啥都不说，先看下源码中<code>Object.clone()</code>的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Creates and returns a copy of this object.  The precise meaning</span><br><span class="line"> * of "copy" may depend on the class of the object. The general</span><br><span class="line"> * intent is that, for any object &#123;@code x&#125;, the expression:</span><br><span class="line"> * &lt;blockquote&gt;</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line"> * will be true, and that the expression:</span><br><span class="line"> * &lt;blockquote&gt;</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line"> * will be &#123;@code true&#125;, but these are not absolute requirements.</span><br><span class="line"> * While it is typically the case that:</span><br><span class="line"> * &lt;blockquote&gt;</span><br><span class="line"> * &lt;pre&gt;</span><br><span class="line"> * x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;</span><br><span class="line"> * will be &#123;@code true&#125;, this is not an absolute requirement.</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * By convention, the returned object should be obtained by calling</span><br><span class="line"> * &#123;@code super.clone&#125;.  If a class and all of its superclasses (except</span><br><span class="line"> * &#123;@code Object&#125;) obey this convention, it will be the case that</span><br><span class="line"> * &#123;@code x.clone().getClass() == x.getClass()&#125;.</span><br><span class="line"> * 创建和返回对象的拷贝需要满足</span><br><span class="line"> * x.clone()!=x （拷贝返回的东西不能用原来的地址啊~^_^）</span><br><span class="line"> * x.clone().getClass==x.getClass() （这个不是绝对的，可以返回子类）</span><br><span class="line"> * x.clone().equals(x) （拷贝了之后当然两个对象时相等的~，这个也不是绝对的，比如有序    	列化唯一ID的字段）</span><br><span class="line"> * </span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * By convention, the object returned by this method should be independent</span><br><span class="line"> * of this object (which is being cloned).  To achieve this independence,</span><br><span class="line"> * it may be necessary to modify one or more fields of the object returned</span><br><span class="line"> * by &#123;@code super.clone&#125; before returning it.  Typically, this means</span><br><span class="line"> * copying any mutable objects that comprise the internal "deep structure"</span><br><span class="line"> * of the object being cloned and replacing the references to these</span><br><span class="line"> * objects with references to the copies.  If a class contains only</span><br><span class="line"> * primitive fields or references to immutable objects, then it is usually</span><br><span class="line"> * the case that no fields in the object returned by &#123;@code super.clone&#125;</span><br><span class="line"> * need to be modified.</span><br><span class="line"> * 教我们实现clone方法的时候先调用super.clone(),克隆出的对象上添加自己当前类所需要的元素</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The method &#123;@code clone&#125; for class &#123;@code Object&#125; performs a</span><br><span class="line"> * specific cloning operation. First, if the class of this object does</span><br><span class="line"> * not implement the interface &#123;@code Cloneable&#125;, then a</span><br><span class="line"> * &#123;@code CloneNotSupportedException&#125; is thrown. Note that all arrays</span><br><span class="line"> * are considered to implement the interface &#123;@code Cloneable&#125; and that</span><br><span class="line"> * the return type of the &#123;@code clone&#125; method of an array type &#123;@code T[]&#125;</span><br><span class="line"> * is &#123;@code T[]&#125; where T is any reference or primitive type.</span><br><span class="line"> * Otherwise, this method creates a new instance of the class of this</span><br><span class="line"> * object and initializes all its fields with exactly the contents of</span><br><span class="line"> * the corresponding fields of this object, as if by assignment; the</span><br><span class="line"> * contents of the fields are not themselves cloned. Thus, this method</span><br><span class="line"> * performs a "shallow copy" of this object, not a "deep copy" operation.</span><br><span class="line"> * 如果对象没有实现Cloneable接口而又调用了super.clone  就是抛出CloneNotSupportedException异常</span><br><span class="line"> * 默认所有的数组都是继承了Cloneable接口的，它返回的是该数组类型的数组(T[] -_-)，但是 *拷贝的时候直接是使用了那么些类型的对象，并没有使用它们的拷贝，所以数据的拷贝只是一</span><br><span class="line"> * 个“浅拷贝”</span><br><span class="line"> * &lt;p&gt;</span><br><span class="line"> * The class &#123;@code Object&#125; does not itself implement the interface</span><br><span class="line"> * &#123;@code Cloneable&#125;, so calling the &#123;@code clone&#125; method on an object</span><br><span class="line"> * whose class is &#123;@code Object&#125; will result in throwing an</span><br><span class="line"> * exception at run time.</span><br><span class="line"> * Object类并没有实现Cloneable接口，所以你如果调用了Oject.clone方法话就会抛出异常，</span><br><span class="line"> * （但是在在这里可以看到Object的clone方法是protected的，该方法是无法直接调用的，除非</span><br><span class="line"> * 你使用反射来进行调用）</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @return</span>     a clone of this instance.</span><br><span class="line"> *<span class="javadoctag"> @exception</span>  CloneNotSupportedException  if the object's class does not</span><br><span class="line"> *               support the &#123;@code Cloneable&#125; interface. Subclasses</span><br><span class="line"> *               that override the &#123;@code clone&#125; method can also</span><br><span class="line"> *               throw this exception to indicate that an instance cannot</span><br><span class="line"> *               be cloned.</span><br><span class="line"> *<span class="javadoctag"> @see</span> java.lang.Cloneable</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>Cloneable</code>接口并不含任何方法，但是实现它的时候<code>Object</code>的<code>clone</code>方法就会返回该对象的逐域拷贝，否则就会抛出<code>CloneNotSupportedException</code>异常</p>
<p>注意，在java1.5以后的版本中<code>clone()</code>引入了协变返回类型，额可以直接直接支持指定类的返回，不必必须返回<code>Object</code></p>
</blockquote>
<h2 id="clone不伤害源对象">clone不伤害源对象</h2><p><code>clone()</code>的原则就是必须确保不会伤害到原始的对象，并确保正确地创建被克隆中的约束条件。<br>实现克隆最基本的方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] elements=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 进行数组的打印</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\r\nprint"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.elements.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(elements[i]+<span class="string">"#"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CloneTest <span class="title">clone</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		CloneTest ret=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			ret=(CloneTest)<span class="keyword">super</span>.clone();<span class="comment">//调用超类的clone</span></span><br><span class="line">		&#125;<span class="keyword">catch</span>(CloneNotSupportedException cs)</span><br><span class="line">		&#123;</span><br><span class="line">			cs.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是他会破坏原有对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CloneTest t1=<span class="keyword">new</span> CloneTest();</span><br><span class="line">t1.elements[<span class="number">0</span>]=<span class="number">4</span>;</span><br><span class="line">t1.elements[<span class="number">1</span>]=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">CloneTest t2=t1.clone();</span><br><span class="line">t2.elements[<span class="number">1</span>]=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">t1.print();</span><br><span class="line">t2.print();</span><br></pre></td></tr></table></figure>
<p>返回的是：</p>
<pre><code><span class="id">print</span>
<span class="number">4#6#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
<span class="id">print</span>
<span class="number">4#6#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
</code></pre><p>这是因为该方法仅仅只是调用了超类的克隆方法，完了之后克隆出来的对象的<code>elements</code>元素还是与原对象一样。</p>
<p>所以一般在编写<code>clone()</code>之后，再在克隆出的对象上添加自己当前类所需要的元素，上述可以这么修改:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloneTest <span class="title">clone</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	CloneTest ret=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		ret=(CloneTest)<span class="keyword">super</span>.clone();</span><br><span class="line">		ret.elements=<span class="keyword">this</span>.elements.clone();<span class="comment">//复制出来一个新的副本</span></span><br><span class="line">	&#125;<span class="keyword">catch</span>(CloneNotSupportedException cs)</span><br><span class="line">	&#123;</span><br><span class="line">		cs.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在先前的测试代码之后得到的是</p>
<pre><code><span class="id">print</span>
<span class="number">4#5#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
<span class="id">print</span>
<span class="number">4#6#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
</code></pre><p>简而言之，所有实现了<code>Cloneable</code>的类都应该调用一个共有的方法覆盖<code>clone</code>，此公有的方法首先调用<code>super.clone()</code>，然后修正任何需要修正的域（其实就是对当前自己类上的元素单独<code>clone()</code>）。</p>
<h2 id="数组的clone">数组的clone</h2><p>引用的一个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> String name=<span class="string">""</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对数组进行<code>clone()</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A[] a=<span class="keyword">new</span> A[<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>]=<span class="keyword">new</span> A(<span class="string">"tom"</span>);</span><br><span class="line">a[<span class="number">0</span>]=<span class="keyword">new</span> A(<span class="string">"peter"</span>);</span><br><span class="line"></span><br><span class="line">A[] b=a.clone();</span><br><span class="line">b[<span class="number">0</span>].name=<span class="string">"lili"</span>;、<span class="comment">//修改克隆对象的值</span></span><br><span class="line"></span><br><span class="line">System.out.println(a[<span class="number">0</span>].name);</span><br></pre></td></tr></table></figure></p>
<p>最终的输出为</p>
<pre><code>lili
</code></pre><p>可以发现原有数组A的数据被他克隆出来的数组给修掉了，所以数组在执行<code>clone()</code>时并没有将数据类型的对象进行克隆，只是使用了它，这里也就是一个浅复制。（对于这种情况我们特别要注意~）</p>
<h2 id="使用循环代替递归拷贝">使用循环代替递归拷贝</h2><p>在<code>HashTable</code>中是使用一个列表数组来存储具体数据，在对<code>HashTable</code>进行拷贝时他的源码是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Creates a shallow copy of this hashtable. All the structure of the</span><br><span class="line"> * hashtable itself is copied, but the keys and values are not cloned.</span><br><span class="line"> * This is a relatively expensive operation.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @return</span>  a clone of the hashtable</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        t.table = <span class="keyword">new</span> Entry[table.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = table.length ; i-- &gt; <span class="number">0</span> ; ) &#123;</span><br><span class="line">            t.table[i] = (table[i] != <span class="keyword">null</span>)</span><br><span class="line">                ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="keyword">null</span>;<span class="comment">//这里调用Entry的clone方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        t.keySet = <span class="keyword">null</span>;</span><br><span class="line">        t.entrySet = <span class="keyword">null</span>;</span><br><span class="line">        t.values = <span class="keyword">null</span>;</span><br><span class="line">        t.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">        <span class="comment">// this shouldn't happen, since we are Cloneable</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>接下来看下<code>Entry.clone()</code>方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value,</span><br><span class="line">                          (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从它的方法中我们可以看出来他是使用递归来进行调用的，不断进行递归执行自己的<code>clone</code>时自己的链表增长来满足<code>clone</code>，这可以说是一种比较简洁的方法，但是问题是出在递归，我们都知道执行递归方法时如果递归太深可能会触发虚拟机中最大stack数量的阈值导致抛<code>StackOverflow</code>的异常，并且执行一个方法本身也是一个比较耗资源的的操作，所以如果遇到这种情况可以考虑使用循环来完成这种需求。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用循环来代替递归</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Entry result=<span class="keyword">new</span> Entry(key,value,next);</span><br><span class="line">	<span class="keyword">for</span>(Entry p=result;p.next!=<span class="keyword">null</span>;p=p.next)</span><br><span class="line">	&#123;</span><br><span class="line">		p.next=<span class="keyword">new</span> Entry(p.next.key,p.next.value,p.next.next);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>针对此我们可以看下jdk1.2之后出来的<code>HashMap</code>里面的<code>clone</code>方法，他在<code>super.clone()</code>完了之后调用<code>inflateTable()</code>方法重新初始化了一个数组，然后再调用<code>putAllForCreate()</code>方法用循环的方式将现有数据进行添加进去完成<code>clone()</code></p>
<h2 id="可以考虑使用拷贝构造器来代码clone方法">可以考虑使用拷贝构造器来代码clone方法</h2><p>该功能的类的拷贝构造器相比<code>clone()</code>方法来说有以下几个好处：</p>
<ul>
<li>在该构造器可以有参数</li>
<li>支持final类型定义的变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span></span>&#123;</span><br><span class="line">	    <span class="keyword">public</span> <span class="keyword">int</span>[] elements=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	    <span class="javadoc">/**</span><br><span class="line">	     * 进行数组的打印</span><br><span class="line">	     */</span></span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">	    </span>&#123;</span><br><span class="line">	        System.out.println(<span class="string">"\r\nprint"</span>);</span><br><span class="line">	        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.elements.length;i++)</span><br><span class="line">	        &#123;</span><br><span class="line">	            System.out.print(elements[i]+<span class="string">"#"</span>);</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125;</span><br><span class="line">	    </span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="title">CloneTest</span><span class="params">()</span></span><br><span class="line">	    </span>&#123;&#125;</span><br><span class="line">	    </span><br><span class="line">	    <span class="function"><span class="keyword">public</span> <span class="title">CloneTest</span><span class="params">(CloneTest test)</span></span>&#123;</span><br><span class="line">	    	CloneTest ret=test;</span><br><span class="line">	    	ret.elements=test.elements.clone();</span><br><span class="line">	    &#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<p>这样的话就可以使用构造函数来进行对象的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CloneTest t1=<span class="keyword">new</span> CloneTest();</span><br><span class="line">t1.elements[<span class="number">0</span>]=<span class="number">4</span>;</span><br><span class="line">t1.elements[<span class="number">1</span>]=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">CloneTest t2=<span class="keyword">new</span> CloneTest(t1);</span><br><span class="line">t2.elements[<span class="number">1</span>]=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">t1.print();</span><br><span class="line">t2.print();</span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>最后，关于<code>clone()</code>方法有以下几个注意点：</p>
<ul>
<li>将出现递归<code>clone()</code>的时候尽量使用循环迭代来代替。</li>
<li>如果是线程安全的类要实现<code>clone()</code>，那些这个<code>clone()</code>也必须进行同步。</li>
<li>关于自身域的修正如果是遇到<code>final</code>类型的，那么这两者是不兼容的。</li>
<li>另一个实现对象拷贝的方式就是提供一个拷贝构造器，该构造器比<code>clone()</code>方法的一个优势就是它可以传参数。</li>
<li>当前类没有继承<code>Cloneable</code>接口时，如果到<code>clone()</code>方法里面调用了<code>super.clone()</code>方法就是抛出<code>CloneNotSupportedException</code>异常。</li>
</ul>
<h2 id="参考">参考</h2><p>《Effective Java中文版》第11条</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><br><br><br><br><br></p>
<h2 id="clone()_元定义">clone() 元定义</h2><p>啥都不说，先看下源码中<code>Object.clone()</code>的定义：<br><figure class="highlight j]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="http://yyl8781697.github.io/categories/Java-Base/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Effective Java》第三章：对于所有对象都通用的方法]]></title>
    <link href="http://yyl8781697.github.io/2015/05/03/Effective%20Java/The-Methods-General-To-All-Object/"/>
    <id>http://yyl8781697.github.io/2015/05/03/Effective Java/The-Methods-General-To-All-Object/</id>
    <published>2015-05-03T14:59:34.000Z</published>
    <updated>2015-05-04T14:47:39.000Z</updated>
    <content type="html"><![CDATA[<h1 id="对于所有对象都通用的方法">对于所有对象都通用的方法</h1><p>类在继承时，它的所有非<code>final</code>方法都用明确得通用约定，他们都是被设计为要被覆盖的，对于任何一个类，在覆盖这些方法的时候，都需要遵循这些通用的约定，如果做不到这一点，其他依赖于这些约定的类将无法结合该类一起工作。</p>
<h2 id="第8条：覆盖equals时请遵守通用约定">第8条：覆盖equals时请遵守通用约定</h2><blockquote>
<p>我们都知道<code>equals</code>方法称被用于判断两个对象是否相等（除地址外），那你知道该方法应该被如何设计呢？</p>
</blockquote>
<p><code>equals</code>方法需要遵循的约定：</p>
<ul>
<li><strong>自反性</strong>：对于任何非<code>null</code>的引用值<code>x</code>，<code>x.equals(x)</code>必须要<code>true</code>，也就是自己一定要和自己相等啊。</li>
<li><strong>对称性</strong>：对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>，当前仅当<code>y.equals(x)=true</code>时，<code>x.equals(y)=true</code>一定成立。</li>
<li><strong>传递性</strong>：对于任何非<code>null</code>的引用值<code>x</code>、<code>y</code>和<code>z</code>，如果<code>x.equals(y)=true</code>、<code>y.equals(z)=true</code>，则<code>x.equals(z)=true</code>一定成立，关于这点，写代码时难点主要是在有子类、超类同时存在的情况下比较难搞。。</li>
<li><strong>一致性</strong>：对于任何非<code>null</code>的引用值<code>x</code>和<code>y</code>，只要<code>equals</code>的比较操作在对象中所用的信息没有被修改，多次调用<code>x.equals(y)</code>返回的值一定相等。</li>
<li>对于任何非<code>null</code>的引用值<code>x</code>，<code>x.equals(null)</code>一定为<code>false</code>，关于这一条，不必要在<code>equals</code>方法是使用<code>null</code>的判断。</li>
</ul>
<p>对于这些约束，编写<code>equals</code>有下面几个诀窍：</p>
<ol>
<li><strong>使用<code>==</code>操作符检查“参数是否为这个对象的引用”</strong>（就是判断对象是否地址相等）</li>
<li><strong>使用<code>instanceof</code>操作符检查“参数是否为正确的类型”</strong>（判断对比的参数是否为本类或者超类，同时可以判断null值）</li>
<li><strong>把参数转为正确的类型</strong>（强转了之后才能进行下一步的具体值的判断^_^）</li>
<li><strong>对于该类中的每个关键域，检查参数中的域是否与该对象中对应域相匹配</strong>（说实话，这个没怎么看懂-_-）</li>
<li><strong>当编写完<code>equals</code>方法之后、应该问自己三个问题：他们是否是对称的、传递的、一致性的</strong>（这不是常见的几个约束嘛？最好是需要满足，同时最好还得有单元测试去确保）</li>
</ol>
<p>一般<code>equals</code>一般通用的写法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span><span class="comment">//注意这里传的是Object类型，不是具体的类型，不然就是重载了，而不是重写</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//这一步很重要，一个是可以判断当前o是否为本类型或者他的超类，另外这里如果o为null的话会直接返回false</span></span><br><span class="line">	<span class="keyword">if</span>(!(o <span class="keyword">instanceof</span> MyType))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	MyType mt=(MyType)<span class="number">0</span>;<span class="comment">//将obj转为本类型之后再操作</span></span><br><span class="line"> 	</span><br><span class="line">	<span class="comment">//Todo 根据自己业务写的实际的判断情况、如果涉及子类超类的可以使用递归调用，完了之后进行布尔值的返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>建议：如果你无法确保你自己写的<code>equals</code>满足上述约束，那就不要去重写这个<code>equals</code>方法的，因为超类的该方法一般也是适用于子类的（懒人模式）。</p>
</blockquote>
<h2 id="第9条：覆盖equals时总要覆盖hashCode">第9条：覆盖equals时总要覆盖hashCode</h2><blockquote>
<p>地球人都知道调用<code>hashCode</code>方法可以得到该对象的散列值（Hash值）</p>
</blockquote>
<p>先来看一下<code>hashCode</code>方法的相关通用约束：</p>
<ol>
<li>在程序执行时，只要<code>equals</code>方法所用到的对象没有被修改，得到的<code>hashCode</code>的值一定还是原来的值。</li>
<li>相等的对象必须具有相等散列码。</li>
</ol>
<ul>
<li>不相等的对象他们的散列码一定不相等。</li>
</ul>
<p>所以，为了不违反第2条约束，在覆盖了<code>equals</code>方法之后一定要覆盖<code>hashCode</code>。</p>
<p>一个好的散列函数通常倾向于“为不相等的对象产生不相等的散列码”，散列函数应该把集合中不相等的实例均匀的分不到所有的可能额散列值上，如果想完全达到这样的效果是非常困难的，但是可以使用相对接近的理想情形并不困难（具体散列步骤请移步原文去参考-_-）</p>
<h2 id="第10条：始终要覆盖toString">第10条：始终要覆盖toString</h2><p>我们在打印一个类时，是不是会经常看到一个类的名称，以及一个@符号，接着是散列码的无符号十六进制数，列如：“PhoneNumber<br>@163b91”，这样的打印信息对于开发者来说几乎是无意义的，所以“建议所有的子类都要覆盖这个<code>toString</code>”方法。</p>
<p><code>toString</code>在编写时没有那么多的通用约束，但是尽量能表达该类的信息，当然也可以编写含有你特征格式的<code>toString</code>返回值，比如<code>XML</code>格式，这种方式需要在注释里面特别说明。</p>
<blockquote>
<p>PS：建议是好的，但是每写一个类都去覆盖他的<code>toString</code>方法会不会太累？个人觉得如果没有用到<code>println</code>,<code>printf</code>之类的方法不去覆盖也是ok的^_^</p>
</blockquote>
<h2 id="第11条：谨慎地覆盖clone">第11条：谨慎地覆盖clone</h2><blockquote>
<p><code>Cloneable</code>接口并不含任何方法，但是实现它的时候<code>Object</code>的<code>clone</code>方法就会返回该对象的逐域拷贝，否则就会抛出<code>CloneNotSupportedException</code>异常</p>
</blockquote>
<p>创建和返回对象的拷贝需要满足(这几点其实在<code>Object.clone()</code>的源码中)：</p>
<ol>
<li><code>x.clone()!=x</code>  （拷贝返回的东西不能用原来的地址啊~^_^）</li>
<li><code>x.clone().getClass==x.getClass()</code> </li>
<li><code>x.clone().equals(x)</code>  （拷贝了之后当然两个对象时相等的~）</li>
</ol>
<blockquote>
<p>注意，在java1.5以后的版本中<code>clone()</code>引入了协变返回类型，额可以直接直接支持指定类的返回，不必必须返回<code>Object</code></p>
</blockquote>
<p><code>clone()</code>的原则就是必须确保不会伤害到原始的对象，并确保正确地创建被克隆中的约束条件。<br>实现克隆最基本的方法是：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CloneTest</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span>[] elements=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 进行数组的打印</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"\r\nprint"</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.elements.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(elements[i]+<span class="string">"#"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> CloneTest <span class="title">clone</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		CloneTest ret=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			ret=(CloneTest)<span class="keyword">super</span>.clone();<span class="comment">//调用超类的clone</span></span><br><span class="line">		&#125;<span class="keyword">catch</span>(CloneNotSupportedException cs)</span><br><span class="line">		&#123;</span><br><span class="line">			cs.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是他会破坏原有对象：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CloneTest t1=<span class="keyword">new</span> CloneTest();</span><br><span class="line">t1.elements[<span class="number">0</span>]=<span class="number">4</span>;</span><br><span class="line">t1.elements[<span class="number">1</span>]=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">CloneTest t2=t1.clone();</span><br><span class="line">t2.elements[<span class="number">1</span>]=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">t1.print();</span><br><span class="line">t2.print();</span><br></pre></td></tr></table></figure>
<p>返回的是：</p>
<pre><code><span class="id">print</span>
<span class="number">4#6#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
<span class="id">print</span>
<span class="number">4#6#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
</code></pre><p>这是因为该方法仅仅只是调用了超类的克隆方法，完了之后克隆出来的对象的<code>elements</code>元素还是与原对象一样。</p>
<p>所以一般在编写<code>clone()</code>之后，再在克隆出的对象上添加自己当前类所需要的元素，上述可以这么修改:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CloneTest <span class="title">clone</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	CloneTest ret=<span class="keyword">null</span>;</span><br><span class="line">	<span class="keyword">try</span></span><br><span class="line">	&#123;</span><br><span class="line">		ret=(CloneTest)<span class="keyword">super</span>.clone();</span><br><span class="line">		ret.elements=<span class="keyword">this</span>.elements.clone();<span class="comment">//复制出来一个新的副本</span></span><br><span class="line">	&#125;<span class="keyword">catch</span>(CloneNotSupportedException cs)</span><br><span class="line">	&#123;</span><br><span class="line">		cs.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在先前的测试代码之后得到的是</p>
<pre><code><span class="id">print</span>
<span class="number">4#5#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
<span class="id">print</span>
<span class="number">4#6#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span><span class="number">0#0#</span>
</code></pre><p>简而言之，所有实现了<code>Cloneable</code>的类都应该调用一个共有的方法覆盖<code>clone</code>，此公有的方法首先调用<code>super.clone()</code>，然后修正任何需要修正的域（其实就是对当前自己类上的元素单独<code>clone()</code>）。</p>
<p>最后，关于<code>clone()</code>方法有以下几个注意点：</p>
<ul>
<li>将出现递归<code>clone()</code>的时候尽量使用循环迭代来代替。</li>
<li>如果是线程安全的类要实现<code>clone()</code>，那些这个<code>clone()</code>也必须进行同步。</li>
<li>关于自身域的修正如果是遇到<code>final</code>类型的，那么这两者是不兼容的。</li>
<li>另一个实现对象拷贝的方式就是提供一个拷贝构造器，该构造器比<code>clone()</code>方法的一个优势就是它可以传参数。</li>
<li>当前类没有继承<code>Cloneable</code>接口时，如果掉<code>clone()</code>方法里面调用了<code>super.clone()</code>方法就会抛出<code>CloneNotSupportedException</code>异常。</li>
</ul>
<h2 id="第12条：考虑实现Comparable接口">第12条：考虑实现Comparable接口</h2><blockquote>
<p><code>compareTo</code>方法是<code>Compareable</code>接口中唯一的方法，它不但可以进行简单的等同性比较外，而且允许执行顺序比较。</p>
</blockquote>
<p>其实<code>Comparable</code>与<code>equals</code>的约定是极其像的：</p>
<ul>
<li>自反性</li>
<li>对称性</li>
<li>传递性</li>
</ul>
<p>与<code>equals</code>不同的是，在跨域不同类的时候，<code>compareTo</code>可以不做比较，如果两个待比较的对象时不同引用的对象，<code>compareTo</code>可以抛出<code>ClassCastExcetpion</code>异常。</p>
<blockquote>
<p><code>compareTo</code>方法在执行时，如果小于被比值，返回-1（也可以其他负数），或者等于比较值，此时返回0，否则都是大于0的情况就返回false。</p>
</blockquote>
<p>关于在有多个关键域都需要进行对比时，可以使用减法差值来减少编码的代码量。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="对于所有对象都通用的方法">对于所有对象都通用的方法</h1><p>类在继承时，它的所有非<code>final</code>方法都用明确得通用约定，他们都是被设计为要被覆盖的，对于任何一个类，在覆盖这些方法的时候，都需要遵循这些通用的约定，如果做不到这一点，其他]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Effective Java" scheme="http://yyl8781697.github.io/categories/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我眼中的Scala-简洁不简单]]></title>
    <link href="http://yyl8781697.github.io/2015/04/26/Scala/Scala-In-My-Eyes/"/>
    <id>http://yyl8781697.github.io/2015/04/26/Scala/Scala-In-My-Eyes/</id>
    <published>2015-04-26T12:53:19.000Z</published>
    <updated>2015-04-26T02:33:02.000Z</updated>
    <content type="html"><![CDATA[<p>&#160; &#160; &#160; &#160;由于实验需要在半年前开始接触<code>Scala</code>，之前也学习/使用过<a href="http://www.tiobe.com/content/paperinfo/tpci/tpci_definition.htm" target="_blank" rel="external">TIOBE</a>榜上Top20中一半左右的编程语言，感觉还是<code>Scala</code>给我印象最深，最近没怎么做相关的开发感觉都开始慢慢淡忘了，上周在技术分享时我对<code>Scala</code>作了一些总结，顺便在这里写下。</p>
<blockquote>
<p><code>Scala</code>注意，本文主要是描述我所了解的<code>Scala</code>相关的基础语法，和<code>Java</code>相同得在这里就不再累赘。</p>
</blockquote>
<h2 id="我眼中的Scala">我眼中的Scala</h2><pre><code><span class="keyword">Scala</span>是一种基于JVM的编程语言，集成了面向对象和函数式编程的特性，既能处理脚本化得临时任务，又能处理高并发场景下分布式大数据应用。
</code></pre><p>&#160; &#160; &#160; &#160;<code>Java</code>就是因为有<code>JVM</code>虚拟机才成就了现在的辉煌，<code>Scala</code>同样是运行在<code>JVM</code>，大致可以看做Java的升级版，由于现在大数据大势所趋，各种大数据框架的出现导致了<code>Scala</code>强势崛起！<br>&#160; &#160; &#160; &#160;编程初学者最先接触的应该就是”Hello,World”，而WordCount可以看做大数据编程的入门必学技能，所以现在我们在”Hello,World”上实现CharCount：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Scala Application</span></span><br><span class="line"><span class="function"><span class="keyword">val</span> <span class="title">str=</span>"<span class="title">Hello</span>,<span class="title">wrold</span>"</span><br><span class="line"></span><span class="function"><span class="keyword">val</span> <span class="title">data=str</span></span><br><span class="line"></span>	.split(<span class="type">Array</span>(',',' '))</span><br><span class="line">	.flatMap(<span class="keyword">for</span>(c&lt;-_) <span class="keyword">yield</span> (c,<span class="number">1</span>))  <span class="comment">//好Api</span></span><br><span class="line">	.groupBy(_._1)</span><br><span class="line">	.mapValues(_.size)</span><br><span class="line">		</span><br><span class="line">println(data)</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;假如你是用<code>Java</code>程序来写，最方便的莫过于<code>HashMap</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Java Application</span></span><br><span class="line">String str=<span class="string">"Hello,World"</span>;</span><br><span class="line">HashMap&lt;Character,Integer&gt; map=<span class="keyword">new</span> HashMap&lt;Character,Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(Character ch:str.toCharArray())</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(!<span class="string">","</span>.equals(ch))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!map.containsKey(ch))</span><br><span class="line">		&#123;</span><br><span class="line">			map.put(ch, <span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		map.put(ch, map.get(ch)+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(map);</span><br></pre></td></tr></table></figure></p>
<p>其结果为</p>
<pre><code><span class="built_in">Map</span>(e <span class="subst">-&gt; </span><span class="number">1</span>, l <span class="subst">-&gt; </span><span class="number">3</span>, H <span class="subst">-&gt; </span><span class="number">1</span>, r <span class="subst">-&gt; </span><span class="number">1</span>, w <span class="subst">-&gt; </span><span class="number">1</span>, o <span class="subst">-&gt; </span><span class="number">2</span>, d <span class="subst">-&gt; </span><span class="number">1</span>)
</code></pre><p>从上面的程序中看出<code>Scala</code>的几大特点：</p>
<ul>
<li>链式操作</li>
<li>变量不变性</li>
<li>丰富的Api</li>
<li><strong>简洁不简单</strong>(<em>不需要加分号，返回值时不需要return关键字，还有强大的语法糖</em>)</li>
</ul>
<p>现在已经有非常多优秀的项目都是使用<code>Scala</code>来编写的：</p>
<ul>
<li><a href="http://spark.apache.org/" target="_blank" rel="external">Spark</a>：不用多说，感觉最近<code>Scala</code>的崛起就是因为该项目的横空出世</li>
<li><a href="http://akka.io/" target="_blank" rel="external">Akka</a>：分布式、高并发、高可伸缩性的消息驱动模型</li>
<li><a href="http://akka.io/" target="_blank" rel="external">Kafka</a>：一个高吞吐量的分布式消息系统</li>
<li><a href="https://www.playframework.com/" target="_blank" rel="external">play</a>：一个高性能的Web框架，据说最近版本用Scala重写了</li>
<li>据说Twitter公司好多中间件都是使用Scala来编写的</li>
</ul>
<h2 id="编程IDE">编程IDE</h2><p>&#160; &#160; &#160; &#160;目前编写<code>Scala</code>程序有两种比较流行的IDE：<a href="http://scala-ide.org/" target="_blank" rel="external">Eclipse for Scala</a>、<a href="http://www.jetbrains.com/idea/download/" target="_blank" rel="external">idea community edition</a>，注意，eclipse版感觉功能没idea强，但是速度要比idea快（可能是自己电脑配置差的原因），还有下载idea时要下载社区版，他是免费的。<br>&#160; &#160; &#160; &#160;当然如果是初学者的话还是建议使用万能sublime text来写，自己添加一个插件就好。Tools-&gt;Build System-&gt;New Build System…，然后输入：</p>
<pre><code>{
    "<span class="attribute">cmd</span>": <span class="value">[<span class="string">"scala"</span>,<span class="string">"$file"</span>]</span>,
    "<span class="attribute">selector</span>": <span class="value">[<span class="string">"source.scala"</span>]</span>,
    "<span class="attribute">shell</span>": <span class="value"><span class="string">"true"</span>
</span>}
</code></pre><p>这样<code>Scala</code>后缀的程序在Sublime中直接使用<code>Ctrl+B</code>即可运行</p>
<h2 id="变量定义">变量定义</h2><blockquote>
<p>标准格式：{val|var} 变量名[:类型]=[new]Class</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val a=<span class="number">5</span>   <span class="comment">//推断为Int类型</span></span><br><span class="line">val b:Int=<span class="number">5</span>  <span class="comment">//显示的指定为Int类型</span></span><br><span class="line">val c=<span class="number">5f</span>  <span class="comment">//表示Float类型</span></span><br><span class="line">val str:Option[String]  <span class="comment">//表示可空类型</span></span><br></pre></td></tr></table></figure>
<h2 id="函数定义">函数定义</h2><blockquote>
<p>标准格式：def 方法名(参数列表)[:返回类型]={//方法体}</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////推断返回String</span></span><br><span class="line"><span class="function">def <span class="title">hello</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定返回类型</span></span><br><span class="line"><span class="function">def <span class="title">hello</span><span class="params">()</span>:String</span>=</span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"Hello"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="function">def <span class="title">hello</span><span class="params">()</span>:String</span>=<span class="string">"Hello"</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">//传参数，多个用逗号隔开</span></span><br><span class="line"><span class="function">def <span class="title">hello</span><span class="params">(word:String)</span>:String</span>=<span class="string">"Hello"</span>+word</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意函数返回时不需要写return</span></span><br></pre></td></tr></table></figure>
<h2 id="变量不变性">变量不变性</h2><p><code>Scala</code>编程最为推崇的就是变量不变性：变量一旦定义了之后不再改变</p>
<ul>
<li>符合大数据的思想，比如分布式文件系统上只能进行增和删除操作，并没有修改操作</li>
<li>在多线程环境下这个变量是安全的</li>
</ul>
<p>在<code>Scala</code>中有两种类型的不变性</p>
<ul>
<li><code>val</code> vs <code>var</code></li>
</ul>
<p>如果用<code>val</code>定义之后这个变量则不能再被其他变量进行赋值，但是可以对其内容进行修改，<code>val</code>定义的变量就没有这个限制。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable.Map  <span class="comment">//显示得先导入可变的Map包</span></span><br><span class="line"></span><br><span class="line">val a=<span class="number">5</span></span><br><span class="line">a=<span class="number">6</span> <span class="comment">//则会报错：reassignment to val</span></span><br><span class="line"><span class="comment">//如果a用var定义则无影响</span></span><br><span class="line"></span><br><span class="line">val map=Map(<span class="number">1</span>-&gt;<span class="number">2</span>)</span><br><span class="line">map.put(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//这里是修改了变量的内容</span></span><br><span class="line">map.foreach(println(<span class="number">_</span>)) <span class="comment">//会输出(2,3),(1,2)</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>immutable</code> vs <code>mutable</code></li>
</ul>
<p>如果定义的变量属于<code>immutable</code>包，则定义之后该变量的内容再不能再被修改（不显式导入默认为该包下的类型），<code>mutable</code>包下面的类则无此限制。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val immap=Map(<span class="number">1</span>-&gt;<span class="number">2</span>)<span class="comment">//默认为immutable包下面的类</span></span><br><span class="line">immap.put(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//这里是修改了变量的内容 ，但是会报错 value put is not a member of scala.collection.immutable.Map</span></span><br><span class="line"></span><br><span class="line">val map=scala.collection.mutable.Map(<span class="number">1</span>-&gt;<span class="number">2</span>) <span class="comment">//显式指定包</span></span><br><span class="line">map.put(<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//可以正常执行</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>val x=scala.collection.mutable.Type()</code>可以理解为指针常量，指向的地址不可以重新赋值，但内容可以改变<br><code>var x=scala.collection.immutable.Type()</code>可以理解为常量指针，指向的地址可以变，但内容不可以重新赋值</p>
</blockquote>
<h2 id="控制结构和函数">控制结构和函数</h2><h3 id="加强版的if">加强版的if</h3><p><code>if</code>除了正常的逻辑判断外，还可以直接返回相应的值，并且还支持返回不同类型的值</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">val a=<span class="keyword">if</span>(<span class="keyword">false</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="string">"2"</span></span><br><span class="line">a match&#123;</span><br><span class="line">	<span class="keyword">case</span> x:Int=&gt;println(<span class="string">"Int"</span>)  <span class="comment">//true时a=1</span></span><br><span class="line">	<span class="keyword">case</span> x:String=&gt;println(<span class="string">"String"</span>) <span class="comment">//false时a="2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>该功能在实际编程中灰常有用，之前写Java的时候都不得不在if外先定义变量，再在里面赋值-_-</p>
</blockquote>
<h3 id="带有守卫条件的for">带有守卫条件的for</h3><p>守卫是什么东东？你可以理解为<code>for</code>里面的条件控制<br>先来看下<code>Scala</code>的<code>for</code>循环（与传统的三层for结构大不相同，不过与传统的foreach有点类似）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i&lt;-<span class="number">0</span> until <span class="number">5</span>) println(i) <span class="comment">//可以输出0,1,2,3,4</span></span><br></pre></td></tr></table></figure>
<p>那如果我需要双重循环呢?<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i&lt;-<span class="number">0</span> to <span class="number">5</span>;j&lt;-i+<span class="number">1</span> to <span class="number">5</span>) println(i*j) <span class="comment">//大致就是5*5下三角的矩阵相乘值</span></span><br></pre></td></tr></table></figure></p>
<p>再来看一下守卫<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i&lt;-<span class="number">0</span> to <span class="number">5</span>;<span class="keyword">if</span> i%<span class="number">2</span>==<span class="number">0</span>) println(i) <span class="comment">//输出0,2,4</span></span><br></pre></td></tr></table></figure></p>
<p>这个守卫表示只有<code>i%2==0</code>的情况下才会进入循环体，这样是不是很方便。</p>
<h3 id="没有continue、break的while">没有continue、break的while</h3><p>这个我就不吐槽了，<code>Scala</code>作者竟然认为<code>continue</code>、<code>break</code>这两个这么顺手控制循环的功能是没用的，完全可以在守卫中加入条件判断来控制，这叫我们这帮C系狗情何以堪-_-</p>
<h2 id="数组">数组</h2><p>数组作为绝大多数编程语言中的一个经典类型，在<code>Scala</code>是不支持<code>[]</code>这种定义的，而是用<code>Array</code>来定义。</p>
<blockquote>
<p>标准格式：[val|var] 变量名[:Array[数组类型]]=Array(…)|new Array(..)</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">val array:Array[Int]=<span class="keyword">new</span> Array[Int](<span class="number">5</span>)</span><br><span class="line">println(<span class="string">"array.length="</span>+array.length)  <span class="comment">//输出长度为5</span></span><br><span class="line"></span><br><span class="line">val array2=Array(<span class="string">"Mary"</span>,<span class="string">"had"</span>,<span class="string">"a"</span>,<span class="string">"little"</span>,<span class="string">"cat"</span>) <span class="comment">//直接按内容进行初始化</span></span><br><span class="line">println(array2.mkString(<span class="string">"#"</span>))<span class="comment">//</span></span><br><span class="line">println(<span class="string">"the index is 2="</span>+array2(<span class="number">3</span>))<span class="comment">//取索引为3的值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val array3:Array[(String,Int)]=Array((<span class="string">"xiaoming"</span>,<span class="number">23</span>),(<span class="string">"xiaohong"</span>,<span class="number">22</span>))<span class="comment">//使用元祖作为数组内容</span></span><br><span class="line">array3.foreach(println(<span class="number">_</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val matrix =Array.ofDim[Double](<span class="number">3</span>,<span class="number">4</span>)<span class="comment">//定义二维数组</span></span><br></pre></td></tr></table></figure>
<h2 id="类和伴生对象、特质">类和伴生对象、特质</h2><h3 id="类">类</h3><blockquote>
<p>定义：class 类名(构造参数列表) extends,with 继承的类或者接口</p>
</blockquote>
<p>与其他的面向对眼语言不同，<code>Scala</code>中的类支持直接在类名后跟随构造函数列表</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Person(name:String)&#123;</span><br><span class="line"></span><br><span class="line">	private var age:Int=0;</span><br><span class="line"></span><br><span class="line">	def this(name:String,age:Int)</span><br><span class="line">	&#123;</span><br><span class="line">		this(name);//一定要调用上一层的构造函数</span><br><span class="line">		this.age=age;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	def getName=this.name//函数如果无参 可以去掉括号</span><br><span class="line"></span><br><span class="line">	def getAge=this.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val p1=new Person("tom")</span><br><span class="line">println(p1.getName)</span><br><span class="line">val p2=new Person("tom",25)</span><br><span class="line">println(p2.getAge)</span><br></pre></td></tr></table></figure>
<h3 id="伴生对象">伴生对象</h3><p>类没有静态方法或者静态字段，需要用<code>Object</code>这个语法结构来达到同样的目的，一个<code>Object</code>一般与对应的类要在同一个文件中（通过<code>Object</code>就可以实现传说中的不用<code>new</code>关键词来实例化对象）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Student(name:String)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	def getName()=name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">object Student&#123;</span><br><span class="line"></span><br><span class="line">	//这个伴生对象可以和他的class共享变量</span><br><span class="line">	def apply(name:String):Student=</span><br><span class="line">	&#123;</span><br><span class="line">		new Student(name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val stu1=new Student("tom");</span><br><span class="line">println(stu1.getName)</span><br><span class="line">val stu2=Student("peter");//这里其实是调用了Object的apply方法  </span><br><span class="line">println(stu2.getName)</span><br></pre></td></tr></table></figure>
<p>啥都不是说了，没有<code>static</code>是有点奇怪，但是这个<code>Object</code>也不错啊，用习惯就好了(^_^)</p>
<h3 id="接口的加强版-特质">接口的加强版-特质</h3><p>当然<code>Scala</code>里面也是没有<code>Interface</code>这种东西的，而是用<code>trait</code>特质来代替，这个特质类似接口，但是他可以自己实现方法（惊呆了,-_-），这样一来<code>Scala</code>就支持传说中的多继承了，关于多继承里面的菱形问题<code>Scala</code>是通过最后一个相同名称的方法来解决的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">trait Logger&#123;</span><br><span class="line">	<span class="function">def <span class="title">log</span><span class="params">(msg:String)</span></span>&#123;&#125;<span class="comment">//直接在特质里面实现了方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trait ConsoleLogger extends Logger &#123;</span><br><span class="line">	<span class="function">override def <span class="title">log</span><span class="params">(msg:String)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		println(msg)<span class="comment">//特质之间能直接继承</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用width来实现多继承</span></span><br><span class="line"><span class="comment">//class ConsoleLogger extends Logger with Cloneable with Serializable</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">	<span class="keyword">protected</span> var balance:Double=<span class="number">100</span></span><br><span class="line">	def getBalance=balance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关于Scala的多继承就是通过继承特征来实现的  with trait 可以一下下去</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveingsAccount</span> <span class="keyword">extends</span> <span class="title">Account</span> <span class="title">with</span> <span class="title">Logger</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="function">def <span class="title">withdraw</span><span class="params">(amount:Double)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(amount&gt;balance)</span><br><span class="line">		&#123;</span><br><span class="line">			log(<span class="string">"amount&gt;balance,can't withdraw"</span>)</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			log(<span class="string">"withdraw"</span>+amount)</span><br><span class="line">			balance-=amount;</span><br><span class="line">		&#125;</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">"s111111111"</span>)</span><br><span class="line">val s=<span class="keyword">new</span> SaveingsAccount();</span><br><span class="line">s.withdraw(<span class="number">101</span>);</span><br><span class="line">s.withdraw(<span class="number">34</span>);</span><br><span class="line">println(<span class="string">"remain"</span>+s.getBalance)</span><br><span class="line"></span><br><span class="line">println(<span class="string">"\r\ns222222222"</span>)</span><br><span class="line">val s2=<span class="keyword">new</span> SaveingsAccount() with ConsoleLogger;<span class="comment">//这个with其实是可以写到SaveingsAccount类上面的，写在这里只是为了说明Scala的灵活，实在是太灵活了。。</span></span><br><span class="line">s2.withdraw(<span class="number">101</span>);</span><br><span class="line">s2.withdraw(<span class="number">34</span>);</span><br><span class="line">println(<span class="string">"remain"</span>+s2.getBalance)</span><br></pre></td></tr></table></figure>
<p>输出的结果为：</p>
<pre><code>s111111111
remain66.0

s222222222
amount&gt;balance,can<span class="operator">'</span>t withdraw
withdraw34.0
remain66.0
</code></pre><h2 id="柯里化">柯里化</h2><blockquote>
<p>可以将函数的参数列表使用多个括号分类来调用（在其他地方没见过吧~^_^）</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">mul</span><span class="params">(x:Int,y:Int)</span></span>=x*y  <span class="comment">//普通青年</span></span><br><span class="line"><span class="function">def <span class="title">mulOneAtATime</span><span class="params">(x:Int)</span></span>=(y:Int)=&gt;x*y  <span class="comment">//2B青年  </span></span><br><span class="line"><span class="function">def <span class="title">mulSample</span><span class="params">(x:Int)</span><span class="params">(y:Int)</span><span class="params">(z:Int)</span></span>=x*y*z<span class="comment">//文艺青年</span></span><br><span class="line"></span><br><span class="line">val x=<span class="number">5</span></span><br><span class="line">val y=<span class="number">6</span></span><br><span class="line">println(<span class="string">"mul"</span>,mul(x,y))</span><br><span class="line">println(<span class="string">"mulOneAtATime"</span>,mulOneAtATime(x)(y))</span><br><span class="line">println(<span class="string">"mulSample"</span>,mulSample(x)(y)(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<p>一般我们在一个函数中如果需要传的参数可以分为几个类别，这样使用柯里化可以让整个函数的调用更加清晰一点。（恩，的确也是）</p>
<h2 id="模式匹配和样例类">模式匹配和样例类</h2><h3 id="模式匹配">模式匹配</h3><blockquote>
<p>模式匹配<code>match</code>是一个更好的<code>switch</code></p>
</blockquote>
<p><code>Scala</code>的<code>match</code>除了可以匹配确定值以外，他还有：</p>
<ul>
<li>可以匹配数组、元祖、样例类等</li>
<li>可以在匹配时加入守卫（就是匹配的判断条件啦^_^）</li>
<li>可以在模式匹配之后进行值的返回</li>
<li>不会有意外掉落到下一个分支问题（也就是没有<code>break</code>）</li>
<li>如果得不到匹配会跑出异常，所以如果不确保能全部覆盖匹配则再最后用<code>_</code>占位符来匹配所有情况</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">val ch:Char=<span class="string">'-'</span></span><br><span class="line">val sign=<span class="number">5</span>;</span><br><span class="line">val result =ch match&#123;<span class="comment">//有返回值</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">'+'</span>=&gt;sign+<span class="number">1</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">'-'</span>=&gt;sign-<span class="number">1</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span>=&gt;sign</span><br><span class="line">&#125;</span><br><span class="line">println(result)</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行是否大于5的判断</span></span><br><span class="line">val flag=<span class="number">5</span></span><br><span class="line">flag match&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span> <span class="keyword">if</span> flag&gt;<span class="number">5</span>=&gt;println(<span class="string">"&gt;5"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span> <span class="keyword">if</span> flag&lt;<span class="number">5</span>=&gt;println(<span class="string">"&lt;5"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span> =&gt;println(flag)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用类型来进行匹配</span></span><br><span class="line">val obj=<span class="keyword">if</span>(<span class="keyword">false</span>) <span class="number">5</span> <span class="keyword">else</span> <span class="string">"5"</span></span><br><span class="line">obj match&#123;</span><br><span class="line">	<span class="keyword">case</span> obj:Int=&gt;println(<span class="string">"i am Int"</span>)</span><br><span class="line">	<span class="keyword">case</span> obj:String=&gt;println(<span class="string">"i am String"</span>)</span><br><span class="line">	<span class="keyword">case</span> obj:BigInt=&gt;println(<span class="string">"i am bigint"</span>)</span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span>=&gt;println(<span class="string">"i am any"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配数组</span></span><br><span class="line">val arr=Array(<span class="number">0</span>,<span class="number">7</span>)</span><br><span class="line">arr match&#123;</span><br><span class="line">	<span class="function"><span class="keyword">case</span> <span class="title">Array</span><span class="params">(<span class="number">0</span>)</span></span>=&gt;println(<span class="string">"0"</span>) <span class="comment">//匹配只有一个0的数组</span></span><br><span class="line">	<span class="function"><span class="keyword">case</span> <span class="title">Array</span><span class="params">(x,y)</span></span>=&gt;println(x+<span class="string">"+"</span>+y)  <span class="comment">//匹配含有两个元素的数组</span></span><br><span class="line">	<span class="function"><span class="keyword">case</span> <span class="title">Array</span><span class="params">(<span class="number">0</span>,_*)</span></span>=&gt;println(<span class="string">"start 0"</span>) <span class="comment">//匹配以0为第一个元素的数组</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span>=&gt;println(<span class="string">"any"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配元组</span></span><br><span class="line">val tuple=(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">tuple match&#123;</span><br><span class="line">	<span class="keyword">case</span> (<span class="number">_</span>,<span class="number">2</span>)=&gt;println(<span class="string">"end2"</span>)<span class="comment">//匹配以2结尾的元组</span></span><br><span class="line">	<span class="keyword">case</span> (<span class="number">1</span>,<span class="number">_</span>)=&gt;println(<span class="string">"start 1"</span>)<span class="comment">//匹配以1开头的元组</span></span><br><span class="line">	<span class="keyword">case</span> <span class="number">_</span>=&gt;println(<span class="string">"nothing"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS:功能很强大吧，在<code>Scala</code>的程序里面随处都可以看到<code>match</code>，甚至很多情况下使用<code>match</code>来完成<code>if-else</code>的操作</p>
</blockquote>
<h3 id="样例类">样例类</h3><blockquote>
<p>样例类是一种特殊的类，它们经过优化以被用于模式匹配</p>
</blockquote>
<p>你可以把样例类看做一个结构体，里面定义数据类型，然后在<code>match</code>操作的时候得以方便得传参</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">abstract class Amount  //定义一个抽象类</span><br><span class="line">case class Dollar(value:Double) extends Amount  //定义一个美元得样例类 继承了Amount</span><br><span class="line">case class Currency(value:Double,unit:String) extends Amount  //顶一个现金的抽象类  也是继承了Amount</span><br><span class="line"></span><br><span class="line">case object Nothing extends Amount</span><br><span class="line"></span><br><span class="line">val amt:Amount=Currency(6,"$") //实例化一个样例类 注意没有new</span><br><span class="line">amt match&#123;//使用样例类进行模式匹配</span><br><span class="line">	case Dollar(x)=&gt;println(x)</span><br><span class="line">	case Currency(value,unit)=&gt;println("oh,i get "+value+unit)//在这里得到了匹配，看到没？可以传参数</span><br><span class="line">	case Nothing=&gt;println("nothing")</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>PS：<code>Scala</code>的框架中样例类也用的特别多，比如说<a href="http://spark.apache.org/" target="_blank" rel="external">Spark</a></p>
</blockquote>
<h2 id="Actor">Actor</h2><blockquote>
<p><code>Actor</code>提供了并发程序中与传统的基于锁结构不同的另一个选择</p>
</blockquote>
<p>他有两种发送消息的方式：</p>
<ul>
<li><code>actor!message</code>:发送消息之后非阻塞的，也没有返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.actors.Actor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HiActor</span> <span class="keyword">extends</span> <span class="title">Actor</span></span>&#123; <span class="comment">//自定义一个actor类，它一定是要继承Actor</span></span><br><span class="line">	<span class="function">def <span class="title">act</span><span class="params">()</span><span class="comment">//重写该方法</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			receive &#123;<span class="comment">//在这里接收消息，其实这里就是一个模式匹配</span></span><br><span class="line">				<span class="keyword">case</span> <span class="string">"Hi"</span>=&gt;println(<span class="string">"hello!"</span>)</span><br><span class="line">				<span class="keyword">case</span> <span class="string">"Goodbye"</span>=&gt;println(<span class="string">"bye bye!"</span>)</span><br><span class="line">				<span class="keyword">case</span> <span class="number">_</span> =&gt;println(<span class="string">"i don't know"</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">val act=<span class="keyword">new</span> HiActor</span><br><span class="line">act.start <span class="comment">//一定要启动之后才能发送</span></span><br><span class="line"></span><br><span class="line">println(<span class="string">"send Hi"</span>)</span><br><span class="line">act!<span class="string">"Hi"</span></span><br><span class="line">println(<span class="string">"send Goodbye"</span>)</span><br><span class="line">act!<span class="string">"Goodbye"</span></span><br></pre></td></tr></table></figure>
<p>这样就会输出</p>
<pre><code>send Hi
send Goodbye
hello!
<span class="built_in">bye</span> <span class="built_in">bye</span>!
</code></pre><ul>
<li><code>actor!?message</code>:发送消息之后会阻塞下面代码的执行，而且还是可以得到返回值的</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.actors.Actor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AccountActor</span> <span class="keyword">extends</span> <span class="title">Actor</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> var balance=<span class="number">0.0</span></span><br><span class="line"></span><br><span class="line">	def getBalance=<span class="function">balance</span><br><span class="line">	def <span class="title">act</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//使用样例类来进行匹配</span></span><br><span class="line">			receive &#123;</span><br><span class="line">				<span class="function"><span class="keyword">case</span> <span class="title">Desposit</span><span class="params">(amount)</span></span>=&gt;</span><br><span class="line">					println(<span class="string">"Desposit "</span>+amount)</span><br><span class="line">					balance+=amount</span><br><span class="line">					sender!<span class="function"><span class="keyword">true</span></span><br><span class="line">				<span class="keyword">case</span> <span class="title">WidthDraw</span><span class="params">(amount)</span></span>=&gt;</span><br><span class="line">					<span class="keyword">if</span>(balance&lt;amount)</span><br><span class="line">					&#123;</span><br><span class="line">						println(<span class="string">"the balance less than amount"</span>)</span><br><span class="line">						sender!<span class="keyword">false</span></span><br><span class="line">					&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">						println(<span class="string">"WidthDraw"</span>+amount)</span><br><span class="line">						balance-=amount</span><br><span class="line">						sender!<span class="keyword">true</span></span><br><span class="line">					&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">case</span> class <span class="title">Desposit</span><span class="params">(amount:Double)</span>  <span class="comment">//存钱的样例类</span></span><br><span class="line"><span class="keyword">case</span> class <span class="title">WidthDraw</span><span class="params">(amount:Double)</span> <span class="comment">//取钱的样例类</span></span><br><span class="line"></span><br><span class="line">val account</span>=<span class="keyword">new</span> AccountActor</span><br><span class="line">account.start</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果使用非阻塞的，整个存取钱的系统会不正常</span><br><span class="line">println(account!WidthDraw(100))</span><br><span class="line">println(account!Desposit(100))</span><br><span class="line">println(account!WidthDraw(50))</span><br><span class="line">println("account.getBalance"+account.getBalance)*/</span></span><br><span class="line"></span><br><span class="line">println(account!?WidthDraw(<span class="number">100</span>))<span class="comment">//取100  会说钱不够，没法取</span></span><br><span class="line">println(account!?Desposit(<span class="number">100</span>))<span class="comment">//存100</span></span><br><span class="line">println(account!?WidthDraw(<span class="number">50</span>))<span class="comment">//再取50</span></span><br><span class="line">println(<span class="string">"account.getBalance"</span>+account.getBalance)<span class="comment">//可以正常取钱</span></span><br></pre></td></tr></table></figure>
<p>输出的结果为：</p>
<pre><code><span class="keyword">the</span> balance <span class="keyword">less than</span> amount
<span class="constant">false</span>
Desposit <span class="number">100.0</span>
<span class="constant">true</span>
WidthDraw50.0
<span class="constant">true</span>
account.getBalance50.0
</code></pre><blockquote>
<p>PS:大名鼎鼎的<code>AKKA</code>就是基于<code>Actor</code>来实现的，是分布式、高并发的消息驱动框架（听听就是高大上~^_^）</p>
</blockquote>
<h2 id="隐式转换">隐式转换</h2><p>你知否曾希望某个类有某个方法，而这个类的作者却没有提供你？</p>
<blockquote>
<p>所谓隐式转换函数指的是那种以<code>implicit</code>关键字声明的带有单个参数的函数。</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//定义一个现金转换类</span><br><span class="line">class Currency(val value:Double)&#123;</span><br><span class="line">	def $2y=value*6 //美元转人民币</span><br><span class="line">	def y2$=value/6 //人民币转美元</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//普通用法就是需要自己去实例化一个Currency类再去</span><br><span class="line">val money=new Currency(100.0)</span><br><span class="line">println(money.$2y) //执行去转换的方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//这里使用隐式转换</span><br><span class="line">implicit def double2Currency(value:Double)=new Currency(value)</span><br><span class="line">println(100.$2y)//就可以直接在数字上使用该现金转换的方法了</span><br><span class="line">//A：有同学可能要问了，这不是double转为Currency的嘛？怎么Int类型也能用？</span><br><span class="line">//Q：不错，100是Int类型，但是这里默认是带有Int 转 Double的隐式转换</span><br></pre></td></tr></table></figure>
<p>在使用隐式转换时只需要确保调用之前 已经直接了定义的隐式转换方法即可，而且一般定义转换名称为<code>元类型2目标类型</code>，这样比较好记啊(^_^)</p>
<blockquote>
<p>Note:在Scala编写框架时他的功能类往往不会直接暴露出来，而是通过隐式转换的方式来让用调用 （这点可以让你的框架代码结构非常清晰，但是。。。你要看源码实际调用类的时候就很难找到了）</p>
</blockquote>
<h2 id="还有还有">还有还有</h2><ul>
<li>元组：这不是元祖月饼-_-，接触过<code>Python</code>的同学应该都知道吧</li>
<li><code>List,Map,etc</code>的集合类</li>
<li>万能占位符<code>_</code>，懒人模式用的，因为有时候懒得想变量</li>
<li><code>lazy</code> 懒加载，在调用的时候才会加载。。明显有好处嘛^_^</li>
<li>用索引取值一般用圆括号<code>(i)</code>，定义变量类型、泛型一般用方括号<code>[K,V]</code></li>
<li>其他的好也好多都不熟悉了 -_-</li>
</ul>
<h2 id="参考">参考</h2><ul>
<li>《快学Scala》</li>
<li>《Scala编程-中文版》</li>
<li><a href="http://www.scala-lang.org/" target="_blank" rel="external">Scala</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>&#160; &#160; &#160; &#160;由于实验需要在半年前开始接触<code>Scala</code>，之前也学习/使用过<a href="http://www.tiobe.com/content/paperinfo/tpci/tpci_definition]]>
    </summary>
    
      <category term="Scala" scheme="http://yyl8781697.github.io/tags/Scala/"/>
    
      <category term="Scala" scheme="http://yyl8781697.github.io/categories/Scala/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《Effective Java》第二章：创建和销毁对象]]></title>
    <link href="http://yyl8781697.github.io/2015/04/22/Effective%20Java/Create-Destory-Object/"/>
    <id>http://yyl8781697.github.io/2015/04/22/Effective Java/Create-Destory-Object/</id>
    <published>2015-04-22T12:33:05.000Z</published>
    <updated>2015-04-25T08:51:52.000Z</updated>
    <content type="html"><![CDATA[<p>本章的主题是创建和销毁对象：何时以及如何创建对象，何时以及如何避免创建对象，如何确保它们能够适时得销毁，以及如何管理对象和销毁之前必须进行的各种清理动作。</p>
<h2 id="第1条：考虑用静态工厂方法代替构造器">第1条：考虑用静态工厂方法代替构造器</h2><blockquote>
<p>这条感觉就是推荐我们尽量使用静态方法来生成实例对象。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title">valueOf</span><span class="params">(<span class="keyword">boolean</span> b)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> b?Boolean.TRUE:Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推荐的理由如下：</p>
<ol>
<li>静态构造方法有自己的名称。（这理由是不是有点。。，个人感觉绝大部分程序猿在创建对象时都是首先尝试<code>new Construct()</code>）</li>
<li>不必在每次调用它们时都创建一个新的对象。(单例中比较常用吧)</li>
<li>它们可以返回原返回类型的任何子类型的对象。（<strong>这个特征的确是比较有优势一点</strong>）</li>
<li>在创建参数化类型实例的时候，它们使代码变得更加简洁。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通是需要这么干的</span></span><br><span class="line">Map&lt;String,List&lt;String&gt;&gt; m=<span class="keyword">new</span> HashMap&lt;String,List&lt;String&gt;&gt;();</span><br><span class="line"><span class="comment">//使用了第4条直接这么干就好了（但是实际上HashMap也没提供这个功能啊-_-）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>&lt;K,V&gt; HashMap&lt;K,V&gt; newInstance()&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;K,V&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然使用这种静态方法也有缺点：</p>
<ol>
<li>类如何不含有公有的或者受保护的构造器，就不能子类化。</li>
<li>它们与其他的静态方法实际上没有任何区别。</li>
</ol>
<p>一些静态工厂方法的惯用名称（也的确常见）：</p>
<ul>
<li>ValueOf</li>
<li>of</li>
<li>getInstance</li>
<li>newInstance</li>
<li>getType</li>
<li>newType</li>
</ul>
<h2 id="第2条：遇到多个构造器参数的时候要考虑用构建器">第2条：遇到多个构造器参数的时候要考虑用构建器</h2><p>当你的<code>Class</code>有多个自定义参数需要初始化的时候-_-</p>
<h3 id="重叠构造器">重叠构造器</h3><p>你可能会使用重叠构造器来编写代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="comment">//field</span></span><br><span class="line">	Test(arg1)<span class="comment">//</span></span><br><span class="line">	Test(arg1,arg2)<span class="comment">//</span></span><br><span class="line">	Test(arg1,arg2,arg3)<span class="comment">//</span></span><br><span class="line">	Test(arg1,arg2,arg3,arg4)<span class="comment">//</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是当需要初始化的参数实在太多的时候，这个<code>Class</code>的构造函数很快就会失去控制，而且在调用构造器的时候也会因为要初始化的参数太多而弄混。</p>
<h3 id="使用setter方法来设置参数">使用setter方法来设置参数</h3><p>即<code>JavaBean</code>模式，在这种模式下调用一个无参构造器来创建对象，然后调用setter方法来设置每个必要的参数，以及每个可选参数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="comment">//field</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(arg1)</span></span>&#123;&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg1)</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg2)</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg3)</span></span>&#123;&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg4)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式弥补重叠构造器模式的不足，创建对象实例很容易，并且代码读起来也很容易：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Test test=<span class="keyword">new</span> Test();</span><br><span class="line">test.setArg1(..)</span><br><span class="line">test.setArg2(..)</span><br><span class="line">test.setArg3(..)</span><br><span class="line">test.setArg4(..)</span><br></pre></td></tr></table></figure>
<p>但是它有一个严重的缺点，就是这个构造过程被分到几个不同的调用中时，该对象可能处于不一致的状态。-_-</p>
<h3 id="使用Builder模式">使用Builder模式</h3><p>它既能保证那重叠构造器那样安全，也能保证像<code>JavaBean</code>那样有好的可读性。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">	<span class="comment">//field</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Test</span><span class="params">(Builder builder)</span></span>&#123;</span><br><span class="line">		<span class="comment">//filed=builder.filed...</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">		<span class="comment">//field</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg1)</span></span>&#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg2)</span></span>&#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg3)</span></span>&#123;&#125;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArg1</span><span class="params">(arg4)</span></span>&#123;&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> Test <span class="title">build</span><span class="params">()</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Test(<span class="keyword">this</span>);<span class="comment">//通过内部类构造该类</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种模式其实是生成一个内部类，在内部类中通过<code>setter</code>方法设置相应的字段，然后调用<code>build</code>方法生成真正需要的<code>Class</code>实例。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Test test=<span class="keyword">new</span> Test.Builder()</span><br><span class="line">				.setArg1()</span><br><span class="line">				.setArg2()</span><br><span class="line">				.setArg3()</span><br><span class="line">				.setArg4()</span><br><span class="line">				.build()</span><br></pre></td></tr></table></figure>
<p>这个方法十分灵活，可以通过构建一个builder来构建多个对象，builder的参数可以在构建期间进行调整，也可以随不同的对象而改变。<br><br>此时，我们可以将这个builder定义为一个通用的接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后可以通过创建接口来创建更多的实例对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Builder&lt;Test&gt; builderTest=<span class="keyword">new</span> Test.Builder()</span><br><span class="line">.setArg1()</span><br><span class="line">.setArg2()</span><br><span class="line">.setArg3()</span><br><span class="line">.setArg4()</span><br><span class="line"></span><br><span class="line">builderTest.build()</span><br></pre></td></tr></table></figure>
<p>Builder模式也有不足之处，为了创建对象，必须创建它的构建器，虽然创建构建器的开销在实践中不是那么明显，但是在某些十分注重性能的情况下，可能会成功问题。<br><br>简而言之，如果累的构造器或者静态工厂中具有多个参数，设计这种类时,Builder模式模式是一个不错的选择。</p>
<h2 id="第3条：用私有的构造器或者枚举类型强化Singleton属性">第3条：用私有的构造器或者枚举类型强化Singleton属性</h2><p>单例模式估计是大家在《设计模式》中最早接触的一种，也是较为常用的一种模式，从它的线程安全性和运行效率性上考虑，我们所了解的应该有这么几种类型的单例写法<sup>1<sup>：</sup></sup></p>
<ul>
<li>懒汉式单例</li>
<li>饿汉式单例</li>
<li>登记式单例</li>
</ul>
<p>除了上述，书本极力推荐的一种是<strong>单元素枚举类型</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Elvis&#123;</span><br><span class="line">	INSTANCE;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span></span>&#123;<span class="comment">//...&#125;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法无偿的提供了序列化机制，绝对防止多次实例化。但是由于为了使用单例将”类”改为了”枚举”，这样就是导致丢掉一些类的特征，比如说继承，因为枚举是默认继承<code>java.lang.Enum</code>。</p>
<h2 id="第4条：通过私有构造器强化不可实例化的能力">第4条：通过私有构造器强化不可实例化的能力</h2><p>当你的类里面只包含静态方法和静态变量时（比如说工具类），那么请在该类上添加一个私有的构造器，这样可以保护该类，同时也不会误导用户。<br><br>当然这么写有个副作用就是这个类就不能被继承了，子类就没有访问超类的构造器可用了。</p>
<h2 id="第5条：避免创建不必要的对象">第5条：避免创建不必要的对象</h2><p>一般来说，最好能重用对象而不是在每次需要的时候就创建一个项目功能的新对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">String s=<span class="keyword">new</span> String(<span class="string">"stringette"</span>);<span class="comment">//不要这么做</span></span><br><span class="line">String s=<span class="string">"stringette"</span>;<span class="comment">//在同一台虚拟机中运行时，该对象会被重用</span></span><br></pre></td></tr></table></figure>
<p>几大重用的关键点：</p>
<ul>
<li>对于同时提供了静态工厂方法和构造器的不可变类，通常可以使用静态工厂方法，以免创建不必要的对象。</li>
<li>可以重用那些已知不会被修改的可变对象。</li>
<li>优先使用基本类型而不是装箱类型。</li>
</ul>
<blockquote>
<p>本条目并不是暗示“创建对象的代价非常昂贵，我们应该要尽量避免对象的创建”</p>
</blockquote>
<h2 id="第6条：消除过期的引用">第6条：消除过期的引用</h2><p>这条就是描述过期的引用会存在内存泄露的问题，那我们程序猿该如何处理呢？</p>
<blockquote>
<p>类要是自己管理内存，程序猿就应该警惕内存泄露问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 简单的栈结构的实现</span><br><span class="line"> *<span class="javadoctag"> @author</span> yyl  form Effective Java</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Object[] elements;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPCAITY=<span class="number">16</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		elements=<span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPCAITY];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		ensureCapacity();<span class="comment">//确保容量足够</span></span><br><span class="line">		elements[size++]=e;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(size==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">		<span class="keyword">return</span> elements[--size];<span class="comment">//</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(elements.length==size)</span><br><span class="line">			elements=Arrays.copyOf(elements, <span class="number">2</span>*size+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码是一个简单的栈结构的实现，但是在元素被多次<code>pop()</code>之后，<code>Object[]</code>里面索引大于<code>size</code>的对象不在可用，但是由于他们还是存储在数组中，所以垃圾回收机制不会处理这些对象，最终会造成内存泄露。<br><br>可以用下面的方法来修复：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(size==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">	Object ret=elements[--size];</span><br><span class="line">	elements[size]=<span class="keyword">null</span>;<span class="comment">//清空引用</span></span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述只是一个特征，这条并不是教我们对于每个对象引用不再用到时就将它清空，其实没有这个必要，这样做会把代码弄得很乱，清除过期引用最好的方法是让包含该引用变量结束生命周期。</p>
<blockquote>
<p>内存泄露另一种常见的来源是缓存</p>
</blockquote>
<p> 当对象放入缓存中很容易被遗忘，然而它会长期存储在内存中，这样可以使用<code>WeakHashMap</code>来代表缓存，当缓存的项过期之后，他们会被自动删除。<br><br>也可以使用<code>LinkedHashMap</code>来实现LRU缓存，当容量满时会删除最久一个没有用过的项。</p>
<blockquote>
<p>内存泄露的第三个常见的来源是监听器和其他回调</p>
</blockquote>
<p>比如说你注册了某些Api的回调，但是没有显示的取消注册，这样他们会越积越多。~~~~</p>
<h2 id="第7条：避免终结方法">第7条：避免终结方法</h2><blockquote>
<p>终结方法（<code>finalizer</code>）通常是不可预测的，也是很危险的，一般情况下是不必要的。</p>
</blockquote>
<p>避免的原因有如下几个：</p>
<ul>
<li><p>不能保证被及时的执行。<br><br>因为进行<code>gc</code>时终结方法的优先级一般比其他的要低，注重时间的任务不应该用终结方法来完成，比如在<code>finalizer</code>中关闭已打开的文件</p>
</li>
<li><p>JVM不会保证他们会被执行。<br><br>不应该依赖终结方法来更新中重要的持久状态。</p>
</li>
<li><p>终结方法可能会有非常重要的性能损失。</p>
</li>
</ul>
<p>所以如果在自己的类中真实的需要将对象终止，则自己最好提供一个显示的终止方法，并且要求编码人员再不需要该对象时进行显示掉调用终止方法，比如<code>file.close</code><br></p>
<p>当然终结方法也不是一无是处：</p>
<ol>
<li>当对象的所有者忘记调用前面段落中建议的显示终止方法时，可以用终止方法在日志中记录记录警告或者再显示的调用该终止方法</li>
<li>与对象的本地对等体有关。大概是普通对象通过<code>native method</code>委托给一个本地对象，而这个本地对象时不受<code>jVM</code>管理的。但是可以使用终结方法来完成必要资源释放，它可以是本地方法，也可以条用本地方法。</li>
</ol>
<blockquote>
<p>注意：<code>finalizer</code>方法链不会自动的执行，所以在自定义<code>finalizer</code>时最好显示得调用<code>super.finalizer()</code></p>
</blockquote>
<h2 id="参考">参考</h2><ol>
<li><a href="http://blog.csdn.net/jason0539/article/details/23297037" target="_blank" rel="external">http://blog.csdn.net/jason0539/article/details/23297037</a></li>
</ol>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>本章的主题是创建和销毁对象：何时以及如何创建对象，何时以及如何避免创建对象，如何确保它们能够适时得销毁，以及如何管理对象和销毁之前必须进行的各种清理动作。</p>
<h2 id="第1条：考虑用静态工厂方法代替构造器">第1条：考虑用静态工厂方法代替构造器</h2><blo]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Effective Java" scheme="http://yyl8781697.github.io/categories/Effective-Java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于Java枚举的重写]]></title>
    <link href="http://yyl8781697.github.io/2015/04/21/Java%20Base/Enum-Override/"/>
    <id>http://yyl8781697.github.io/2015/04/21/Java Base/Enum-Override/</id>
    <published>2015-04-21T12:34:28.000Z</published>
    <updated>2015-04-25T07:19:00.000Z</updated>
    <content type="html"><![CDATA[<p>对于Java枚举我之前所知道的是<sup>1</sup>：</p>
<ol>
<li>枚举本身就是一个类。</li>
<li>它不能有<code>public</code>的构造函数，这样做可以保证客户代码没有办法新建一个enum的实例。     </li>
<li>所有枚举值都是<code>public static final</code>的。注意这一点只是针对于枚举值，我们可以和在普通类里面定义变量一样定义其它任何类型的非枚举变量，这些变量可以用任何你想用的修饰符。     </li>
<li>Enum默认实现了<code>java.lang.Comparable</code>接口。     </li>
<li>Enum覆载了了<code>toString</code>方法，因此我们如果调用<code>Color.Blue.toString()</code>,默认返回字符串”Blue”.</li>
<li>Enum提供了一个<code>valueOf</code>方法，这个方法和<code>toString</code>方法是相对应的。调用<code>valueOf(“Blue”)</code>将返回<code>Color.Blue</code>.因此我们在自己重写<code>toString</code>方法的时候就要注意到这一点，一般来说应该相对应地重写<code>valueOf</code>方法。     </li>
<li>Enum还提供了<code>values</code>方法，这个方法使你能够方便的遍历所有的枚举值</li>
<li>Enum还有一个<code>oridinal</code>的方法，这个方法返回枚举值在枚举类种的顺序。</li>
</ol>
<p>《Effective Java》中写着单例模式推荐的方式是使用<strong>单元素的枚举类</strong>实现，在查资料过程中竟然发现枚举值里面还能重写枚举的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 单元素的枚举类型的 单例</span><br><span class="line"> *<span class="javadoctag"> @author</span> yyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Person &#123;</span><br><span class="line">	<span class="comment">//这里每一个枚举项都可以看做一个单例实例</span></span><br><span class="line">	instance,</span><br><span class="line">	him&#123;</span><br><span class="line">		<span class="annotation">@Override</span> </span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"gays:"</span>+str;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	she&#123;</span><br><span class="line">		<span class="annotation">@Override</span> </span><br><span class="line">		<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="string">"girls:"</span>+str;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String str)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"Hello:"</span>+str;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用单例的方式来调用<code>sayHello</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Person.instance.sayHello(<span class="string">"tom"</span>));</span><br><span class="line">System.out.println(Person.him.sayHello(<span class="string">"tom"</span>));</span><br><span class="line">System.out.println(Person.she.sayHello(<span class="string">"tom"</span>));</span><br></pre></td></tr></table></figure>
<p>可以看到其输出为：</p>
<pre><code><span class="label">Hello:</span>tom
<span class="label">gays:</span>tom
<span class="label">girls:</span>tom
</code></pre><h2 id="参考">参考</h2><ol>
<li><a href="http://www.cnblogs.com/rollenholt/archive/2012/11/27/2790402.html" target="_blank" rel="external">http://www.cnblogs.com/rollenholt/archive/2012/11/27/2790402.html</a></li>
<li><a href="http://www.cnblogs.com/hemingwang0902/archive/2011/12/29/2306263.html" target="_blank" rel="external">http://www.cnblogs.com/hemingwang0902/archive/2011/12/29/2306263.html</a></li>
</ol>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>对于Java枚举我之前所知道的是<sup>1</sup>：</p>
<ol>
<li>枚举本身就是一个类。</li>
<li>它不能有<code>public</code>的构造函数，这样做可以保证客户代码没有办法新建一个enum的实例。     </li>
<li>所有枚]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="http://yyl8781697.github.io/categories/Java-Base/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自己煮：可口又美味的可乐鸡翅]]></title>
    <link href="http://yyl8781697.github.io/2015/04/19/Food/Coke-Chicken-feet/"/>
    <id>http://yyl8781697.github.io/2015/04/19/Food/Coke-Chicken-feet/</id>
    <published>2015-04-19T12:23:47.000Z</published>
    <updated>2015-04-24T12:35:32.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>喜欢啃鸡爪，喜欢各种做法的鸡爪，包括泡椒凤爪，鸡爪煲，红烧鸡爪等。<br>咱这次做了一次可乐鸡爪，哈哈</p>
</blockquote>
<h2 id="食材">食材</h2><ul>
<li>鸡爪：10个</li>
<li>油、料酒、酱油~~~~</li>
<li>生姜、大蒜：适量</li>
<li>八角、香叶：适量</li>
<li>辣椒：一点点就好了</li>
<li>可乐（别太少了，估计3.5元的小瓶装可能不够）</li>
</ul>
<h2 id="步骤">步骤</h2><h3 id="准备">准备</h3><p><img src="/img/Coke-Chicken-feet/1.ready.jpg" alt=""><br><br>首先每个鸡爪切成两半，这是为什么呢？</p>
<ul>
<li>一个是方便煮熟</li>
<li>另一个是方便啃（不然整个鸡爪啃的时候很容易把汁碰到脸）</li>
<li>当然，如果你喜欢啃整个就跳过这一步</li>
</ul>
<h3 id="预煮">预煮</h3><p><img src="/img/Coke-Chicken-feet/2.ruguo.jpg" alt=""><br><br>将切好的鸡爪丢进清水中煮，这个时候可以放一点点生姜和少许料酒，大概煮十分钟左右，如果不煮的话也可以把鸡爪先放进电饭煲中蒸一下（正好煮饭）。<br><br>如果不经过预煮的话很难讲鸡爪煮熟（第一次我就遇到了这种情况）<br><img src="/img/Coke-Chicken-foot/3.zhenghao.jpg" alt=""><br><br>将鸡爪煮到5分熟之后是这样的</p>
<h3 id="爆炒">爆炒</h3><p><img src="/img/Coke-Chicken-feet/4.baochao.jpg" alt=""><br><br>在锅里面放入少许油，等油热了之后把生姜、大蒜、辣椒丢进去把油炒香，然后放预煮之后的鸡爪。<br>注意这里千万要把火开小，因为预煮捞出来的鸡爪带有水分，很容易将油爆起来-_-|<br><br>爆炒几十秒之后放入少许酱油和料酒，接下来就可以放可乐了。<br><img src="/img/Coke-Chicken-feet/5.fangkele.jpg" alt=""><br></p>
<blockquote>
<p>注意：放的可乐一定要将全部的鸡爪淹没掉，这样味道才好。<br>此时可以放一片八角和香叶。</p>
</blockquote>
<h3 id="正煮Ing_&amp;_收汁">正煮Ing &amp; 收汁</h3><p>接下来就是等待的煮，水开之后可以把火适当的关小一点，还有关于口味此时可以稍微放一些盐</p>
<blockquote>
<p>别放太多，因为之前已经放过酱油了<br>大概20~30分钟之后就会慢慢收汁了，香味也都出来了。</p>
</blockquote>
<p><img src="/img/Coke-Chicken-feet/6.shouzhi.jpg" alt=""><br></p>
<hr>
<h3 id="出锅">出锅</h3><p>出锅之前放一点点味精，如果有胡椒粉的话也可以适当稍微倒一点点进去，这样比较香<br><img src="/img/Coke-Chicken-feet/7.chuguo.jpg" alt=""><br></p>
<p>洗锅开吃~~~~哈哈！</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>喜欢啃鸡爪，喜欢各种做法的鸡爪，包括泡椒凤爪，鸡爪煲，红烧鸡爪等。<br>咱这次做了一次可乐鸡爪，哈哈</p>
</blockquote>
<h2 id="食材">食材</h2><ul>
<li>鸡爪：10个</li>
<li>油、料酒、酱油~~~]]>
    </summary>
    
      <category term="Food" scheme="http://yyl8781697.github.io/tags/Food/"/>
    
      <category term="Food" scheme="http://yyl8781697.github.io/categories/Food/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[org.apache.hadoop.fs.LocalFileSystem cannot be cast to org.apache.hadoop.hdfs.DistributedFileSystem]]></title>
    <link href="http://yyl8781697.github.io/2015/04/16/Hadoop/Hadoop-LocalFileSystem-cannot-cast-DistributedFileSystem/"/>
    <id>http://yyl8781697.github.io/2015/04/16/Hadoop/Hadoop-LocalFileSystem-cannot-cast-DistributedFileSystem/</id>
    <published>2015-04-16T13:24:55.000Z</published>
    <updated>2015-04-25T07:18:46.000Z</updated>
    <content type="html"><![CDATA[<p>将自己之前写好的hadoop程序拷贝给师弟时候总是会报下面的错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.ClassCastException: org.apache.hadoop.fs.LocalFileSystem cannot be cast to org.apache.hadoop.hdfs.DistributedFileSystem</span><br><span class="line">	at hadoop.mapreduce.ali.recommend.common.HdfsHelper.&lt;clinit&gt;(HdfsHelper.java:<span class="number">25</span>)</span><br><span class="line">	at hadoop.mapreduce.ali.recommend.LogisticRegression.LRProgram.run(LRProgram.java:<span class="number">53</span>)</span><br><span class="line">	at hadoop.mapreduce.ali.recommend.LogisticRegression.LRProgram.main(LRProgram.java:<span class="number">23</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>字面自已上就是本地文件不能转为分布式文件</strong>，自己在输入文件上加hdfs前缀也是无济于事，搜索关键字了半天也没找到匹配的方案，后来终于在一个博客找到了解决方案：<br><br>将<code>hadoop/conf/</code>下面的<code>core-site.xml</code>和<code>hdfs-site.xml</code>复制到工程文件的<code>/bin/</code>目录下面就可以了（使用的是Eclipse的IDE），坑爹。</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>将自己之前写好的hadoop程序拷贝给师弟时候总是会报下面的错：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><spa]]>
    </summary>
    
      <category term="Hadoop" scheme="http://yyl8781697.github.io/tags/Hadoop/"/>
    
      <category term="Hadoop" scheme="http://yyl8781697.github.io/categories/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.LinkedHashMap]]></title>
    <link href="http://yyl8781697.github.io/2015/04/15/Java%20Source/Java-LinkedHashMap/"/>
    <id>http://yyl8781697.github.io/2015/04/15/Java Source/Java-LinkedHashMap/</id>
    <published>2015-04-15T08:06:15.000Z</published>
    <updated>2015-04-25T07:19:26.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>LinkedHashMap</code>是基于<code>HashMap</code>实现的，但是与之不同的是<code>LinkedHashMap</code>在遍历取值时可以保序，这是通过双向链表来实现的。</p>
</blockquote>
<p>我们知道<code>HashMap</code>在增删改查方面非常高效，但是遗憾的时候在迭代遍历<code>HashMap</code>时是不保序的，常常我们有时候即需要这种高效的操作，同时还希望在遍历数据集时要保序的需求，所以这个时候<code>LinkedHashMap</code>就出来了，接下来文本讲解<code>LinkedHashMap</code>是如何基于<code>HashMap</code>来完成遍历保序的功能。</p>
<h2 id="LinkedHashMap的定义">LinkedHashMap的定义</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从<code>LinkedHashMap</code>的定义中可以很清晰的看到它就是基于<code>HashMap</code>来进行实现的，但是这里不理解的是为何它还要继承<code>Map</code>接口？因为<code>HashMap</code>已经继承了<code>Map</code>接口了，<code>LinkedHashMap</code>这样干是不是没必要，后来我也查了资料，也没有明确得答案，也有人说<code>LinkedHashMap</code>这样继承没有为什么，你懂就好了。-_-</p>
<h2 id="私有变量">私有变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The head of the doubly linked list.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;K,V&gt; header;<span class="comment">//双向链表的头部</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The iteration ordering method for this linked hash map: &lt;tt&gt;true&lt;/tt&gt;</span><br><span class="line"> * for access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order.</span><br><span class="line"> * 定义LinkedHashMap遍历时的顺序,</span><br><span class="line"> *<span class="javadoctag"> @serial</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> accessOrder;</span><br></pre></td></tr></table></figure>
<p>上面源码中是<code>LinkedHashMpa</code>的两个比较重要的私有变量：</p>
<ul>
<li>header：该变量是双向链表的头部，<code>LinkedHashMap</code>是通过维护这个双向链表来实现保序的，该变量是一个<code>Entry</code>类型，在下文是详细讲解。</li>
<li>accessOrder：当accessOrder为true时遍历使用访问顺序（基于此可以实现LRU缓存），当accessOrder为false时使用插入顺序（默认）。</li>
</ul>
<h2 id="构造函数">构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance</span><br><span class="line"> * with the specified initial capacity and load factor.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  initialCapacity the initial capacity</span><br><span class="line"> *<span class="javadoctag"> @param</span>  loadFactor      the load factor</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IllegalArgumentException if the initial capacity is negative</span><br><span class="line"> *         or the load factor is nonpositive</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance</span><br><span class="line"> * with the specified initial capacity and a default load factor (0.75).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  initialCapacity the initial capacity</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IllegalArgumentException if the initial capacity is negative</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity);</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance</span><br><span class="line"> * with the default initial capacity (16) and load factor (0.75).</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an insertion-ordered &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance with</span><br><span class="line"> * the same mappings as the specified map.  The &lt;tt&gt;LinkedHashMap&lt;/tt&gt;</span><br><span class="line"> * instance is created with a default load factor (0.75) and an initial</span><br><span class="line"> * capacity sufficient to hold the mappings in the specified map.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  m the map whose mappings are to be placed in this map</span><br><span class="line"> *<span class="javadoctag"> @throws</span> NullPointerException if the specified map is null</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(m);</span><br><span class="line">    accessOrder = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty &lt;tt&gt;LinkedHashMap&lt;/tt&gt; instance with the</span><br><span class="line"> * specified initial capacity, load factor and ordering mode.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  initialCapacity the initial capacity</span><br><span class="line"> *<span class="javadoctag"> @param</span>  loadFactor      the load factor</span><br><span class="line"> *<span class="javadoctag"> @param</span>  accessOrder     the ordering mode - &lt;tt&gt;true&lt;/tt&gt; for</span><br><span class="line"> *         access-order, &lt;tt&gt;false&lt;/tt&gt; for insertion-order</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IllegalArgumentException if the initial capacity is negative</span><br><span class="line"> *         or the load factor is nonpositive</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span><br><span class="line">                     <span class="keyword">float</span> loadFactor,</span><br><span class="line">                     <span class="keyword">boolean</span> accessOrder)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(initialCapacity, loadFactor);</span><br><span class="line">    <span class="keyword">this</span>.accessOrder = accessOrder;<span class="comment">//只有这里才能显示的将accessOrder置为true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从<code>LinkedHashMap</code>的构造函数中可以了解到：</p>
<ul>
<li>一般都是直接调用了父类<code>HashMap</code>的构造函数</li>
<li>绝大部门构造函数中将accessOrder默认为false，只有在最后一个构造函数中可以显示得将accessOrder置为你所需要的属性。</li>
</ul>
<p>注意，在初始化父类<code>HashMap</code>的构造函数的时会调用一个<code>init()</code>的方法，在<code>LinkedHashMap</code>重写了该方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Called by superclass constructors and pseudoconstructors (clone,</span><br><span class="line"> * readObject) before any entries are inserted into the map.  Initializes</span><br><span class="line"> * the chain.</span><br><span class="line"> */</span></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    header = <span class="keyword">new</span> Entry&lt;&gt;(-<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    header.before = header.after = header;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以发现该方法额外初始化了双向链表的表头：<br><br><img src="/img/Java-LinkedHashMap/init_head.png" alt=""></p>
<h2 id="containsValue">containsValue</h2><p>为什么要讲这个不起眼的方法呢？因为在<code>LinkedHashMap</code>中利用自己双向链表来优化这个是否包含值的方法。<br><br><code>HashMap</code>:<br><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the</span><br><span class="line"> * specified value.</span><br><span class="line"> *</span><br><span class="line"> * @param value value whose presence in this map is to be tested</span><br><span class="line"> * @return &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the</span><br><span class="line"> *         specified value</span><br><span class="line"> */</span><br><span class="line">public boolean containsValue(Object value) &#123;</span><br><span class="line">    if (value == null)</span><br><span class="line">        return containsNullValue();</span><br><span class="line"></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    for (int i = 0; i &lt; tab.length ; i++)</span><br><span class="line">        for (Entry e = tab[i] ; e != null ; e = e.next)</span><br><span class="line">            if (value.equals(e.value))</span><br><span class="line">                return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;code&gt;LinkedHashMap&lt;/code&gt;:&lt;br /&gt;</span><br><span class="line"></span><br><span class="line">	/**</span><br><span class="line"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the</span><br><span class="line"> * specified value.</span><br><span class="line"> *</span><br><span class="line"> * @param value value whose presence in this map is to be tested</span><br><span class="line"> * @return &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the</span><br><span class="line"> *         specified value</span><br><span class="line"> */</span><br><span class="line">public boolean containsValue(Object value) &#123;</span><br><span class="line">    // Overridden to take advantage of faster iterator</span><br><span class="line">	//重写了HashMap中的方法，直接使用遍历双向链表来做</span><br><span class="line">    if (value==null) &#123;</span><br><span class="line">        for (Entry e = header.after; e != header; e = e.after)</span><br><span class="line">            if (e.value==null)</span><br><span class="line">                return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (Entry e = header.after; e != header; e = e.after)</span><br><span class="line">            if (value.equals(e.value))</span><br><span class="line">                return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>从两者的源码中更可以看出，虽然两者最坏都是需要进行<code>table.size</code>次的<code>equals</code>比较，但是在<code>HashMap</code>中会遍历整个<code>table</code>，我们知道有<code>loadFactor</code>的存在，所以<code>table</code>中还是比较稀疏的，那这样的话<code>HashMap</code>会进行很多无谓的遍历，而在<code>LinkedHashMap</code>中里面是都是紧凑的，使用这种方法来遍历要比<code>HashMap</code>的性能提升了不少。</p>
<h2 id="LinkedHashMap-Entry">LinkedHashMap.Entry</h2><p>该<code>Entry</code>从<code>HashMap</code>继承而来，也正是因为有它才可以完整的实现双向链表。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * LinkedHashMap entry.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// These fields comprise the doubly linked list used for iteration.</span></span><br><span class="line">    Entry&lt;K,V&gt; before, after;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="keyword">int</span> hash, K key, V value, HashMap.Entry&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">super</span>(hash, key, value, next);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Removes this entry from the linked list.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;<span class="comment">//it will be invoked while user use the remove(Obj) method</span></span><br><span class="line">        before.after = after;</span><br><span class="line">        after.before = before;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Inserts this entry before the specified existing entry in the list.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addBefore</span><span class="params">(Entry&lt;K,V&gt; existingEntry)</span> </span>&#123;<span class="comment">//if the existngEntry is head</span></span><br><span class="line">        after  = existingEntry;</span><br><span class="line">        before = existingEntry.before;</span><br><span class="line">        before.after = <span class="keyword">this</span>;</span><br><span class="line">        after.before = <span class="keyword">this</span>;<span class="comment">//insert the this node to the first head</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * This method is invoked by the superclass whenever the value</span><br><span class="line">     * of a pre-existing entry is read by Map.get or modified by Map.set.</span><br><span class="line">     * If the enclosing Map is access-ordered, it moves the entry</span><br><span class="line">     * to the end of the list; otherwise, it does nothing.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        LinkedHashMap&lt;K,V&gt; lm = (LinkedHashMap&lt;K,V&gt;)m;</span><br><span class="line">        <span class="keyword">if</span> (lm.accessOrder) &#123;</span><br><span class="line">            lm.modCount++;</span><br><span class="line">            remove();</span><br><span class="line">            addBefore(lm.header);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">        remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li>从<code>Entry</code>中可以看到，它自己定义了两个变量<code>before</code>,<code>after</code>，分别是指向双向链表的两端。<br></li>
<li><code>addBefore</code>是实现链表的核心，它是在<code>createEntry</code>的重写方法中被调用，传的<em>existingEntry</em>参数总是<code>header</code>其实该链表是一个收尾相连的链表，每次添加的新元素都是连接到<code>header</code>的前面：如下图（其中绿色的线表示下一次插入时会修改该指向）<br>  <img src="/img/Java-LinkedHashMap/double_link.png" alt=""></li>
<li><code>recordAccess</code>方法就是实现<code>LinkedHashMap</code>有以访问顺序遍历的功能，每次使用<code>put</code>和<code>get</code>都是调用它，当开启<code>accessOrder</code>时，首先会讲当前元素移除，但是会讲它再次插入到<code>header</code>的后面。</li>
<li>在说一下关于双向链表的删除，我们知道平常都是调用<code>HashMap.remove(obj)</code>来进行键值对的删除的，看过我之前写的<a href="http://kubicode.me/2015/03/27/Java-HashMap/" target="_blank" rel="external">HashMap</a>的小伙伴都知道其实是调用了<code>removeEntryForKey</code>方法才进行真正的查找删除，该删除时又会调用<code>recordRemoval</code>方法，该方法在<code>HashMap.Entry</code>中是一个没有任何实现的方法，在<code>LinkedHashMap.Entry</code>中进行重写，直接调用<code>remove</code>方法进行链表节点的删除。</li>
</ul>
<h2 id="LinkedHashIterator">LinkedHashIterator</h2><p>不用多说，经历了上面层层的重写之后，<code>LinkedHashMap</code>最终是靠这个迭代器来实现保序遍历的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashIterator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; nextEntry    = header.after;</span><br><span class="line">    Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * The modCount value that the iterator believes that the backing</span><br><span class="line">     * List should have.  If this expectation is violated, the iterator</span><br><span class="line">     * has detected concurrent modification.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry != header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line"></span><br><span class="line">        LinkedHashMap.<span class="keyword">this</span>.remove(lastReturned.key);</span><br><span class="line">        lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry&lt;K,V&gt; nextEntry() &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">if</span> (nextEntry == header)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        Entry&lt;K,V&gt; e = lastReturned = nextEntry;</span><br><span class="line">        nextEntry = e.after;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>有了上面维护的双向链表之后，保序的迭代器也变得异常简单了，从上面的源码中可以很清晰的看到该迭代器每次都是使用<code>e.after</code>作为<code>next</code>的值，而这个双向链表是有序的（默认是插入序，也可以设置成访问序），所以在遍历<code>LinkedHashMap</code>时可以保序取值。</p>
<h2 id="实现LRUCache">实现LRUCache</h2><p><a href="http://baike.baidu.com/link?url=tS6nKqjNDes0mdnSwehA1oGo4XcKRcrI3wzunHLRa0VUTf9ByHj4E6AF4hKOtrxnBhm9qaPCvcjX59mSChOxIq" target="_blank" rel="external">LRUCache</a>是一种常用的缓存策略，该策略的原理就是当缓存容量满时删除掉最少使用的缓存，这个算法可以使用<code>LinkedHashMap</code>来很方便的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 实现基于LinkedHashMap的LRUCache</span><br><span class="line"> *<span class="javadoctag"> @author</span> yyl</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> &lt;K&gt;</span><br><span class="line"> *<span class="javadoctag"> @param</span> &lt;V&gt;</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> maxCacheNum=<span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LRUCache</span><span class="params">(<span class="keyword">int</span> length)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(<span class="number">10</span>,<span class="number">0.75f</span>,<span class="keyword">true</span>);<span class="comment">//这里第三个参数一定要为true，这样就表示该LinkedHashMap是使用了访问速度来链表</span></span><br><span class="line">		<span class="keyword">this</span>.maxCacheNum=length;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 重写删除最少用元素的方法</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span> </span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.size()&gt;maxCacheNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里只需要重写<code>removeEldestEntry</code>这个方法即可，该方法在添加元素的时候会被调用，如果当前链表中的元素个数大于设定的最大个数，则删除最少使用的元素。注意 这个缓存在构造<code>LinkedHashMap</code>的时候一定要将<code>accessOrder</code>设置为<code>true</code>，这样<code>LinkedHashMap</code>的双向链表就会维护一个访问顺序的链表。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://tomyz0223.iteye.com/blog/1035686" target="_blank" rel="external">http://tomyz0223.iteye.com/blog/1035686</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>LinkedHashMap</code>是基于<code>HashMap</code>实现的，但是与之不同的是<code>LinkedHashMap</code>在遍历取值时可以保序，这是通过双向链表来实现的。</p>
</blockq]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.HashSet]]></title>
    <link href="http://yyl8781697.github.io/2015/04/14/Java%20Source/Java-HashSet/"/>
    <id>http://yyl8781697.github.io/2015/04/14/Java Source/Java-HashSet/</id>
    <published>2015-04-14T08:06:15.000Z</published>
    <updated>2015-04-25T07:19:16.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>HashSet</code>在针对单个项的增删改几乎具有O(1)的性能，也常常被用于快速查找需要下的集合存储，相信各位这些特性很容易联想到<code>HashMap</code>，那么各位了解这两者的区别和联系不？</p>
</blockquote>
<p>看了源代码估计大家会大吃一惊，这，这<code>HashSet</code>不就是<code>HashMap</code>的简化无<code>value</code>版本嘛？对，<code>HashSet</code>就是基于<code>HashMap</code>实现的(通过组合的方式)，并且几乎所有方法都是调用了<code>HashMap</code>的<code>api</code>，最大的区别是将<code>HashMap</code>的<code>value</code>直接用<code>new Object()</code>对象来替换了。所以你可以这么认为：<br><br><code>HashSet&lt;T&gt; hashSet=new HashMap&lt;T,Object&gt;()</code></p>
<h2 id="构造函数">构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5024744406713321676L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;<span class="comment">//这就是存储HashSet的实体</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span><br><span class="line"> * default initial capacity (16) and load factor (0.75).</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a new set containing the elements in the specified</span><br><span class="line"> * collection.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with default load factor</span><br><span class="line"> * (0.75) and an initial capacity sufficient to contain the elements in</span><br><span class="line"> * the specified collection.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> c the collection whose elements are to be placed into this set</span><br><span class="line"> *<span class="javadoctag"> @throws</span> NullPointerException if the specified collection is null</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/<span class="number">.75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span><br><span class="line"> * the specified initial capacity and the specified load factor.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>      initialCapacity   the initial capacity of the hash map</span><br><span class="line"> *<span class="javadoctag"> @param</span>      loadFactor        the load factor of the hash map</span><br><span class="line"> *<span class="javadoctag"> @throws</span>     IllegalArgumentException if the initial capacity is less</span><br><span class="line"> *             than zero, or if the load factor is nonpositive</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a new, empty set; the backing &lt;tt&gt;HashMap&lt;/tt&gt; instance has</span><br><span class="line"> * the specified initial capacity and default load factor (0.75).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>      initialCapacity   the initial capacity of the hash table</span><br><span class="line"> *<span class="javadoctag"> @throws</span>     IllegalArgumentException if the initial capacity is less</span><br><span class="line"> *             than zero</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从源码中可以发现<code>HashSet</code>是使用<code>HashMap</code>来存储的，并且在各个构造函数中均是直接初始化<code>HashMap</code>。</p>
<h2 id="add,contains方法">add,contains方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element.</span><br><span class="line"> * More formally, returns &lt;tt&gt;true&lt;/tt&gt; if and only if this set</span><br><span class="line"> * contains an element &lt;tt&gt;e&lt;/tt&gt; such that</span><br><span class="line"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;e==null&amp;nbsp;:&amp;nbsp;o.equals(e))&lt;/tt&gt;.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> o element whose presence in this set is to be tested</span><br><span class="line"> *<span class="javadoctag"> @return</span> &lt;tt&gt;true&lt;/tt&gt; if this set contains the specified element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Adds the specified element to this set if it is not already present.</span><br><span class="line"> * More formally, adds the specified element &lt;tt&gt;e&lt;/tt&gt; to this set if</span><br><span class="line"> * this set contains no element &lt;tt&gt;e2&lt;/tt&gt; such that</span><br><span class="line"> * &lt;tt&gt;(e==null&amp;nbsp;?&amp;nbsp;e2==null&amp;nbsp;:&amp;nbsp;e.equals(e2))&lt;/tt&gt;.</span><br><span class="line"> * If this set already contains the element, the call leaves the set</span><br><span class="line"> * unchanged and returns &lt;tt&gt;false&lt;/tt&gt;.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> e element to be added to this set</span><br><span class="line"> *<span class="javadoctag"> @return</span> &lt;tt&gt;true&lt;/tt&gt; if this set did not already contain the specified</span><br><span class="line"> * element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>HashSet</code>两个最常用方法的源码中也可以看到，<code>contains</code>方法其实就是调用了<code>containsKey</code>，复杂度为<code>O(1)</code>，而<code>add</code>方法在插入值的时候是使用了<code>put(e,PRESENT)</code>来操作，这个<code>PRESENT</code>其实是一个<code>Object</code>的常量。<br><br>其余方法也不再多看，基本和上面的一个套路。</p>
<h2 id="总结">总结</h2><p>为什么<code>HashSet</code>在实现上是完全用了<code>HashMap</code>的<code>api</code>的，一个<code>Key-Value</code>型，一个<code>Key</code>型，除了这种转换有没有其他可以更加高效的方法呢？<br>（下面只是LZ想想的，个人想法而已）<br><code>HashMap</code>使用了链表+数组的方式实现了<code>Key-Value</code>的存储，其增删改的性能已经几乎接近了<code>O(1)</code>，而<code>HashSet</code>的出现时为了存储<code>Key</code>型的数据，被<code>Key-Value</code>包含在内，完全可以使用<code>HashMap</code>来实现，至于这里使用常量<code>Object</code>来替换里面的<code>value</code>，我们都知道常量<code>Object</code>都是存储在方法区中，并且这里只有一份副本，<code>HashSet</code>存在多个项并不会增加方法区中的存储，所以关于<code>Object</code>的替换产生的开销很好，并且<code>HashMap</code>在原理已经很好了，没必要再去重复造轮子，所以个人觉得<code>HashSet</code>在实现上用了<code>HashMap</code>的封装还是比较合理的。<br><br>那么既然<code>HashSet</code>是基于<code>HashMap</code>先实现的，那么它也应该有如下几大特征：</p>
<ul>
<li>多线程不安全</li>
<li>项的增删改查的复杂度几乎为<code>O(1)</code>，所以也常被用于集合元素的查找</li>
<li>支持<code>null</code>的值</li>
<li><code>loadFactor</code>越大，<code>hash</code>冲突的概率越大，<code>table</code>的利用率越大，反之都越小</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>HashSet</code>在针对单个项的增删改几乎具有O(1)的性能，也常常被用于快速查找需要下的集合存储，相信各位这些特性很容易联想到<code>HashMap</code>，那么各位了解这两者的区别和联系不？</p>
</bloc]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[（译）OSGi-Services，OSGI-服务]]></title>
    <link href="http://yyl8781697.github.io/2015/04/07/OSGi/OSGi-Services/"/>
    <id>http://yyl8781697.github.io/2015/04/07/OSGi/OSGi-Services/</id>
    <published>2015-04-07T13:20:32.000Z</published>
    <updated>2015-04-26T02:53:14.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>本教程介绍了关于服务声明相关的OSGI服务用法，Eclipse Equinox作为OSGI的服务器使用，本教程使用了Eclipse4.3(Kepler)。</p>
</blockquote>
<h2 id="1-_准备">1. 准备</h2><p>下面的教程假定你已经熟悉OSGI的运行时以及模块层（<a href="http://www.vogella.com/tutorials/OSGiServices/article.html" target="_blank" rel="external">原文</a>,<a href="http://kubicode.me/2015/04/04/OSGi-Modularity/" target="_blank" rel="external">译文</a>）相关的描述。</p>
<h2 id="2-_OSGI服务">2. OSGI服务</h2><h3 id="2-1-_什么是OSGI服务">2.1. 什么是OSGI服务</h3><p>一个OSGI的服务被定义为一个标准的Java类或者接口，通常一个Java接口被作为服务的接口来使用。一个<strong>bundle</strong>可以注册或者使用服务，为了达到此功能，OSGI提供了中心的服务注册表。<br><br>一个服务可以被动态的启动和停止，<strong>bundle</strong>在使用服务时必需有这种操控动态行为的能力，<strong>bundle</strong>服务可以注册一个监听器来监听服务的启动和停止。</p>
<h3 id="2-2-_定义服务的最佳实践">2.2. 定义服务的最佳实践</h3><p>定义一个服务最通常的方法就是通过一个含有接口的<strong>bundle</strong>来定义，其他的<strong>bundle</strong>将会提供这个服务的实现，这就可以允许你通过不同的<strong>bundle</strong>来改变服务的实现。</p>
<h3 id="2-3-_服务的属性">2.3. 服务的属性</h3><p>在<code>BundleContext</code>类里面的<code>registerService()</code>方法你可以通过字典参数来指定任意的属性，你可以通过<code>ServiceReference</code>类中的<code>getProperty()</code>方法去访问一个指定的属性，该类属于<code>org.osgi.framework</code>包。</p>
<h3 id="2-4-_OSGI服务的选择">2.4. OSGI服务的选择</h3><p>如果一些服务都是可用的并且对相同的API都是有效的，那么OSGI运行时将会默认得选择最低的<i>SERVICE_ID</i>作为使用的服务，你也可以通过服务的属性来设置你的<i>SERVICE_RANKING</i>，OSGI默认将会分配一个0的<i>SERVICE_RANKING</i>并且会选择较高<em>RANKING</em>值的服务来运行。（译者：这里我实验了一下，<i>SERVICE_ID</i>不可指定，<i>SERVICE_RANKING</i>可指定，但是默认为<code>null</code>，也就是说你想手动指定运行相同API的服务的话去指定<i>SERVICE_RANKING</i>就好了）<br><br><code>org.osgi.framework</code>包中的<code>Constants</code>类包含了<i>SERVICE_RANKING</i>值的字符串名称常量，这个常量可以用于设置<em>RANKING</em>的值。</p>
<h2 id="3-_OSGI声明式服务">3. OSGI声明式服务</h2><h3 id="3-1-_定义声明式服务">3.1. 定义声明式服务</h3><p>OSGI的声明式服务功能(<em>declarative services</em> 简称：DS)可以让你通过元数据信息(XML)来定义和使用服务。通过DS你可以不使用任何扩展或者实现的类就可以定义服务了，这将允许这些服务在OSGI的运行时被独立的测试。<br><br>OSGI服务组件负责启动服务，通过声明服务或者其他方式来创建服务，这对服务消费者来说是不可见的。（这段不知道咋翻译了-_-，有兴趣去看原文）<br><br>服务组件包含一个XML描述和一个对象实例，服务描述包含服务组件的全部信息，例如组件实例类的名称，服务的接口等。<br><br>服务组件的引用在<em>MANIFEST.MF</em>中通过<em>Service-Component</em>属性来定义，如果OSGI在运行时找到了这样的引用，那么<code>org.eclipse.equinox.ds</code>插件将会创建相应的服务。<br><br>下面样例演示了如何在<em>MANIFEST.MF</em>中定义一个组件的引用：</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">Service</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">com.example.e4.rcp.todo.service</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0.qualifier</span>
<span class="attribute">Bundle-Vendor</span>: <span class="string">EXAMPLE</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.6</span>
<span class="attribute">Bundle-ActivationPolicy</span>: <span class="string">lazy</span>
<span class="attribute">Service-Component</span>: <span class="string">OSGi-INF/service.xml </span>
</code></pre><h3 id="3-2-_必需的bundles">3.2. 必需的bundles</h3><p>为了使用声明服务你需要下面的几个框架<strong>bundles</strong></p>
<ul>
<li>org.eclipse.equinox.util</li>
<li>org.eclipse.equinox.ds</li>
<li>org.eclipse.osgi.services</li>
</ul>
<h3 id="3-3-_一个DS服务的定义">3.3. 一个DS服务的定义</h3><p>通常组件定义通过New → Other… → Plug-in Development → Component Definition在插件项目的<em>OSGI-INF</em>文件中创建，这个定义向导也会将<code>Service-Component</code>属性登记到<em>MANIFEST.MF</em>文件。<br><br>在向导的第一个界面，你可以输入组件定义文件的文件名称，组件名称和实现接口的类。<br><img src="/img/OSGi_Services/xds10.png.pagespeed.ic.1DBbeaalyZ.png" alt=""><br><br>如果你按下完成按钮，服务的编辑界面将会被打开<br><br><img src="/img/OSGi_Services/xds20.png.pagespeed.ic.IJyCLdYfU1.png" alt=""><br><br>在服务的选项卡界面你可以输入服务的提供者或者引用的服务。例如提供一个服务的时候你需要按下<em>Provided Services</em>下面的增加按钮以及选择你希望被实现的接口。<br><img src="/img/OSGi_Services/xds30.png.pagespeed.ic.EEf1RNtmnL.png" alt=""><br><br>最后一步你需要实现提供服务的类（译者：这。。。。-_-，不说了，建议去看原文吧）。<br><br>一个正确的<em>component.xml</em> XML文件将会如下所示：<br><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">scr:component</span> <span class="attribute">xmlns:scr</span>=<span class="value">"http://www.osgi.org/xmlns/scr/v1.1.0"</span> <span class="attribute">name</span>=<span class="value">"ITodoService"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">implementation</span> <span class="attribute">class</span>=<span class="value">"com.example.e4.rcp.todo.service.internal.MyTodoServiceImpl"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">service</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">provide</span> <span class="attribute">interface</span>=<span class="value">"com.example.e4.rcp.todo.model.ITodoService"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">scr:component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>译者：上面的原图应该是有问题的吧？？？？下面贴上我的图：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">scr:component</span> <span class="attribute">xmlns:scr</span>=<span class="value">"http://www.osgi.org/xmlns/scr/v1.1.0"</span> <span class="attribute">name</span>=<span class="value">"de.vogella.osgi.ds.quoteservice"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">implementation</span> <span class="attribute">class</span>=<span class="value">"de.vogella.osgi.ds.quoteservice.QuoteService"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">service</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">provide</span> <span class="attribute">interface</span>=<span class="value">"de.vogella.osgi.quote.IQuoteService"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">scr:component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这意味着有一个名字叫<em>ITodoService</em>的组件，它提供了<code>ITodoService</code>接口对应的服务，这个组件被<code>MyTodoServiceImpl</code>这个类所实现。<br><br>在组件的定义之后你的<em>MANIFEST.MF</em>文件包含一个服务组件的入口</p>
<pre><code>Manifest-<span class="string">Version:</span> <span class="number">1.0</span>
Bundle-<span class="string">ManifestVersion:</span> <span class="number">2</span>
Bundle-<span class="string">Name:</span> Service
Bundle-<span class="string">SymbolicName:</span> com.example.e4.rcp.todo.service
Bundle-<span class="string">Version:</span> <span class="number">1.0</span>.0.qualifier
Bundle-<span class="string">Vendor:</span> EXAMPLE
Bundle-<span class="string">RequiredExecutionEnvironment:</span> JavaSE-<span class="number">1.6</span>
Require-<span class="string">Bundle:</span> com.example.e4.rcp.todo.model;bundle-version=<span class="string">"1.0.0"</span>,
 com.example.e4.rcp.todo.events;bundle-version=<span class="string">"1.0.0"</span>,
 org.eclipse.e4.core.services;bundle-version=<span class="string">"1.0.0"</span>,
 org.eclipse.e4.core.contexts;bundle-version=<span class="string">"1.1.0"</span>,
 javax.inject;bundle-version=<span class="string">"1.0.0"</span>,
 org.eclipse.e4.core.di,
 org.eclipse.e4.ui.model.workbench
Bundle-<span class="string">ActivationPolicy:</span> lazy
Service-<span class="string">Component:</span> OSGI-INF/component.xml 
</code></pre><h3 id="3-4_自动启动的定义">3.4 自动启动的定义</h3><p><code>org.eclipse.core.runtime</code>定义为OSGI的运行时。<br><br><code>org.eclipse.equinox.ds</code>这个<strong>bundle</strong>将会读取组件的元数据，以及基于组件定义文件进行服务的注册。<br><br>因此这两个<strong>bundle</strong>需要在你的服务可用之前进行启动。<br><br>你可以通过在运行配置中设置<em>auto-start</em>为<em>true</em>以及设置他们的启动级别小于<em>default</em>（默认为4）来保证这两个<strong>bundle</strong>先启动。<br><br><img src="/img/OSGi_Services/xosgids_startlevel.png.pagespeed.ic.Pg7-ofsXf2.png" alt=""><br><br>这个需要服务<em>MANIFEST.MF</em>文件中<em>Activate this plug-in when one of its classes is loaded</em>被勾上，通过这个标志可以确保你的服务在<code>org.eclipse.equinox.ds</code>启动之后可用。<br><img src="/img/OSGi_Services/xosgi_dsservices_activateflag10.png.pagespeed.ic.RkeQvfnzJc.png" alt=""><br></p>
<blockquote>
<p>警告：如果你在启动服务时遇到问题，请确保<code>core</code>、<code>ds</code>这两个插件是自动启动的，以及有一个比你服务使用者更低的启动级别，还要确保<em>Activate this plug-in when one of its classes is loaded</em>被勾上。</p>
</blockquote>
<h3 id="3-5-_低等级的OSGI服务API">3.5. 低等级的OSGI服务API</h3><p>OSGI也可以提供一个低等级的API，参见6.1节</p>
<h2 id="4-_教程：定义一个OSGI服务的声明">4. 教程：定义一个OSGI服务的声明</h2><p>下面将会定义一个基于quote样例的DS服务，因此你需要创建一个含有接口定义的的项目“de.vogella.osgi.quote”。<br><br>创建一个插件项目“de.vogella.osgi.quote”，该项目不使用任何模板，并且不创建Activator，在<em>MANIFST.MF</em>文件中导入依赖。<br><br>在你的项目中创建<em>OSGI-INF</em>文件夹，向上文一样创建一个新的组件定义，实现服务接口<code>IQuoteService</code>的类为<code>de.vogella.osgi.ds.quoteservice.QuoteService</code>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.ds.quoteservice;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuoteService</span> <span class="keyword">implements</span> <span class="title">IQuoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getQuote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">// create a number between 0 and 2</span></span><br><span class="line">    <span class="keyword">int</span> nextInt = random.nextInt(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">switch</span> (nextInt) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Ds: Tell them I said something"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Ds: I feel better already"</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Ds: Hubba Bubba, Baby!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>打开<em>component.xml</em>以及选择“Source”的选项卡，最终的显示如下所示：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">scr:component</span> <span class="attribute">xmlns:scr</span>=<span class="value">"http://www.osgi.org/xmlns/scr/v1.1.0"</span> <span class="attribute">name</span>=<span class="value">"ITodoService"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">implementation</span> <span class="attribute">class</span>=<span class="value">"com.example.e4.rcp.todo.service.internal.MyTodoServiceImpl"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">service</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">provide</span> <span class="attribute">interface</span>=<span class="value">"com.example.e4.rcp.todo.model.ITodoService"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">scr:component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>将你的Eclipse/plugin目录下的”org.eclipse.equinox.ds<em>.jar”, “org.eclipse.osgi.services.jar” 和 “org.eclipse.equinox.util</em>.jar” 文件包括到一个文件夹中，如“C:\temp\bundles\plugins”，以及将这些<strong>bundles</strong>通过OSGI运行时进行安装。</p>
<pre><code>install file:c:\temp\bundles\plugins\org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.ds</span><span class="class">.jar</span>
install file:c:\temp\bundles\plugins\org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.util</span><span class="class">.jar</span>
install file:c:\temp\bundles\plugins\org<span class="class">.eclipse</span><span class="class">.osgi</span><span class="class">.services</span><span class="class">.jar</span> 
</code></pre><p>手动的启动这些<strong>bundles</strong>以保证声明引用是可用的。<br><br>导出你自己的<strong>bundle</strong>以及将它安装：</p>
<pre><code>install file:c:\temp\bundles\plugins\de<span class="class">.vogella</span><span class="class">.osgi</span><span class="class">.ds</span><span class="class">.quoteservice</span><span class="class">.jar</span>
</code></pre><p>你可以使用”services”命令来检查你的服务是否已经注册。<br><br><img src="/img/OSGi_Services/xds50.gif.pagespeed.ic.DzxMZ781Q5.png" alt=""><br><br>译者：这里是不是有跳过几步了？那个<code>getQuote()</code>方法还完全还没有调用啊！！！-_-</p>
<h2 id="5-_教程：通过服务声明来使用服务">5. 教程：通过服务声明来使用服务</h2><p>当然你也可以通过DS来定义服务的消费者。<br><br>创建一个名称为“de.vogella.osgi.ds.quoteconsumer”的插件，不使用模板，不要创建Activator，在MANIFEST.MF文件中导入引用包“de.vogella.osgi.quote”。<br><br>创建如下的类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.ds.quoteconsumer;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuoteConsumer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> IQuoteService service;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">quote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(service.getQuote());</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Method will be used by DS to set the quote service</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setQuote</span><span class="params">(IQuoteService service)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Service was set. Thank you DS!"</span>);</span><br><span class="line">    <span class="keyword">this</span>.service = service;</span><br><span class="line">    <span class="comment">// I know I should not use the service here but just for demonstration</span></span><br><span class="line">    System.out.println(service.getQuote());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Method will be used by DS to unset the quote service</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">unsetQuote</span><span class="params">(IQuoteService service)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Service was unset. Why did you do this to me?"</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.service == service) &#123;</span><br><span class="line">      <span class="keyword">this</span>.service = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：这个类不依赖于OSGI</p>
</blockquote>
<p>创建一个<em>OSGI-INF</em>文件夹以及在这个文件夹中创建新的组件定义:<br><img src="/img/OSGi_Services/xdsconsumer10.gif.pagespeed.ic.rF5gKNe9-g.png" alt=""><br><br>这次将会是使用一个服务，操作“Referenced Services”：<br><img src="/img/OSGi_Services/xdsconsumer20.gif.pagespeed.ic.KKzYLYoQkg.png" alt=""><br><br>选择该实体点击编辑按钮可以通过<code>bind()</code>和<code>unbind()</code>方法来修改对应的绑定。<br><br>操作完之后的<em>component.xml</em>看起来应该是这个样纸的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">scr:component</span> <span class="attribute">xmlns:scr</span>=<span class="value">"http://www.osgi.org/xmlns/scr/v1.1.0"</span> <span class="attribute">name</span>=<span class="value">"de.vogella.osgi.ds.quoteconsumer"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">implementation</span> <span class="attribute">class</span>=<span class="value">"de.vogella.osgi.ds.quoteconsumer.QuoteConsumer"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="title">reference</span> <span class="attribute">bind</span>=<span class="value">"setQuote"</span> <span class="attribute">cardinality</span>=<span class="value">"1..1"</span> <span class="attribute">interface</span>=<span class="value">"de.vogella.osgi.quote.IQuoteService"</span> <span class="attribute">name</span>=<span class="value">"IQuoteService"</span> <span class="attribute">policy</span>=<span class="value">"static"</span> <span class="attribute">unbind</span>=<span class="value">"unsetQuote"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">scr:component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>对应的<em>MANIFEST.MF</em>应该是这样的：</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">Quoteconsumer</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">de.vogella.osgi.ds.quoteconsumer</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.4</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.6</span>
<span class="attribute">Import-Package</span>: <span class="string">de.vogella.osgi.quote</span>
<span class="attribute">Service-Component</span>: <span class="string">OSGI-INF/component.xml </span>
</code></pre><p>导出你的插件以及安装它：</p>
<pre><code>install file:c:\temp\bundles\plugins \de<span class="class">.vogella</span><span class="class">.osgi</span><span class="class">.ds</span><span class="class">.quoteconsumer</span><span class="class">.jar</span>
</code></pre><p>如果你使用<code>start id_of_your_bundle</code>马上进行启动你应该会得到服务已经设置的反馈以及一个quote将会返回给你。</p>
<h2 id="6-_OSGI服务低等级的API">6. OSGI服务低等级的API</h2><h3 id="6-1-_使用服务API">6.1. 使用服务API</h3><p>在OSGI的定义和使用上你应该会喜欢像OSGI服务声明一样更高级别的的服务，因为他们可以简化OSGI服务使用的操作。本章节描述如何让OSGI服务直接工作。<br></p>
<h3 id="6-2-_BundleContext">6.2. BundleContext</h3><p>通过<code>BundleContext</code>类可以访问服务的注册中心。<br><br>一个<strong>bundle</strong>可以定义一个<code>Bundle-Activator</code>（Activator）类，这个必须继承<code>Bundle-Activator</code>接口。如果定义了该类，OSGI将会将<code>BundleContext</code>注入到<code>start()</code>和<code>stop()</code>这两个实现接口的方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Starting bundle"</span>);</span><br><span class="line">    <span class="comment">// do something with the context, e.g. </span></span><br><span class="line">    <span class="comment">// register services</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Stopping bundle"</span>);</span><br><span class="line">    serviceTracker.close();</span><br><span class="line">    <span class="comment">// do something with the context, e.g. </span></span><br><span class="line">    <span class="comment">// unregister service</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果你没有一个<code>Activator</code>，你可以使用OSGI框架中的<code>FrameworkUtil</code>类来检索得到<code>BundleContext</code>这个类。</p>
<h3 id="6-3-_注册服务API">6.3. 注册服务API</h3><p>一个<strong>bundle</strong>也可以注册它自己为<code>BundleContext</code>的事件<code>ServiceEvents</code>。例如去触发一个新的<strong>bundle</strong>的安装、卸载或者一个服务的注册。（译者：没看懂这段想干嘛？）<br><br>在一个<strong>bundle</strong>中发布一个服务你可以这么做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    context.</span><br><span class="line">      registerService(IMyService.class.getName(), </span><br><span class="line">         <span class="keyword">new</span> ServiceImpl(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>一旦一个服务不再使用你必须使用OSGI将这个服务注销，OSGI允许你动态替换服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.ungetService(serviceReference);</span><br></pre></td></tr></table></figure></p>
<h3 id="6-4-_访问一个服务">6.4. 访问一个服务</h3><p>一个<strong>bundle</strong>可以通过<code>BundleContext</code>类来获取一个服务，可以用如下来演示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ServiceReference&lt;?&gt; serviceReference = context.</span><br><span class="line">  getServiceReference(IMyService.class.getName());</span><br><span class="line">IMyService service = (IMyService) context.</span><br><span class="line">  getService(serviceReference);</span><br></pre></td></tr></table></figure>
<h3 id="6-5-_低等级的API_vs_OSGI服务的声明">6.5. 低等级的API vs OSGI服务的声明</h3><p>OSGI的服务可以动态的启动和停止。如果你使用OSGI低等级的API就不得不去动态的修改代码，这将会导致你的源代码非常的复杂，如果你不能正确的掌控你的服务消费者对服务保持一个引用，这个服务将不能通过OSGI框架进行移除。<br><br>为了掌控动态的自动化，服务的声明被开发出来了，因为相比较而言服务的声明要比低等级的API更加喜欢。</p>
<h2 id="7-_教程：使用OSGI服务API">7. 教程：使用OSGI服务API</h2><p>在下面我们将定义和消费一个服务，我们的服务将会返回”famous quotes”。<br></p>
<h3 id="7-1_定义服务的接口">7.1 定义服务的接口</h3><p>创建一个插件项目叫做”de.vogella.osgi.quote”，同时创建一个名字叫”de.vogella.osgi.quote”的包，不要使用模板，也不需要创建Activator。之后选择<em>MANIFEST.MF</em>和它的<em>Runtime</em>选项卡，添加”de.vogella.osgi.quote”到导出包。<br><img src="/img/OSGi_Services/xfirstservice10.gif.pagespeed.ic.A7RPff65HQ.png" alt=""><br><br>根据如下的代码创建接口IQuoteService：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.quote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IQuoteService</span> </span>&#123;</span><br><span class="line">  <span class="function">String <span class="title">getQuote</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="7-2-_创建服务">7.2. 创建服务</h3><p>我们将创建一个<s>提供</s>实现的接口的<strong>bundle</strong>（译者：删除线为翻译时添加）。<br><br>创建一个名称叫”de.vogella.osgi.quoteservice”的插件项目，不要使用模板。<br><br>选择<em>MANIFEST.MF</em>文件和它的<em>dependecy</em>选项卡，添加”de.vogella.osgi.quote”到插件引用。<br><br><img src="/img/OSGi_Services/xfirstservice20.gif.pagespeed.ic.974IV6xi0D.png" alt=""><br><br>创建如下的一个”QuoteService”类：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.quoteservice.internal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuoteService</span> <span class="keyword">implements</span> <span class="title">IQuoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getQuote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="comment">// create a number between 0 and 2</span></span><br><span class="line">    <span class="keyword">int</span> nextInt = random.nextInt(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">switch</span> (nextInt) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Tell them I said something"</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"I feel better already"</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Hubba Bubba, Baby!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注册服务到它的<code>Activator</code>类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.quoteservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quoteservice.internal.QuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    IQuoteService service = <span class="keyword">new</span> QuoteService();</span><br><span class="line">    <span class="comment">// Third parameter is a hashmap which allows to configure the service</span></span><br><span class="line">    <span class="comment">// Not required in this example</span></span><br><span class="line">    context.registerService(IQuoteService.class.getName(), service,</span><br><span class="line">        <span class="keyword">null</span>);</span><br><span class="line">    System.out.println(<span class="string">"IQuoteService is registered"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="7-3-_安装服务">7.3. 安装服务</h3><p>导出你的<strong>bundles</strong>，在你的服务器上面安装他们，并且启动的你的<strong>bundle</strong>。<br><br><img src="/img/OSGi_Services/xfirstservice30.gif.pagespeed.ic.kVQ6cg0W8D.png" alt=""><br></p>
<blockquote>
<p>什么都没有发生，因为我们还没有提供的消费者。</p>
</blockquote>
<h3 id="7-4-_使用你的服务">7.4. 使用你的服务</h3><p>创建一个新的插件项目”de.vogella.osgi.quoteconsumer”，同样得将”de.vogella.osgi.quote”添加为依赖。<br><br><img src="/img/OSGi_Services/xfirstservice35.gif.pagespeed.ic.2tGlkBTBRY.png" alt=""><br></p>
<blockquote>
<p>请注意，我们添加的是依赖包而不是依赖插件，这种方式可以让我使用不同的实现来替换服务。</p>
</blockquote>
<p>让我们直接使用这个服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.quoteconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.ServiceReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> BundleContext context;</span><br><span class="line">  <span class="keyword">private</span> IQuoteService service;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="comment">// Register directly with the service</span></span><br><span class="line">    ServiceReference reference = context</span><br><span class="line">        .getServiceReference(IQuoteService.class.getName());</span><br><span class="line">    service = (IQuoteService) context.getService(reference);</span><br><span class="line">    System.out.println(service.getQuote());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(service.getQuote());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>导出这个<strong>bundle</strong>，安装它，然后启动它，最后停止它，一切工作正常。但是如果你停止<strong>bundle</strong>的服务你将会得到一个错误。<br><br><img src="/img/OSGi_Services/xfirstservice40.gif.pagespeed.ic.2UC1QymqyN.png" alt=""><br><br>原因是OSGI是一个非常冬天的环境，服务可能在任何时刻都在注册和注销，下一章节将会使用服务追踪者来提升这个效果。</p>
<h3 id="7-5-_在有服务追踪者时使用服务">7.5. 在有服务追踪者时使用服务</h3><p>在你的<strong>bundle</strong>中添加对”org.osgi.util.tracker”的依赖，使用下面的代码来定义MyQuoteServiceTrackerCustomizer：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.quoteconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.ServiceReference;</span><br><span class="line"><span class="keyword">import</span> org.osgi.util.tracker.ServiceTrackerCustomizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQuoteServiceTrackerCustomizer</span> <span class="keyword">implements</span></span><br><span class="line">    <span class="title">ServiceTrackerCustomizer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> BundleContext context;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyQuoteServiceTrackerCustomizer</span><span class="params">(BundleContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MyThread thread;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">addingService</span><span class="params">(ServiceReference reference)</span> </span>&#123;</span><br><span class="line">    IQuoteService service = (IQuoteService) context.getService(reference);</span><br><span class="line">    thread = <span class="keyword">new</span> MyThread(service);</span><br><span class="line">    thread.start();</span><br><span class="line">    <span class="keyword">return</span> service;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifiedService</span><span class="params">(ServiceReference reference, Object service)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// removedService(reference, service);</span></span><br><span class="line">    <span class="comment">// addingService(reference);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removedService</span><span class="params">(ServiceReference reference, Object service)</span> </span>&#123;</span><br><span class="line">    context.ungetService(reference);</span><br><span class="line">    System.out.println(<span class="string">"How sad. Service for quote is gone"</span>);</span><br><span class="line">    thread.stopThread();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IQuoteService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(IQuoteService service)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (active) &#123;</span><br><span class="line">        System.out.println(service.getQuote());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          System.out.println(<span class="string">"Thread interrupted "</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      active = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>你还需要在你的Activator中注册一个服务:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> de.vogella.osgi.quoteconsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"><span class="keyword">import</span> org.osgi.util.tracker.ServiceTracker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.quote.IQuoteService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ServiceTracker serviceTracker;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Starting quoteconsumer bundles"</span>);</span><br><span class="line">    <span class="comment">// Register directly with the service</span></span><br><span class="line">    MyQuoteServiceTrackerCustomizer customer = <span class="keyword">new</span> MyQuoteServiceTrackerCustomizer(context);</span><br><span class="line">    serviceTracker = <span class="keyword">new</span> ServiceTracker(context, IQuoteService.class</span><br><span class="line">        .getName(), customer);</span><br><span class="line">    serviceTracker.open();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Stopping quoteconsumer bundles"</span>);</span><br><span class="line">    serviceTracker.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>再次导出你的<strong>bundle</strong>，启动OSGI控制台，使用更新命令或者安装命令得到你的新版本并且启动它，一旦你启动你的服务<strong>bundle</strong>，追踪者将会被调用，消费者<strong>bundle</strong>将会启动然后输出消息到控制台，停止服务之后可以验证消费者将不再使用服务。</p>
<h2 id="8_Bndtools">8 Bndtools</h2><p>Eclipse使用PDE工具来管理<strong>bundles</strong>，另外你可以使用托管在<a href="http://bndtools.org/" target="_blank" rel="external">http://bndtools.org/</a>上的Bndtools。</p>
<h2 id="9_原文链接">9 原文链接</h2><p>参考的原文为<a href="http://www.vogella.com/tutorials/OSGiServices/article.html" target="_blank" rel="external">OSGi Services - Tutorial</a></p>
<blockquote>
<p>其实这里在原文中本来是版权协议的，我当然是没必要翻译了-_-!，</p>
</blockquote>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>本教程介绍了关于服务声明相关的OSGI服务用法，Eclipse Equinox作为OSGI的服务器使用，本教程使用了Eclipse4.3(Kepler)。</p>
</blockquote>
<h2 id="1-_准备">1. 准备</h2><p>]]>
    </summary>
    
      <category term="OSGi" scheme="http://yyl8781697.github.io/tags/OSGi/"/>
    
      <category term="OSGi" scheme="http://yyl8781697.github.io/categories/OSGi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[（译）OSGi-Modularity，OSGi-模块化]]></title>
    <link href="http://yyl8781697.github.io/2015/04/04/OSGi/OSGi-Modularity/"/>
    <id>http://yyl8781697.github.io/2015/04/04/OSGi/OSGi-Modularity/</id>
    <published>2015-04-04T14:20:32.000Z</published>
    <updated>2015-04-25T07:19:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="1-OSGI_概述">1.OSGI 概述</h2><h3 id="1-1-_什么是OSGI">1.1. 什么是OSGI</h3><p>OGSI是一种规范，OSGi 规范的核心定义 Java 组件和服务模型，组件和服务可以动态地安装、 激活、 取消激活、 更新以及卸载。软件中的每个组件在OSGI中称为<strong>Bundle</strong>。<br><br>OSGi 的一个非常实用的优点是每一个<strong>Bundle</strong>都必须定义其导出的 Java 包和所需的依赖项。通过这种方式可以有效地控制提供的 API 和插件的依赖项。</p>
<h3 id="1-2-_Bundle与插件">1.2. Bundle与插件</h3><p>插件是Eclipse中的最小模块单元，<strong>Bundle</strong>与插件几乎是可以互换的，一个插件也是一个OSGI <strong>Bundle</strong>，反之亦然。</p>
<h3 id="1-3-_实现">1.3. 实现</h3><p>OSGI已经有很多实现，例如Equinox, Knopflerfish OSGi or Apache Felix.</p>
<h3 id="1-4-_Eclipse的Equinox">1.4. Eclipse的Equinox</h3><p>Eclipse的Equinox是基于OSGI规范的实现，也这是Eclipse程序的运行时环境，Eclipse的扩展点是基于OSGI的<strong>Bundle</strong>和<strong>Service</strong>的概念来进行的。</p>
<h2 id="2-_OSGI_Bundle和依赖管理">2. OSGI Bundle和依赖管理</h2><h3 id="2-1-_OSGI_Bundle">2.1. OSGI Bundle</h3><p>OSGI规范定义了OSGI <strong>Bundle</strong>为模块化的单元。<br>一个<b>Bundle</b>是一个紧密结合的、自包含的单元，它明确定义了对其他模块的依赖关系和服务，同时还定义了对外开放的API。<br><br>从技术上讲<b>Bundle</b>是一个带有额外元数据的.jar文件，这个元数据存储在<em>META-INF/MANIFEST.MF</em>中，<i>META-INF/MANIFEST.MF</i>文件是Java规范的一部分，任何非 OSGi 得运行时将忽略 OSGi 的元数据。因此 OSGi <strong>Bundle</strong>可以不受限制的在非 OSGi Java 环境中使用。<br></p>
<h3 id="2-2-_Bundle-标志名称_和_版本">2.2. Bundle-标志名称 和 版本</h3><p>每个<strong>Bundle</strong>通过<code>Bundle-SymbolicName</code>来定义它的标志名称属性，名称一般以<strong>Bundle</strong>作者的反向域名来定义，如果你有一个名为”example.com”的域名，那么标志名称将一般以”com.example”作为开头。<br><br>每个<strong>Bundle</strong>通过<code>Bundle-Version</code>都有一个版本号。<br><br><code>Bundle-SymbolicName</code>和<code>Bundle-Version</code>可以唯一标识在OSGI中的一个<strong>Bundle</strong>，这两个属性都是在<i>META-INF/MANIFEST.MF</i>中定义的。</p>
<h3 id="2-3-_OSGI版本号的语义">2.3. OSGI版本号的语义</h3><p>OSGI推荐使用<code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code>语法来定义你的版本号。</p>
<ul>
<li>当所有改变都是向后兼容，增加<code>&lt;patch&gt;</code> 。</li>
<li>当公共 API 已经更改，但所有改变都是向后兼容。，增加<code>&lt;minor&gt;</code></li>
<li>当更改不是向后兼容，增加<code>&lt;major&gt;</code> 。</li>
</ul>
<h3 id="2-4-_MANIFEST-MF中的标识符">2.4. <em>MANIFEST.M</em>F中的标识符</h3><p>下面是一个<em>MANIFEST.MF</em>文件的样例：</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">Popup Plug-in</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">com.example.myosgi; singleton:=true</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0</span>
<span class="attribute">Bundle-Activator</span>: <span class="string">com.example.myosgi.Activator</span>
<span class="attribute">Require-Bundle</span>: <span class="string">org.eclipse.ui,org.eclipse.core.runtime</span>
<span class="attribute">Bundle-ActivationPolicy</span>: <span class="string">lazy</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.6 </span>
</code></pre><p>下面的表格是<em>MANIFEST.MF</em>文件中各个标识符的解释：</p>
<div><br><table width="100%"><br>    <tr><br>        <th width="25%">标识符</th><br>        <th>描述</th><br>    </tr><br>    <tr><br>        <td>Bundle-Name</td><br>        <td>Bundle的简短描述</td><br>    </tr><br>    <tr><br>        <td>Bundle-SymbolicName</td><br>        <td>Bundle的唯一标识符，如果这个Bundle使用了Eclipse中的扩展点功能，则必需将其标志为单例，你只需在<code>Bundle-SymbolicName</code>后面添加<code>singleton:=true</code>即可。</td><br>    </tr><br>    <tr><br>        <td>Bundle-Version</td><br>        <td>定义bundle的版本号，如果发布了一个新的版本则这个版本号必须增加。</td><br>    </tr><br>    <tr><br>        <td>Bundle-Activator</td><br>        <td>定义实现BundleActivator接口的一个activator类[可选]。bundle在激活时，将会创建一个activator类的实例，每当启动或者停止bundle时都会调用该实例的<code>start()</code>和<code>stop()</code>方法，一个OSGI的activator是配置bundle启动期间典型的使用（译者：这句不知道怎么翻译了-<em>-，你懂就好了）</em></td><br>    </tr><br>    <tr><br>        <td>Bundle-RequiredExecutionEnvironment (BREE)</td><br>        <td>指定运行包所需的 Java 版本。如果不满足这一要求，OSGi 运行时将不会加载bundle。</td><br>    </tr><br>    <tr><br>        <td>Bundle-ActivationPolicy</td><br>        <td>将它设置为<code>lazy</code>，OSGI运行时将会延迟加载这个bundle，当它只有被用到时才会开始加载(译者：原文描述的不好翻译啊，就按自己的理解来了--)。如果没有设置这个值，OSGI将会使用它的规范使用默认的方式进行加载。在Equinox中如果没有设置则根据<code>config.ini</code>来决定这个bundle是否自动启动。</td><br>    </tr><br>    <tr><br>        <td>Bundle-ClassPath</td><br>        <td>bundle加载的类路径，默认是”.”，从bundle所在的根目录进行加载，你也可以自己添加jar文件，这些jar文件称为嵌入的的jar文件。</td><br>    </tr><br></table><br></div>


<h3 id="2-5-_bundle的依赖关系和公共的API">2.5. bundle的依赖关系和公共的API</h3><p>通过MANIFEST.MF文件包可以定义其他包或包及其依赖项。OSGI在试图访问一个类的时候并没有定义对他的依赖则会抛出一个<code>ClassNotFoundException </code>的异常，它抛出的异常都是标准java虚拟机中定义的包，这些包往往都是可用的，这些可用的类都是可以在Java虚拟机中通过Jre配置文件进行配置，但是这些配置并不在本文档的讲解范围之内。<br><br><strong>bundle</strong>在<em>MANIFEST.MF </em>文件中通过<code>Export-Package</code>来定义它的API，如果包不进行显式导出则对其他<strong>bundle</strong>均为不可见。<br><br>这些所有的限制都是通过OSGI规范中的<code>classloader</code>进行强制执行的，每个<strong>bundle</strong>都有它自己的加载强，访问受限制的类是不允许的。</p>
<blockquote>
<p><strong>警告</strong>：不幸的是 OSGi不能阻止使用 Java 反射来访问这些类。这是因为 OSGi 基于 Java 运行时，尚不支持模块化层。</p>
</blockquote>
<p>一个<strong>bundle</strong>可以定义依赖其他包的具体一个版本或者一个范围的版本，例如，<strong>bundle A</strong>中定义它依赖于<strong>bundle C</strong>的2.0版本，而<strong>bundle B</strong>定义它依赖于<strong>bundle C</strong>的1.0版本</p>
<h3 id="2-6-_临时的API和友好的API">2.6. 临时的API和友好的API</h3><p>Equinox支持通过<code>x-internal</code>标志来导出一个临时性的包，下面的截屏展示了<code>x-internal</code>在<em>MANIFEST.MF</em>编辑器中的设置。<br><img src="/img/OSGi_Modularity/xx-internal10.png.pagespeed.ic.9wMehMIifW.png" alt=""><br><br><em>MANIFEST.MF</em>文件中的结果如下：</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">Provider</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">de.vogella.osgi.xinternal.provider</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0.qualifier</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.6</span>
<span class="attribute">Export-Package</span>: <span class="string">de.vogella.osgi.xinternal.provider;x-internal:=true </span>
</code></pre><p>使用这个API在Eclipse中会显示错误、警告或者忽略将会取决于如下的设置：Window → Preferences → Java → Compiler → Errors/Warnings<br><img src="/img/OSGi_Modularity/xx-internal30.png.pagespeed.ic.7U3IrH5ssb.png" alt=""><br><br>你还可以通过<code>x-friends</code>来导出一个特定<strong>bundle</strong>使用的包，这个标志也可以在<em>MANIFEST.MF</em>编辑器中对Package Visibility添加一个插件来增加。</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">Provider</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">de.vogella.osgi.xinternal.provider</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0.qualifier</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.6</span>
<span class="attribute">Export-Package</span>: <span class="string">de.vogella.osgi.xinternal.provider;x-friends:="another.bundle" </span>
</code></pre><p><code>x-friends</code>是类似于<code>x-internal</code>，但插件定义为<code>x-friends</code>使用 API 时不会得到警告。</p>
<blockquote>
<p><strong>警告</strong>：在可能的情况下尽量不要使用<code>x-friends</code>,因为它被认为是一个不好的实践在你创建你的模块层的特殊情况时。</p>
</blockquote>
<h3 id="2-7-_动态导入包">2.7. 动态导入包</h3><p>由于遗留原因 OSGi 还支持动态导入的软件包。详细信息，请参阅<a href="http://wiki.osgi.org/wiki/DynamicImport-Package" target="_blank" rel="external">动态导入的OSGi</a> 。</p>
<blockquote>
<p><strong>警告</strong>：你不应该使用此功能，它是一个非模块化的设计。</p>
</blockquote>
<h3 id="2-8-_依赖关系管理">2.8. 依赖关系管理</h3><p>OSGI是负责<strong>bundles</strong>之间的依赖管理,OSGI将会在安装期间读取<em>MANIFEST.MF</em>文件，确保在<em>bundle</em>激活之前他所有的依赖<em>bundles</em>都被解析或者激活。<br><br>如果依赖没有得到满足，那么这个<strong>bundle</strong>将不会被激活。</p>
<h3 id="2-9-_bundle的生命周期">2.9. bundle的生命周期</h3><p>在<strong>bundle</strong>的安装时将会将它持续化到一个本地的<strong>bundle</strong>缓存，在OSGI运行时将会尝试解析它所有依赖的<strong>bundle</strong>。<br><br>如果所有的依赖都被解析，那么这个<strong>bundle</strong>将会进入<code>RESOLVED</code>,否则为<code>INSTALLED</code>状态。<br><br>如果存在被依赖的<strong>bundle</strong>同时存在多个<strong>bundles</strong>，则会使用最高的<strong>bundle</strong>版本，如果这几个版本都一样，则会使用最低的<strong>bundle id</strong>（在框架安装过程中<strong>bundle</strong>将会得到一个唯一的标识号，即<strong>bundle id</strong>），如果一个<strong>bundle</strong>被启动了，则他会经历<code>STARTING</code>状态，然而进入<code>ACTIVE</code>状态。<br><br>生命周期的描述如下图：<br><img src="/img/OSGi_Modularity/xosgi_livecycle10.png.pagespeed.ic.-M5HNvcZ1X.png" alt=""><br></p>
<h2 id="3-_确定类的插件查找">3. 确定类的插件查找</h2><p>你可能频繁的去查找一个给定类的插件/<strong>bundle</strong>，Eclipse编辑器对于确定类的插件查找非常简单，在preferences中开启<code>Include all plug-ins from target into Java Search</code>之后（译者：我怎么没找到-_-，但是还是可以用<code>Ctrl+Shift+t</code>），使用<code>Ctrl+Shift+t</code>就可以弹出对话框进行查找查找，显示在对话框中的jar文件就是通过输入jar文件的前缀得到的。<br><br><img src="/img/OSGi_Modularity/findplugin08.png" alt=""><br><br><img src="/img/OSGi_Modularity/findplugin10.png" alt=""><br></p>
<h2 id="4-_OSGI控制台">4. OSGI控制台</h2><h3 id="4-1_OSGI控制台">4.1 OSGI控制台</h3><p>OSGi 控制台就像命令行的 shell。在此控制台，你可以输入命令来执行 OSGi 某些操作。这个功能在你应用程序的OSGI层上进行问题分析会非常有用。<br><br>最有用的命令是<code>ss</code>可以得到所有<strong>bundle</strong>的状态和<strong>bundleId</strong>,下面的表是OSGI中最长用命令的几个参考：</p>
<table width="100%"><br>    <tr><br>        <th width="25%">命令</th><br>        <th>描述</th><br>    </tr><br>    <tr><br>        <td>help</td><br>        <td>列出所有可用的命令</td><br>    </tr><br>    <tr><br>        <td>ss</td><br>        <td>列出所有已安装的<b>bundle</b>和它的状态</td><br>    </tr><br>    <tr><br>        <td>ss <i>vogella</i></td><br>        <td>列出所有已安装的、并且名字中带<i>vogella</i>的<b>bundle</b>和它的状态</td><br>    </tr><br>    <tr><br>        <td>start <i>id</i></td><br>        <td>启动对应<i>id</i>的<b>bundle<b></b></b></td><br>    </tr><br>    <tr><br>        <td>stop <i>id</i></td><br>        <td>停止对应<i>id</i>的<b>bundle</b></td><br>    </tr><br>    <tr><br>        <td>diag &lt;bundle-id&gt;</td><br>        <td>诊断一个<b>bundle</b>，列出它所有缺失的依赖</td><br>    </tr><br>    <tr><br>        <td>install URL</td><br>        <td>从一个URL安装一个<b>bundle</b>。</td><br>    </tr><br>    <tr><br>        <td>uninstall &lt;bundle-id&gt;</td><br>        <td>将指定的&lt;bundle-id&gt;进行卸载</td><br>    </tr><br>    <tr><br>        <td>bundle &lt;bundle-id&gt;</td><br>        <td>显示&lt;bundle-id&gt;的<b>bundle</b>的详细信息，包括他的注册和服务</td><br>    </tr><br>    <tr><br>        <td>bundle &lt;bundle-id&gt;</td><br>        <td>显示&lt;bundle-id&gt;的<b>bundle</b>的<i>MANIFST.MF</i>文件信息</td><br>    </tr><br>    <tr><br>        <td>services <i>filter</i></td><br>        <td>显示所有可用的服务和他们的消费者，过滤器是一个可选的LDAP ，例如：为了查看ManagedService 的实现的服务可以用”services (objectclass=*ManagedService)”明令。</td><br>    </tr><br></table>

<h3 id="4-2_必需的bundle">4.2 必需的bundle</h3><p>你不得不将下面的<strong>bundle</strong>添加到你的运行时配置，以便于使用控制台：</p>
<ul>
<li>org.eclipse.equinox.console</li>
<li>org.apache.felix.gogo.command</li>
<li>org.apache.felix.gogo.runtime</li>
<li>org.apache.felix.gogo.shell</li>
</ul>
<p>Equinox也包含一个简单的内置控制台可，通过-Dosgi.console.enable.builtin=true参数来激活。</p>
<h3 id="4-3-_Telnet">4.3. Telnet</h3><p>如果你在运行的Eclipse环境中指定<code>-console</code>参数，就可以使用交互的OSGI控制台，一般情况下载OSGI运行配置创建时Eclipse IDE会自动添加上这个参数。通过<code>-console 5555</code>你可以打开一个用于Telnet连接的端口，如果你远程连接到OSGI控制台你就可以使用类似Bash Linux中的tab快捷键和历史功能。</p>
<h3 id="4-4-_进入Eclipse_OSGi控制台">4.4. 进入Eclipse OSGi控制台</h3><p>你也可以通过正在运行的Eclipse进入OSGI控制台，进入<code>plug-in Development</code>开发环境，然后通过Window-&gt;show view-&gt;console来打开控制台，在控制台上选择<code>HOST OSGI Console</code>即可打开OSGI控制台。（译者：这段我是按照我自己在Eclipse上的操作来的，应该和原作者的意图是一样的，但是可能表述上不同而已-|-）</p>
<blockquote>
<p>请注意你如果通过OSGI控制台来干扰Eclipse的运行，可能会损坏Eelipse的环境。</p>
</blockquote>
<h2 id="5-下载Eclipse标准版">5.下载Eclipse标准版</h2><p>Eclipse提供了许多不同的版本，你可以安装所需要的工具在任何的版本中，但是在Eclipse的标准中可以更加简单的安装所需要的工具。<br><br>浏览<a href="http://www.eclipse.org/downloads" target="_blank" rel="external">Eclipse download site</a>进行标准版的下载。<br><img src="/img/OSGi_Modularity/findplugin09.png" alt=""><br><br>自己用软件包将他们解压缩</p>
<blockquote>
<p>注意，在Eclipse中的安装路径中避免出现任何的特殊字符和空格。</p>
</blockquote>
<h2 id="6-_数据模型和服务bundle">6. 数据模型和服务bundle</h2><h3 id="6-1-_练习的目标">6.1. 练习的目标</h3><p>在章节的练习中，你将会为你的数据模型创建一个<strong>bundle</strong>（相等于插件），你也可以将这个数据模型开放给其他插件。<br></p>
<h3 id="6-2-_命名约定：简单的插件/bundle">6.2. 命名约定：简单的插件/bundle</h3><p>一个插件/bundle可以在Eclipse中通过<code>new plug-in general</code>向导来进行创建，如果你按如下配置创建插件，本文中将称此为简单的插件或者简单的bundle。</p>
<ul>
<li>没有Activator</li>
<li>没有提供其他用户接口</li>
<li>没有一个3.x版本的富客户端程序</li>
<li>没有使用模板生成</li>
</ul>
<p>在插件创建的向导中如下图（直接按<em>Finish</em>按钮可以避免使用模板）：<br><img src="/img/OSGi_Modularity/xosgi_simpleplugin10.png.pagespeed.ic.4xu_n0pJ1r.png" alt=""><br><br>（现在界面好像稍微有点区别了，不过大致相同）</p>
<h3 id="6-3-_创建插件">6.3. 创建插件</h3><p>创建一个简单的插件项目叫做<em>com.example.e4.rcp.todo.model</em></p>
<h3 id="6-4-_创建基础类">6.4. 创建基础类</h3><p>创建名称为<code>com.example.e4.rcp.todo.model</code>的包，同时添加下面的类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.e4.rcp.todo.model;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String summary = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">private</span> String description = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">private</span> Date dueDate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="6-4-_生成构造函数">6.4. 生成构造函数</h3><p>通过Source → Generate Constructor using Fields来创建带所有字段的构造函数，使用相同的方法创建一个只带<code>id</code>字段的构造函数以及一个不带任何字段你的构造器。</p>
<blockquote>
<p>确保你已经创建了这三个构造函数因为他们在下面的练习中都要用到。</p>
</blockquote>
<h3 id="6-5-_创建_setter和getter方法">6.5. 创建 setter和getter方法</h3><p>使用Source → Generate Getter and Setter来创建所有字段的<code>setter</code>和<code>getter</code>方法，除了<code>id</code>的<code>setter</code>方法，因为这个<code>id</code>字段在被创建之后最好不要再被改变。<br><img src="/img/OSGi_Modularity/xosgi_model_settergetter10.png.pagespeed.ic.vhB9DWwg7z.png" alt=""><br><br>最后的文件代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.e4.rcp.todo.model;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String summary = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">private</span> String description = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> done = <span class="keyword">false</span>;</span><br><span class="line">  <span class="keyword">private</span> Date dueDate;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Todo</span><span class="params">(<span class="keyword">long</span> id, String summary, String description, <span class="keyword">boolean</span> done,</span><br><span class="line">      Date dueDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">    <span class="keyword">this</span>.summary = summary;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">    <span class="keyword">this</span>.done = done;</span><br><span class="line">    <span class="keyword">this</span>.dueDate = dueDate;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getSummary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> summary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSummary</span><span class="params">(String summary)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.summary = summary;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDescription</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDescription</span><span class="params">(String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.description = description;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> done;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDone</span><span class="params">(<span class="keyword">boolean</span> done)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.done = done;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getDueDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dueDate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDueDate</span><span class="params">(Date dueDate)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dueDate = dueDate;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意，因为<code>id</code>字段在之后练习的<code>equals</code>和<code>hashCode</code>方法中使用，因此它应该是不可变的。</p>
</blockquote>
<h3 id="6-7-_验证">6.7. 验证</h3><blockquote>
<p>警告：确保你已经生成了这是三个构造函数，并且没有生成<code>id</code>的<code>setter</code>方法。</p>
</blockquote>
<h3 id="6-8-_生成toString,_hashCode_以及_equals_方法">6.8. 生成toString, hashCode 以及 equals 方法</h3><p>你可以在Eclipse中通过Source → Generate toString()来生成基于<code>id</code>和<code>summary</code>字段的<code>toString</code>方法。<br><br>你还可以通过Source → Generate hashCode() and equals()来生成基于<code>id</code>字段的<code>hashCode</code>和<code>equals</code>方法。</p>
<h3 id="6-9-_编写一个copy方法">6.9. 编写一个copy方法</h3><p>你可以在那个类中添加如下内容的<code>copy()</code>方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.e4.rcp.todo.model;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITodoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Todo <span class="title">getTodo</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">saveTodo</span><span class="params">(Todo todo)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">deleteTodo</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Todo&gt; <span class="title">getTodos</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="6-10-_创建模型的接口">6.10. 创建模型的接口</h3><p>按照下面创建模型的接口<code>ITodoService</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.e4.rcp.todo.model;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITodoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">Todo <span class="title">getTodo</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">saveTodo</span><span class="params">(Todo todo)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">deleteTodo</span><span class="params">(<span class="keyword">long</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">List&lt;Todo&gt; <span class="title">getTodos</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="6-11-_导出模型">6.11. 导出模型</h3><p>导出<code>com.example.e4.rcp.todo.model</code>包。打开<em>MANIFEST.MF</em>文件，选择<em>Runtime</em>选项卡，添加<code>com.example.e4.rcp.todo.model</code>到exported packages。<br><img src="/img/OSGi_Modularity/xosgi_model_exportedapi.png.pagespeed.ic.U-HEUGq_6L.png" alt=""><br></p>
<h3 id="6-12-_创建数据模型提供者插件（服务插件）">6.12. 创建数据模型提供者插件（服务插件）</h3><p>创建一个新的简单的plug-in project项目叫做<em>com.example.e4.rcp.todo.service</em>。这个插件叫做<em>todo service</em>服务插件。</p>
<blockquote>
<p>技巧：Mac OS系统用户应该使用一个不同于<em>.service</em>的名称（<em>.service</em>在Mac OS会被特殊对待）</p>
</blockquote>
<h3 id="6-12-_准备服务插件">6.12. 准备服务插件</h3><p>在你的服务插件中添加对<code>com.example.e4.rcp.todo.model</code>插件的依赖，打开<em>MANIFEST.MF</em>文件，选择<em>Dependencies</em>选项卡，在中<em>Imported Packages</em>添加<code>com.example.e4.rcp.todo.model</code><br></p>
<p>在你的服务插件中新建<code>com.example.e4.rcp.todo.service.internal</code>包以及添加如下内容的类。<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.e4.rcp.todo.service.internal;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.e4.rcp.todo.model.ITodoService;</span><br><span class="line"><span class="keyword">import</span> com.example.e4.rcp.todo.model.Todo;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Example service impl, data is not persisted</span><br><span class="line"> * between application restarts</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTodoServiceImpl</span> <span class="keyword">implements</span> <span class="title">ITodoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> current = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Todo&gt; todos;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MyTodoServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    todos = createInitialModel();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// always return a new copy of the data</span></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Todo&gt; <span class="title">getTodos</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Todo&gt; list = <span class="keyword">new</span> ArrayList&lt;Todo&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Todo todo : todos) &#123;</span><br><span class="line">      list.add(todo.copy());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// create new or update existing Todo object</span></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">saveTodo</span><span class="params">(Todo newTodo)</span> </span>&#123;</span><br><span class="line">    Todo updateTodo = findById(newTodo.getId());</span><br><span class="line">    <span class="keyword">if</span> (updateTodo == <span class="keyword">null</span>) &#123;</span><br><span class="line">      updateTodo= <span class="keyword">new</span> Todo(current++);</span><br><span class="line">      todos.add(updateTodo);</span><br><span class="line">    &#125; </span><br><span class="line">    updateTodo.setSummary(newTodo.getSummary());</span><br><span class="line">    updateTodo.setDescription(newTodo.getDescription());</span><br><span class="line">    updateTodo.setDone(newTodo.isDone());</span><br><span class="line">    updateTodo.setDueDate(newTodo.getDueDate());</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Todo <span class="title">getTodo</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Todo todo = findById(id);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (todo != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> todo.copy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="annotation">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTodo</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    Todo deleteTodo = findById(id);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (deleteTodo != <span class="keyword">null</span>) &#123;</span><br><span class="line">      todos.remove(deleteTodo);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// example data, change if you like</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> List&lt;Todo&gt; <span class="title">createInitialModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;Todo&gt; list = <span class="keyword">new</span> ArrayList&lt;Todo&gt;();</span><br><span class="line">    list.add(createTodo(<span class="string">"Application model"</span>, <span class="string">"Flexible and extensible"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"DI"</span>, <span class="string">"@Inject as programming mode"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"OSGi"</span>, <span class="string">"Services"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"SWT"</span>, <span class="string">"Widgets"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"JFace"</span>, <span class="string">"Especially Viewers!"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"CSS Styling"</span>,<span class="string">"Style your application"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"Eclipse services"</span>,<span class="string">"Selection, model, Part"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"Renderer"</span>,<span class="string">"Different UI toolkit"</span>));</span><br><span class="line">    list.add(createTodo(<span class="string">"Compatibility Layer"</span>, <span class="string">"Run Eclipse 3.x"</span>));</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Todo <span class="title">createTodo</span><span class="params">(String summary, String description)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Todo(current++, summary, description, <span class="keyword">false</span>, <span class="keyword">new</span> Date());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> Todo <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Todo todo : todos) &#123;</span><br><span class="line">      <span class="keyword">if</span> (id == todo.getId()) &#123;</span><br><span class="line">        <span class="keyword">return</span> todo;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：这个接口使用易变的类存储，数据在应用程序启动时并没有进行持久化，如果你想持久化这个类的数据可以将他们放入数据库或者文件系统。因为这些存储并不是专门针对Eclipse富客户端程序的，所以本书也没有覆盖这些内容。</p>
</blockquote>
<h3 id="6-14-1-_创建工厂和导出包">6.14.1. 创建工厂和导出包</h3><p>你现在将会在<code>com.example.e4.rcp.todo.service</code>中创建一个类，针对此你可以参照如下技巧：</p>
<blockquote>
<p>技巧：在Eclipse中如果父级包没有类文件，则这些包将会被隐藏。在你创建这些类的时候就你定义这些包，这些描述可以在下面的图片中展示出来：<br><img src="/img/OSGi_Modularity/xtutorial_servicepackage10.png.pagespeed.ic.JqIPNtDU_Q.png" alt=""></p>
</blockquote>
<p>在<code>com.example.e4.rcp.todo.service</code>包中创建如下类文件：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.e4.rcp.todo.service;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> com.example.e4.rcp.todo.model.ITodoService;</span><br><span class="line"><span class="keyword">import</span> com.example.e4.rcp.todo.service.internal.MyTodoServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Factory provides access to the todo service provider</span><br><span class="line"> * </span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoServiceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> ITodoService todoService = <span class="keyword">new</span> MyTodoServiceImpl();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ITodoService <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> todoService;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个<code>TodoServiceFactory</code>可以产生访问服务的提供者的<code>ITodoService</code>接口，这个类可以被当做<code>ITodoService</code>的一个工厂，一个工厂隐藏创建一个接口的具体实例。<br>导出<code>com.example.e4.rcp.todo.service</code>这个包以开放给其他插件。</p>
<blockquote>
<p>注意：Eclipse工具不支持导出空包，你必须在你导出包之前创建一个类。</p>
</blockquote>
<h2 id="7-_教程：使用Activator以及导出你的bundle">7. 教程：使用Activator以及导出你的bundle</h2><p>本章节的练习是创建另一个<strong>bundle</strong>来使用<code>Activator</code>，在本章节的末尾的代码你可以在Eclipse中运行，你也可以将其导出在单独的OSGI Server中运行。</p>
<h3 id="7-1-_创建一个新的bundle">7.1. 创建一个新的bundle</h3><p>通过 File → New → Other… → Plug-in Development → Plug-in Project来创建一个新的简单的插件<em>com.vogella.osgi.firstbundle.internal</em></p>
<h3 id="7-2-_编写代码">7.2. 编写代码</h3><p>创建如下的线程类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vogella.osgi.firstbundle.internal;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> active = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (active) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Hello OSGi console"</span>);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        System.out.println(<span class="string">"Thread interrupted "</span> + e.getMessage());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    active = <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>按如下的方式修改<code>Activation</code>（译者：这里的Activation应该在创建项目时候就创建该类）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.vogella.osgi.firstbundle;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> de.vogella.osgi.firstbundle.internal.MyThread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> MyThread myThread;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Starting com.vogella.osgi.firstbundle"</span>);</span><br><span class="line">    myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line">    myThread.start();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext context)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Stopping com.vogella.osgi.firstbundle"</span>);</span><br><span class="line">    myThread.stopThread();</span><br><span class="line">    myThread.join();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>译者：上面原文件中的<code>import de.vogella.osgi.firstbundle.internal.MyThread</code>应该更改为<code>import com.vogella.osgi.firstbundle.internal.MyThread</code></p>
<h3 id="7-3-_运行">7.3. 运行</h3><p>选择<em>MANIFEST.MF</em>文件，右击并选择<em>Run As → Run Configuration</em>，创建一个OSGI框架的运行环境，除了你的<code><s>de</s>com.vogella.osgi.firstbundle</code>包其他都取消选择。之后在将<code>org.eclipse.osgi</code>添加到你的运行配置中。<br><br><img src="/img/OSGi_Modularity/xfirstbundle30.gif.pagespeed.ic.payxZ9XMO5.png" alt=""><br><br>译者：现在貌似只有<code>org.eclipse.osgi</code>这个bundle会报缺少依赖的异常，现在贴出我的实验配置图，希望对大家有帮助：<br><img src="/img/OSGi_Modularity/yizhe_osgi_framework.png" alt=""><br><br>运行这个配置，每隔5秒钟就会有消息输出到控制台。<br><br><img src="/img/OSGi_Modularity/9Zyc.png" alt=""><br></p>
<h3 id="7-4-_导出你的bundle">7.4. 导出你的bundle</h3><p>这将允许你将导出的<strong>bundle</strong>在OSGI的运行时进行安装，选中你的<strong>bundle</strong>然后选择<br>File -&gt; Export -&gt; Plug-in Development -&gt; “Deployable plug-ins and fragment”<br><br><img src="/img/OSGi_Modularity/xfirstbundle50.gif.pagespeed.ic.0xZ8Rlc9zq.png" alt=""><br><br><img src="/img/OSGi_Modularity/xfirstbundle60.gif.pagespeed.ic.1VFJwpaRoH.png" alt=""><br><br>取消选项中的export the source标记<br><br><img src="/img/OSGi_Modularity/xfirstbundle65.gif.pagespeed.ic.L5oEBD-2sD.png" alt=""></p>
<h2 id="8-在独立的OSGI_Server中运行">8.在独立的OSGI Server中运行</h2><p>这章节将展示如何将Equinox作为独立的OSGI运行时进行运行。<br><br>在你的Eclipse安装目录中将<code>org.eclipse.osgi<em>.jar</em></code>进行标记，这个jar文件一般你plugin<em>目录中，拷贝这个文件到一个新的位置，例如：</em>c:\temp\osgi-server*，将这个文件重命名为<code>org.eclipse.osgi.jar</code><br><br>通过下面的命令启动的OSGI服务器：</p>
<pre><code>java -jar org<span class="class">.eclipse</span><span class="class">.osgi</span><span class="class">.jar</span> -console 
</code></pre><p>你可以通过”install URL”的方式根据确定的URL进行bundle的安装，例如你在安装”c:\temp\bundles”这个bundle的用法为：</p>
<pre><code>install file:c:\temp\bundles\plugins\de<span class="class">.vogella</span><span class="class">.osgi</span><span class="class">.firstbundle_1</span>.<span class="number">0.0</span><span class="class">.jar</span> 
</code></pre><blockquote>
<p>技巧：你可能需要正确的路径和bundle名称</p>
</blockquote>
<p>你可以使用<code>start &lt;bundle-id&gt;</code>进行启动<br><img src="/img/OSGi_Modularity/xfirstbundle70.png.pagespeed.ic.iABkb7xQN1.png" alt=""><br><br>译者：我按这种方式尝试了好久都没成功，因为启动OSGI需要4.2中的依赖，最后在Eclipse中才能正常运行，各位如果将这种独立的方式运行成功，请在评论中进行指导</p>
<h2 id="9-_原文链接">9. 原文链接</h2><p>参考的原文为<a href="http://www.vogella.com/tutorials/OSGi/article.html" target="_blank" rel="external">OSGi Modularity - Tutorial</a></p>
<blockquote>
<p>其实这里在原文中本来是版权协议的，我当然是没必要翻译了-<em>-!，<br>关于本文表格，原本是在markdownpad上排版好了，哪知在hexo渲染之后会多加好多换行符，各位就忍着点看吧，下次有空把表格改好-</em>-!，</p>
</blockquote>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="1-OSGI_概述">1.OSGI 概述</h2><h3 id="1-1-_什么是OSGI">1.1. 什么是OSGI</h3><p>OGSI是一种规范，OSGi 规范的核心定义 Java 组件和服务模型，组件和服务可以动态地安装、 激活、 取消激活、 更新以及卸]]>
    </summary>
    
      <category term="OSGi" scheme="http://yyl8781697.github.io/tags/OSGi/"/>
    
      <category term="OSGi" scheme="http://yyl8781697.github.io/categories/OSGi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用OSGi进行动态加载更新模块-实现Hello world]]></title>
    <link href="http://yyl8781697.github.io/2015/04/02/OSGi/OSGi-HelloWorld/"/>
    <id>http://yyl8781697.github.io/2015/04/02/OSGi/OSGi-HelloWorld/</id>
    <published>2015-04-02T13:20:32.000Z</published>
    <updated>2015-04-25T07:19:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="OSGI">OSGI</h2><blockquote>
<p>OSGi是<strong>Open Services Gateway initiative</strong>的缩写，叫做开放服务网关协议。OSGI是用于定义Java动态化组件系统的标准，这些标准通过为大型分布式系统以及嵌入式系统提供一种模块化架构减少了软件的复杂度，基于OSGI比较成功的项目有<a href="http://download.eclipse.org/equinox/" target="_blank" rel="external">Equinox</a>,<a href="http://felix.apache.org/" target="_blank" rel="external">felix</a>,<a href="http://www.knopflerfish.org/" target="_blank" rel="external">Knopflerfish</a>，关于OSGI的详情参考<a href="http://osgi.com.cn/article/7289226" target="_blank" rel="external">http://osgi.com.cn/article/7289226</a>，接下来使用OSGI来演示我们最熟悉的Hello world</p>
</blockquote>
<h2 id="开发环境">开发环境</h2><blockquote>
<p>Eclipse4.2.2 (他是基于Equinox实现的，已经自带osgi framework)，jre1.7</p>
</blockquote>
<h2 id="OSGI服务的创建">OSGI服务的创建</h2><p>首先新建名称为osgiDemoService的一个OSGI项目：File-&gt;New-&gt;Project-&gt;Plug-in Project<br><img src="/img/osgo-helloworld/osgiDemoService.png" alt=""><br><br>该项目为服务层，不需要生成Actviator<br><img src="/img/osgo-helloworld/osgiDemoServiceContent.png" alt=""><br>在该项目中新建一个接口osgi.demo.impl.Hello</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> osgi.demo.service;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function">String <span class="title">sayHello</span><span class="params">(String str)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后的MANIFEST.MF文件为</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">OsgiDemoService</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">osgiDemoService</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0.qualifier</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.7</span>
<span class="attribute">Export-Package</span>: <span class="string">osgi.demo.service;version="1.0.0"</span>
</code></pre><h2 id="OSGI服务的实现">OSGI服务的实现</h2><p>新建名称为osgiDemoImpl的一个OSGI项目，此时需要勾选生成<strong>Actviator</strong><br><br>在该项目中添加一个实现类：osgi.demo.impl.HelloImpl，该类需要继承osgi.demo.service.Hello接口，但是默认是没有osgi.demo.servi包的，所以需要添加osgiDemoService的Bundlle的依赖，以及导入Package：osgi.demo.service，这个可以通过MANIFEST.MF文件的Dependencies界面来完成，也可以直接改它的XML源文件。<br><br>实现接口的代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> osgi.demo.impl;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> osgi.demo.service.Hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String str)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"hello"</span>+str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在Actviator中进行服务的注册</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> osgidemoimpl;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"><span class="keyword">import</span> osgi.demo.impl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> osgi.demo.service.Hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BundleContext context;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> BundleContext <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * (non-Javadoc)</span><br><span class="line">	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext bundleContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"implement hello interface"</span>);</span><br><span class="line">		bundleContext.registerService(Hello.class, <span class="keyword">new</span> HelloImpl(), <span class="keyword">null</span>);</span><br><span class="line">		Activator.context = bundleContext;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * (non-Javadoc)</span><br><span class="line">	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext bundleContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		bundleContext.ungetService(bundleContext.getServiceReference(Hello.class));</span><br><span class="line">		Activator.context = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该项目最终的MANIFEST.MF文件为：</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">OsgiDemoImpl</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">osgiDemoImpl</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0.qualifier</span>
<span class="attribute">Bundle-Activator</span>: <span class="string">osgidemoimpl.Activator</span>
<span class="attribute">Import-Package</span>: <span class="string">org.osgi.framework;version="1.3.0";osgi.demo.service</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.7</span>
<span class="attribute">Require-Bundle</span>: <span class="string">osgiDemoService;bundle-version="1.0.0"</span>
</code></pre><h2 id="OSGI服务的使用">OSGI服务的使用</h2><p>新建名称为osgiDemoClient的一个OSGI项目，此时需要勾选生成<strong>Actviator</strong><br><br>在使用的项目中需要添加Service的Bundle的依赖，同时导入osgi.demo.service包<br><br>在Activator中调用服务的代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> osgidemoclient;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleActivator;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.BundleContext;</span><br><span class="line"><span class="keyword">import</span> org.osgi.framework.ServiceReference;</span><br><span class="line"><span class="keyword">import</span> osgi.demo.service.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activator</span> <span class="keyword">implements</span> <span class="title">BundleActivator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BundleContext context;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> BundleContext <span class="title">getContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> context;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * (non-Javadoc)</span><br><span class="line">	 * @see org.osgi.framework.BundleActivator#start(org.osgi.framework.BundleContext)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(BundleContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		ServiceReference ref = ctx.getServiceReference(Hello.class.getName());</span><br><span class="line">	    <span class="keyword">if</span> (ref != <span class="keyword">null</span>) &#123;</span><br><span class="line">	        Hello hello = <span class="keyword">null</span>;</span><br><span class="line">	        <span class="keyword">try</span> &#123;</span><br><span class="line">	            hello = (Hello) ctx.getService(ref);</span><br><span class="line">	            <span class="keyword">if</span> (hello != <span class="keyword">null</span>)</span><br><span class="line">	                System.out.println(hello.sayHello(<span class="string">"world"</span>));</span><br><span class="line">	            <span class="keyword">else</span></span><br><span class="line">	                System.out.println(<span class="string">"Service:Hello---object null"</span>);</span><br><span class="line">	        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">	            e.printStackTrace();</span><br><span class="line">	        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">	            ctx.ungetService(ref);</span><br><span class="line">	            hello = <span class="keyword">null</span>;</span><br><span class="line">	        &#125;</span><br><span class="line">	    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	        System.out.println(<span class="string">"Service:Hello---not exists"</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">		System.out.println(<span class="string">"clinet"</span>);</span><br><span class="line">		Activator.context = ctx;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/*</span><br><span class="line">	 * (non-Javadoc)</span><br><span class="line">	 * @see org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">(BundleContext bundleContext)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">		Activator.context = <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>该项目最终的MANIFEST.MF文件为：</p>
<pre><code><span class="attribute">Manifest-Version</span>: <span class="string">1.0</span>
<span class="attribute">Bundle-ManifestVersion</span>: <span class="string">2</span>
<span class="attribute">Bundle-Name</span>: <span class="string">OsgiDemoClient</span>
<span class="attribute">Bundle-SymbolicName</span>: <span class="string">osgiDemoClient</span>
<span class="attribute">Bundle-Version</span>: <span class="string">1.0.0.qualifier</span>
<span class="attribute">Bundle-Activator</span>: <span class="string">osgidemoclient.Activator</span>
<span class="attribute">Import-Package</span>: <span class="string">org.osgi.framework;version="1.3.0";osgi.demo.service</span>
<span class="attribute">Bundle-RequiredExecutionEnvironment</span>: <span class="string">JavaSE-1.7</span>
<span class="attribute">Require-Bundle</span>: <span class="string">osgiDemoService;bundle-version="1.0.0"</span>
</code></pre><h2 id="在Eclipse中运行">在Eclipse中运行</h2><p>点击:run -&gt; run Configurations-&gt;OSGI Framework-&gt;new 新建一个<br><img src="/img/osgo-helloworld/runConfigurations.png" alt=""><br>点击该界面的run就开始跑起来的</p>
<pre><code>implement hello <span class="class"><span class="keyword">interface</span></span>
hello world
clinet
osgi&gt; 
</code></pre><p>输入ss命令查看状态</p>
<pre><code>osgi&gt; ss
<span class="string">"Framework is launched."</span>

id    State       Bundle
<span class="number">0</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.osgi_3</span>.<span class="number">8.2</span><span class="class">.v20130124-134944</span>
<span class="number">1</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.console_1</span>.<span class="number">0.0</span><span class="class">.v20120522-1841</span>
<span class="number">3</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.command_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">4</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.runtime_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">6</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.shell_0</span>.<span class="number">8.0</span><span class="class">.v201110170705</span>
<span class="number">9</span>    ACTIVE      osgiDemoClient_1.<span class="number">0.0</span><span class="class">.qualifier</span>
<span class="number">10</span>    ACTIVE      osgiDemoService_1.<span class="number">0.0</span><span class="class">.qualifier</span>
<span class="number">11</span>    ACTIVE      osgiDemoImpl_1.<span class="number">0.0</span><span class="class">.qualifier</span>
<span class="number">12</span>    ACTIVE      javax<span class="class">.servlet</span><span class="class">.jsp_2</span>.<span class="number">2.0</span><span class="class">.v201112011158</span>
<span class="number">13</span>    ACTIVE      javax<span class="class">.servlet_3</span>.<span class="number">0.0</span><span class="class">.v201112011016</span>
<span class="number">14</span>    ACTIVE      javax<span class="class">.el_2</span>.<span class="number">2.0</span><span class="class">.v201108011116</span>
osgi&gt; 
</code></pre><p>这几个服务都已经ACTIVE状态了</p>
<blockquote>
<p>小心,felix和console这几个bundle一定要勾选上，还有demo种几个bundle的运行顺序service-&gt;impl-&gt;client，不然很可能跑不起来</p>
</blockquote>
<h2 id="动态加载">动态加载</h2><p>将刚刚新建的三个项目导出到本地：Export-&gt;Plug-in Development-&gt;Deployable pulg-ins and fragments<br><img src="/img/osgo-helloworld/export.png" alt=""></p>
<p>然后在run Configurations-&gt;OSGI Framework-&gt;new 新建一个只带osgi.framework的configuration<br><img src="/img/osgo-helloworld/osgi_framework.png" alt=""><br>将他run起来，执行ss之后可以发现只有他自带的几个bundle</p>
<pre><code>osgi&gt; ss
<span class="string">"Framework is launched."</span>


id    State       Bundle
<span class="number">0</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.osgi_3</span>.<span class="number">8.2</span><span class="class">.v20130124-134944</span>
<span class="number">1</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.console_1</span>.<span class="number">0.0</span><span class="class">.v20120522-1841</span>
<span class="number">2</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.command_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">3</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.runtime_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">4</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.shell_0</span>.<span class="number">8.0</span><span class="class">.v201110170705</span>
osgi&gt; 
</code></pre><p>现在动态安装刚刚导出的bundle</p>
<pre><code>osgi&gt; install <span class="symbol">file:</span>/<span class="regexp">//</span><span class="constant">C</span><span class="symbol">:/Users/</span>你的用户名/<span class="constant">Desktop</span>/plugins/osgiDemoService_1.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>.jar
<span class="constant">Bundle</span> id is <span class="number">10</span>
<span class="constant">ClassLoader</span>          null
<span class="constant">RegisteredServices</span>   null
<span class="constant">ServicesInUse</span>        null
<span class="constant">Fragments</span>            null
<span class="constant">LoaderProxy</span>          osgiDemoService; bundle-version=<span class="string">"1.0.0.201504021042"</span>
<span class="constant">Key</span>                  <span class="number">10</span>
<span class="constant">ProtectionDomain</span>     null
<span class="constant">Location</span>             <span class="symbol">file:</span>/<span class="regexp">//</span><span class="constant">C</span><span class="symbol">:/Users/IBM_ADMIN/Desktop/plugins/osgiDemoService_1</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>.jar
<span class="constant">State</span>                <span class="number">2</span>
<span class="constant">Bundle</span>                  <span class="number">10</span>|<span class="constant">Installed</span>  |    <span class="number">1</span>|osgiDemoService (<span class="number">1.0</span>.<span class="number">0</span>.<span class="number">201504021042</span>)
<span class="constant">Version</span>              <span class="number">1.0</span>.<span class="number">0</span>.<span class="number">201504021042</span>
<span class="constant">BundleData</span>           osgiDemoService_1.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>
<span class="constant">LastModified</span>         <span class="number">1427942820117</span>
<span class="constant">Headers</span>               <span class="constant">Bundle</span>-<span class="constant">ManifestVersion</span> = <span class="number">2</span>
 <span class="constant">Bundle</span>-<span class="constant">Name</span> = <span class="constant">OsgiDemoService</span>
 <span class="constant">Bundle</span>-<span class="constant">RequiredExecutionEnvironment</span> = <span class="constant">JavaSE</span>-<span class="number">1.7</span>
 <span class="constant">Bundle</span>-<span class="constant">SymbolicName</span> = osgiDemoService
 <span class="constant">Bundle</span>-<span class="constant">Version</span> = <span class="number">1.0</span>.<span class="number">0</span>.<span class="number">201504021042</span>
 <span class="constant">Export</span>-<span class="constant">Package</span> = osgi.demo.service;version=<span class="string">"1.0.0"</span>
 <span class="constant">Manifest</span>-<span class="constant">Version</span> = <span class="number">1.0</span>


<span class="constant">StartLevel</span>           <span class="number">1</span>
<span class="constant">BundleId</span>             <span class="number">10</span>
<span class="constant">BundleContext</span>        null
<span class="constant">SymbolicName</span>         osgiDemoService
<span class="constant">KeyHashCode</span>          <span class="number">10</span>
<span class="constant">Framework</span>            org.eclipse.osgi.framework.internal.core.<span class="constant">Framework</span><span class="variable">@2b6cc7c7</span>
<span class="constant">Revisions</span>            [osgiDemoService_1.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>]
<span class="constant">StateChanging</span>        null
<span class="constant">BundleDescription</span>    osgiDemoService_1.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>
<span class="constant">ResolutionFailureException</span> org.osgi.framework.<span class="constant">BundleException</span><span class="symbol">:</span> <span class="constant">The</span> bundle <span class="string">"osgiDemoService_1.0.0.201504021042 [10]"</span> could <span class="keyword">not</span> be resolved
</code></pre><p>将起来两个也安装起来</p>
<pre><code>install <span class="symbol">file:</span>/<span class="regexp">//</span><span class="constant">C</span><span class="symbol">:/Users/</span>你的用户名/<span class="constant">Desktop</span>/plugins/osgiDemoImpl_1.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>.jar
install <span class="symbol">file:</span>/<span class="regexp">//</span><span class="constant">C</span><span class="symbol">:/Users/</span>你的用户名/<span class="constant">Desktop</span>/plugins/osgiDemoClient_1.<span class="number">0</span>.<span class="number">0</span>.<span class="number">201504021042</span>.jar
</code></pre><blockquote>
<p>注意 安装的时候路径前面要加file:///</p>
</blockquote>
<p>然后执行ss查看状态</p>
<pre><code>osgi&gt; ss
<span class="string">"Framework is launched."</span>


id    State       Bundle
<span class="number">0</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.osgi_3</span>.<span class="number">8.2</span><span class="class">.v20130124-134944</span>
<span class="number">1</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.console_1</span>.<span class="number">0.0</span><span class="class">.v20120522-1841</span>
<span class="number">2</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.command_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">3</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.runtime_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">4</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.shell_0</span>.<span class="number">8.0</span><span class="class">.v201110170705</span>
<span class="number">10</span>    INSTALLED   osgiDemoService_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">11</span>    INSTALLED   osgiDemoImpl_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">12</span>    INSTALLED   osgiDemoClient_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
osgi&gt; 
</code></pre><p>可以发现自己新建的3个bundle已经成功安装，但是尚未解析，所以再执行以下resolve命令，在ss：</p>
<pre><code>osgi&gt; resolve
osgi&gt; ss
<span class="string">"Framework is launched."</span>


id    State       Bundle
<span class="number">0</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.osgi_3</span>.<span class="number">8.2</span><span class="class">.v20130124-134944</span>
<span class="number">1</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.console_1</span>.<span class="number">0.0</span><span class="class">.v20120522-1841</span>
<span class="number">2</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.command_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">3</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.runtime_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">4</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.shell_0</span>.<span class="number">8.0</span><span class="class">.v201110170705</span>
<span class="number">10</span>    RESOLVED    osgiDemoService_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">11</span>    RESOLVED    osgiDemoImpl_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">12</span>    RESOLVED    osgiDemoClient_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
osgi&gt; 
</code></pre><p>可以看到他们已经解析（因为在安装的时候是逐个安装的，某些bundle的依赖并没有满足，所以不能解析）<br>已RESOLVED状态了之后就可以跑起来了</p>
<pre><code>id    State       Bundle
<span class="number">0</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.osgi_3</span>.<span class="number">8.2</span><span class="class">.v20130124-134944</span>
<span class="number">1</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.console_1</span>.<span class="number">0.0</span><span class="class">.v20120522-1841</span>
<span class="number">2</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.command_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">3</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.runtime_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">4</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.shell_0</span>.<span class="number">8.0</span><span class="class">.v201110170705</span>
<span class="number">10</span>    RESOLVED    osgiDemoService_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">11</span>    RESOLVED    osgiDemoImpl_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">12</span>    RESOLVED    osgiDemoClient_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
osgi&gt; start <span class="number">9</span>
gogo: IllegalArgumentException: Cannot coerce <span class="function"><span class="title">start</span><span class="params">(String)</span></span> to any of [(Bundle[])]
osgi&gt; start <span class="number">12</span>
Service:Hello---not exists
clinet
osgi&gt; 
</code></pre><p>发现没有找到服务，再看一下状态</p>
<pre><code>osgi&gt; ss
<span class="string">"Framework is launched."</span>


id    State       Bundle
<span class="number">0</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.osgi_3</span>.<span class="number">8.2</span><span class="class">.v20130124-134944</span>
<span class="number">1</span>    ACTIVE      org<span class="class">.eclipse</span><span class="class">.equinox</span><span class="class">.console_1</span>.<span class="number">0.0</span><span class="class">.v20120522-1841</span>
<span class="number">2</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.command_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">3</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.runtime_0</span>.<span class="number">8.0</span><span class="class">.v201108120515</span>
<span class="number">4</span>    ACTIVE      org<span class="class">.apache</span><span class="class">.felix</span><span class="class">.gogo</span><span class="class">.shell_0</span>.<span class="number">8.0</span><span class="class">.v201110170705</span>
<span class="number">10</span>    RESOLVED    osgiDemoService_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">11</span>    RESOLVED    osgiDemoImpl_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
<span class="number">12</span>    ACTIVE      osgiDemoClient_1.<span class="number">0.0</span>.<span class="number">201504021042</span>
osgi&gt; 
</code></pre><p>服务和实现的bundle还没有开起来，所以将这两个逐个启动之后：</p>
<pre><code>osgi&gt; <span class="literal">start</span> <span class="number">10</span>
osgi&gt; <span class="literal">start</span> <span class="number">11</span>
implement hello <span class="keyword">interface</span>
osgi&gt; <span class="literal">refresh</span> <span class="number">12</span>
osgi&gt; hello world
clinet
</code></pre><p>最后运行的结果就是我们所需要的</p>
<h2 id="动态更新">动态更新</h2><blockquote>
<p>OSGI除了可以动态加载服务以外还可以动态进行更新</p>
</blockquote>
<p>现将osgi.demo.impl.HelloImpl进行相应的修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> osgi.demo.impl;</span><br><span class="line">	</span><br><span class="line"><span class="keyword">import</span> osgi.demo.service.Hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloImpl</span> <span class="keyword">implements</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String str)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">"updated:hello "</span>+str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>将该bundle进行导出，然后将osgiDemoImpl的bundle进行update，再刷新osgiDemoClient即可看到：</p>
<pre><code>osgi&gt; update <span class="number">11</span>
implement hello <span class="class"><span class="keyword">interface</span></span>
osgi&gt; refresh <span class="number">12</span>
osgi&gt; updated:hello world
clinet
</code></pre><p>发现输出的已经是刷新后的效果了</p>
<blockquote>
<p>小提醒：在导出之后会发现jar后面会跟上导出的时候，所以在更新时需要将原来的jar包删除，将新导出的jar包重命名为原来的jar的文件名</p>
</blockquote>
<h2 id="参考">参考</h2><ul>
<li><a href="http://osgi.com.cn/article/7289228" target="_blank" rel="external">http://osgi.com.cn/article/7289228</a></li>
<li><a href="http://blog.csdn.net/vwpolo/article/details/2088759" target="_blank" rel="external">http://blog.csdn.net/vwpolo/article/details/2088759</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="OSGI">OSGI</h2><blockquote>
<p>OSGi是<strong>Open Services Gateway initiative</strong>的缩写，叫做开放服务网关协议。OSGI是用于定义Java动态化组件系统的标准，这些标准通过为大]]>
    </summary>
    
      <category term="OSGi" scheme="http://yyl8781697.github.io/tags/OSGi/"/>
    
      <category term="OSGi" scheme="http://yyl8781697.github.io/categories/OSGi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一个字符数组，里面的字符可能是a-z、A-Z、0-9.现在要求对数组进行排序]]></title>
    <link href="http://yyl8781697.github.io/2015/03/31/Algorithm/abcSort/"/>
    <id>http://yyl8781697.github.io/2015/03/31/Algorithm/abcSort/</id>
    <published>2015-03-31T13:32:48.000Z</published>
    <updated>2015-04-25T07:17:46.000Z</updated>
    <content type="html"><![CDATA[<p>创新工场面试题目</p>
<pre><code>一个字符数组，里面的字符可能是<span class="literal">a</span>-z、<span class="literal">A</span>-Z、<span class="number">0</span>-<span class="number">9</span>.现在要求对数组进行排序，要求所有小写字符放在最前面，所有大写字符放在中间，所有数字放在最后，而且各部分内部分别有序。
</code></pre><p>此题网上看到别人的做法都说的比较迷糊，好多也都是用快排之类来做的，现在来说一下我的思路：可以将这些字符转为<code>ascii</code>码，小写在前，大小在中间，数字在最后，正好是按<code>ascii</code>倒着排过来，现在已经确认待排序的内容都是在<code>ascii</code>的范围内，所以可以借鉴位排序的方法，申请一个128位的int数组，将每个字符映射到这个数组里面，多个出现在字符累加起来，如果没有出现则置0，最后按顺序输出即可，不需要任何比较。最终整个算法的复杂度为O(N)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] cs=&#123;<span class="string">'a'</span>,<span class="string">'Q'</span>,<span class="string">'7'</span>,<span class="string">'b'</span>,<span class="string">'9'</span>,<span class="string">'P'</span>,<span class="string">'a'</span>,<span class="string">'c'</span>,<span class="string">'8'</span>,<span class="string">'O'</span>,<span class="string">'Q'</span>,<span class="string">'d'</span>,<span class="string">'N'</span>,<span class="string">'2'</span>,<span class="string">'e'</span>,<span class="string">'M'</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] ascii=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cs.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">	ascii[cs[i]]+=<span class="number">1</span>;<span class="comment">//逐个对应的放入桶中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">97</span>;i&lt;=<span class="number">122</span>;i++)<span class="comment">//输出小写字母到cs原数组中</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ascii[i];j++)</span><br><span class="line">	&#123;</span><br><span class="line">		cs[t++]=(<span class="keyword">char</span>)i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">65</span>;i&lt;=<span class="number">90</span>;i++)<span class="comment">//输出大小字母</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ascii[i];j++)</span><br><span class="line">	&#123;</span><br><span class="line">		cs[t++]=(<span class="keyword">char</span>)i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">48</span>;i&lt;=<span class="number">57</span>;i++)<span class="comment">//输出数字</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;ascii[i];j++)</span><br><span class="line">	&#123;</span><br><span class="line">		cs[t++]=(<span class="keyword">char</span>)i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cs.length;i++)</span><br><span class="line">&#123;</span><br><span class="line">	System.out.print(cs[i]);<span class="comment">//最后正真输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>创新工场面试题目</p>
<pre><code>一个字符数组，里面的字符可能是<span class="literal">a</span>-z、<span class="literal">A</span>-Z、<span class="number">0</span>-<s]]>
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.Hashtable]]></title>
    <link href="http://yyl8781697.github.io/2015/03/30/Java%20Source/Java-HashTable/"/>
    <id>http://yyl8781697.github.io/2015/03/30/Java Source/Java-HashTable/</id>
    <published>2015-03-30T08:06:15.000Z</published>
    <updated>2015-04-25T07:19:20.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>Hashtable</code>是<code>Java</code>编程中较为常用的容器类之一，在面试时常常被与<code>HashMap</code>作比较！</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;为什么要常与<code>HashMap</code>作比较呢?因为他们的源码是极其相似啊，网上也常常有人说<code>HashMap</code>是基于<code>Hashtable</code>实现的吧，因为<code>Hashtable</code>在<code>Java1.0</code>中就有了，但是<code>HashMap</code>在<code>Java1.2</code>才出现。<br>&#160; &#160; &#160; &#160;本文讲解<code>Hashtable</code>时不再累赘，实现的原理大致都和<a href="http://kubicode.me/2015/03/27/Java-HashMap/" target="_blank" rel="external">HashMap</a>一样，这里主要讲<code>Hashtable</code>与<code>HashMap</code>几个不同点。</p>
<h2 id="不支持null">不支持null</h2><p>&#160; &#160; &#160; &#160;我们知道<code>HashMap</code>是支持<code>null</code>的键和值的，每次遇到<code>null</code>时直接用0来作桶号，来看下<code>Hashtable</code>对<code>null</code>的处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Maps the specified &lt;code&gt;key&lt;/code&gt; to the specified</span><br><span class="line"> * &lt;code&gt;value&lt;/code&gt; in this Hashtable. Neither the key nor the</span><br><span class="line"> * value can be &lt;code&gt;null&lt;/code&gt;. &lt;p&gt;</span><br><span class="line"> *</span><br><span class="line"> * The value can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method</span><br><span class="line"> * with a key that is equal to the original key.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>      key     the Hashtable key</span><br><span class="line"> *<span class="javadoctag"> @param</span>      value   the value</span><br><span class="line"> *<span class="javadoctag"> @return</span>     the previous value of the specified key in this Hashtable,</span><br><span class="line"> *             or &lt;code&gt;null&lt;/code&gt; if it did not have one</span><br><span class="line"> *<span class="javadoctag"> @exception</span>  NullPointerException  if the key or value is//当键和值为null时会抛NPE</span><br><span class="line"> *               &lt;code&gt;null&lt;/code&gt;</span><br><span class="line"> *<span class="javadoctag"> @see</span>     Object#equals(Object)</span><br><span class="line"> *<span class="javadoctag"> @see</span>     #get(Object)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Make sure the value is not null</span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//to do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;可以很显眼的看到当<code>value == null</code>会抛NPE异常，那<code>key == null</code>源码中可没写上，其实该判断时在<code>key.hashCode()</code>，而<code>Object.hashCode</code>是不支持<code>null</code>的，也就自然而来得<code>Hashtable</code>不支持<code>null</code>的键和值了</p>
<h2 id="线程安全">线程安全</h2><p>&#160; &#160; &#160; &#160;在<code>Hashtable</code>中的绝大部分方法都是使用<code>synchronized</code>进行修饰的，这一点和<code>HashMap</code>有较大的不同，虽然说<code>Hashtable</code>的方法在多线程是安全的，但是和<a href="http://kubicode.me/2015/03/25/Java-Vector/#线程安全" target="_blank" rel="external">Vector</a>一样，在多线程下使用时也要再看是否还额外需要<code>synchronized</code>再修饰。</p>
<h2 id="求余取桶号">求余取桶号</h2><p>&#160; &#160; &#160; &#160;在<code>HashMap</code>中是根据<code>key</code>的<code>hash</code>值和<code>table.length</code>进行与操作来求桶号的，并且要求table.length必须是2的幂次方，但是在<code>HashMap</code>中的实现是使用<code>hash</code>和<code>table.length</code>求余来实现，在对<code>table.length</code>的值并无其他要求，这种方法实现简单，但是效率没有<code>HashMap</code>的高，毕竟求余除法操作要比与操作慢。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br></pre></td></tr></table></figure></p>
<h2 id="总结">总结</h2><p>&#160; &#160; &#160; &#160;其实要总结的都在上面说了,<code>Hashtable</code>与<code>HashMap</code>主要的几个不同就是：</p>
<ul>
<li><code>Hashtable</code>不支持<code>null</code>的键和值</li>
<li><code>Hashtable</code>是线程安全的</li>
<li><code>Hashtable</code>是用过求余来取桶号的</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>Hashtable</code>是<code>Java</code>编程中较为常用的容器类之一，在面试时常常被与<code>HashMap</code>作比较！</p>
</blockquote>
<p>&#160; &#160; &#]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014阿里巴巴实习生笔试题-插入排序基于链表的实现]]></title>
    <link href="http://yyl8781697.github.io/2015/03/29/Algorithm/InsertionSort/"/>
    <id>http://yyl8781697.github.io/2015/03/29/Algorithm/InsertionSort/</id>
    <published>2015-03-29T12:07:26.000Z</published>
    <updated>2015-04-25T07:17:54.000Z</updated>
    <content type="html"><![CDATA[<pre><code><span class="number">13</span>、将一个从大到小的数组，用以下排序方法排序成从小到大的，______最快。
A.插入排序
B.冒泡排序
<span class="keyword">C</span>.快速排序
<span class="keyword">D</span>.堆排序
</code></pre><p>&#160; &#160; &#160; &#160;该题假如是单问算法复杂度，无疑是C和D，都是O(n*logn)，但是在初始化时降序的情况下，就得另外考虑了，其实可以发现这个降序的数组对C，和D并无价值，并且还增加了排序时的比较次数，现在来看插入排序：</p>
<pre><code>有一个已经有序的数据序列，要求在这个已经排好的数据序列中插入一个数，但要求插入后此数据序列仍然有序，这个时候就要用到一种新的排序方法<span class="comment">--插入排序</span>
</code></pre><p>&#160; &#160; &#160; &#160;根据待排序数组是降序的情况下很容易想到插排在每次插入是只需要比较第一个元素即可，因为前面的元素都比他大，一般插入排序是基于数组实现的，每次在插入一个元素时需要将插入后的元素都向后移动一位，如果这样其复杂度也不会减少，这种可以下可以将插排基于链表来实现，这样就不需要移动数组了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 插入排序，基于链表的实现</span><br><span class="line"> *<span class="javadoctag"> @author</span> Administrator</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertionSort</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] nums=&#123;<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">1</span>&#125;;<span class="comment">//无序</span></span><br><span class="line">		System.out.println(<span class="keyword">new</span> InsertionSort().sort(nums));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(nums[i]);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println();</span><br><span class="line">		<span class="keyword">int</span>[] nums2=&#123;<span class="number">9</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;<span class="comment">//降序</span></span><br><span class="line">		System.out.println(<span class="keyword">new</span> InsertionSort().sort(nums2));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(nums2[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 进行数组排序  返回循环次数</span><br><span class="line">	 *<span class="javadoctag"> @param</span> nums</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Node linkedList=createLinkedList(nums);</span><br><span class="line">		Node cur=linkedList,head=linkedList,prev;</span><br><span class="line">		<span class="keyword">int</span> loopCount=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		do&#123;</span><br><span class="line">			prev=cur;</span><br><span class="line">			cur=cur.next;</span><br><span class="line">		&#125;<span class="keyword">while</span>(cur!=<span class="keyword">null</span> &amp;&amp; prev.val&lt;cur.val);</span><br><span class="line">	</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(cur!=<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">			Node p=<span class="keyword">null</span>;</span><br><span class="line">			Node q=head;</span><br><span class="line">			<span class="keyword">int</span> tempLoop=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">while</span>(q!=<span class="keyword">null</span> &amp;&amp; cur.val&gt;q.val &amp;&amp; cur!=q)</span><br><span class="line">			&#123;</span><br><span class="line">				tempLoop++;</span><br><span class="line">				p=q;</span><br><span class="line">				q=q.next;</span><br><span class="line">			&#125;</span><br><span class="line">			loopCount+=tempLoop==<span class="number">0</span>?<span class="number">1</span>:tempLoop;</span><br><span class="line">			<span class="keyword">if</span>(cur!=q)</span><br><span class="line">			&#123;</span><br><span class="line">				prev.next=cur.next;<span class="comment">//删除cur</span></span><br><span class="line">				<span class="keyword">if</span>(p==<span class="keyword">null</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					</span><br><span class="line">					cur.next=q;<span class="comment">//插入到头部</span></span><br><span class="line">					head=cur;</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					p.next=cur;</span><br><span class="line">					cur.next=q;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				cur=prev.next;</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				prev=cur;</span><br><span class="line">				cur=cur.next;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			nums[i]=head.val;</span><br><span class="line">			head=head.next;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> loopCount;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 创建链表 返回链表的头部</span><br><span class="line">	 *<span class="javadoctag"> @param</span> nums</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> Node <span class="title">createLinkedList</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Node head=<span class="keyword">null</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=nums.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			Node node=<span class="keyword">new</span> Node(nums[i],head);</span><br><span class="line">			head=node;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">		<span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">		<span class="keyword">public</span> Node next;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> val,Node next)</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.val=val;</span><br><span class="line">			<span class="keyword">this</span>.next=next;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">this</span>.next!=<span class="keyword">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实验结果：</p>
<pre><code>10
1234569
6
1234569
</code></pre><hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code><span class="number">13</span>、将一个从大到小的数组，用以下排序方法排序成从小到大的，______最快。
A.插入排序
B.冒泡排序
<span class="keyword">C</span>.快速排序
<span class]]>
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.HashMap]]></title>
    <link href="http://yyl8781697.github.io/2015/03/27/Java%20Source/Java-HashMap/"/>
    <id>http://yyl8781697.github.io/2015/03/27/Java Source/Java-HashMap/</id>
    <published>2015-03-27T06:06:00.000Z</published>
    <updated>2015-04-25T07:19:10.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>HashMap</code>是<code>Java</code>编程中最常用的容器类之一，它是通过<strong>数组+链表</strong>实现的，在面试时常常被问实现原理以及与<code>HashTable</code>作比较！</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;<code>HashMap</code>是可以存储键值<code>key-value</code>对的容器，他是基于<strong>数组+链表</strong>的方式实现的，在遇到数组容量不够时也会执行扩容操作，<code>HashMap</code>具有插入、删除操作几乎为O(1)的效率，但是在迭代器中遍历取值时无法保序，接下来文本将从<code>HashMap</code>的构造、put、remove、iterator等方向进行源码的学习。</p>
<h2 id="私有变量解析">私有变量解析</h2><p>&#160; &#160; &#160; &#160;在<code>HashMap</code>的源码中定义的私有变量比<code>ArrayList</code>多很多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The default initial capacity - MUST be a power of two.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The maximum capacity, used if a higher value is implicitly specified</span><br><span class="line"> * by either of the constructors with arguments.</span><br><span class="line"> * MUST be a power of two &lt;= 1&lt;&lt;30.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The load factor used when none specified in constructor.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * An empty table instance to share when the table is not inflated.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The table, resized as necessary. Length MUST Always be a power of two.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;<span class="comment">//HashMap的实际存储容器,table的容量一定要是2的幂次方</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The number of key-value mappings contained in this map.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;<span class="comment">//当前的实际存储大小</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The next size value at which to resize (capacity * load factor).</span><br><span class="line"> *<span class="javadoctag"> @serial</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="comment">// If table == EMPTY_TABLE then this is the initial capacity at which the</span></span><br><span class="line"><span class="comment">// table will be created when inflated.</span></span><br><span class="line"><span class="keyword">int</span> threshold;<span class="comment">//当前存储阈值</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The load factor for the hash table.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @serial</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;<span class="comment">//负载因子</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The number of times this HashMap has been structurally modified</span><br><span class="line"> * Structural modifications are those that change the number of mappings in</span><br><span class="line"> * the HashMap or otherwise modify its internal structure (e.g.,</span><br><span class="line"> * rehash).  This field is used to make iterators on Collection-views of</span><br><span class="line"> * the HashMap fail-fast.  (See ConcurrentModificationException).</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> modCount;<span class="comment">//修改次数</span></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The default threshold of map capacity above which alternative hashing is</span><br><span class="line"> * used for String keys. Alternative hashing reduces the incidence of</span><br><span class="line"> * collisions due to weak hash code calculation for String keys.</span><br><span class="line"> * &lt;p/&gt;</span><br><span class="line"> * This value may be overridden by defining the system property</span><br><span class="line"> * &#123;@code jdk.map.althashing.threshold&#125;. A property value of &#123;@code 1&#125;</span><br><span class="line"> * forces alternative hashing to be used at all times whereas</span><br><span class="line"> * &#123;@code -1&#125; value ensures that alternative hashing is never used.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * A randomizing value associated with this instance that is applied to</span><br><span class="line"> * hash code of keys to make hash collisions harder to find. If 0 then</span><br><span class="line"> * alternative hashing is disabled.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> hashSeed = <span class="number">0</span>;<span class="comment">//Hash种子，当为0时替代的hash方案将会被禁用</span></span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;咱们现在来讲解几个重要的变量：</p>
<ul>
<li><code>DEFAULT_INITIAL_CAPACITY </code>:<code>HashMap</code>的初始化容量默认为16</li>
<li><code>table</code>:<code>HashMap</code>的实际存储容器，可以看出来他是存储在一个键值对的数组中</li>
<li><code>size </code>:<code>HashMap</code>中存储的实际容量</li>
<li><code>threshold</code>：<code>HashMap</code>中当前存储的容量阈值，可在构造函数中初始化，后期在扩容时：<code>threshold=(int) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + 1)</code></li>
<li><code>loadFactor</code>：负载因子，当<code>loadFactor</code>取的比较小时，可以降低<code>Hash</code>冲突，当时会浪费<code>table</code>的存储空间，但是<code>loadFactor</code>比较大时，会增加<code>Hash</code>冲突概率，导致降低<code>put</code>,<code>remove</code>,<code>get</code>的效率</li>
</ul>
<p>&#160; &#160; &#160; &#160;再来看源码中非常重要的一个类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;<span class="comment">//键值不可变</span></span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;<span class="comment">//实现指针</span></span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * Creates new entry.</span><br><span class="line">     */</span></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        V oldValue = value;</span><br><span class="line">        value = newValue;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Map.Entry e = (Map.Entry)o;</span><br><span class="line">        Object k1 = getKey();</span><br><span class="line">        Object k2 = e.getKey();</span><br><span class="line">        <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;</span><br><span class="line">            Object v1 = getValue();</span><br><span class="line">            Object v2 = e.getValue();</span><br><span class="line">            <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hashCode(getKey()) ^ Objects.hashCode(getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * This method is invoked whenever the value in an entry is</span><br><span class="line">     * overwritten by an invocation of put(k,v) for a key k that's already</span><br><span class="line">     * in the HashMap.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="javadoc">/**</span><br><span class="line">     * This method is invoked whenever the entry is</span><br><span class="line">     * removed from the table.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;<code>HashMap.Entry</code>是<code>HashMap</code>存储中的核心类，也是存储数组的类型，它从<code>Map.Entry</code>继承而来,<code>HashMap.Entry</code>实际上是一个<code>Key-Value</code>格式存储的实体，也正是因此<code>HashMap</code>支持<code>Key-Value</code>格式的存储，细心的小伙伴可以发现：</p>
<ul>
<li><code>final K key</code>：他的键值使用<code>final</code>来修饰，也就是说<code>HashMap</code>存储中的键值是不可变的</li>
<li><code>Entry<k,v> next</k,v></code>:他有一个<code>next</code>指针，用于实现<code>HashMap.Entry</code>的列表，<code>HashMap</code>当遇到<code>Hash</code>值冲突时使用建立链表来存储数据</li>
</ul>
<p>&#160; &#160; &#160; &#160;根据上述我们可以知道<code>HashMap</code>的存储结构图如下：<br><img src="/img/Java-HashMap/hashMap_struct.png" alt=""></p>
<ul>
<li><code>HashMap</code>使用<code>Entry</code>类型的数组进行存储</li>
<li>当<code>Entry</code>的<code>Hash</code>值冲突时，将已存在的相应桶号（hash值）上的<code>Entry</code>后添加链表的方式进行存储</li>
</ul>
<h2 id="构造函数">构造函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span><br><span class="line"> * capacity and load factor.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  initialCapacity the initial capacity</span><br><span class="line"> *<span class="javadoctag"> @param</span>  loadFactor      the load factor</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IllegalArgumentException if the initial capacity is negative</span><br><span class="line"> *         or the load factor is nonpositive</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;<span class="comment">//指定容量和负载因子</span></span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the specified initial</span><br><span class="line"> * capacity and the default load factor (0.75).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  initialCapacity the initial capacity.</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IllegalArgumentException if the initial capacity is negative.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;<span class="comment">//指定容量</span></span><br><span class="line">    <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity</span><br><span class="line"> * (16) and the default load factor (0.75).</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(DEFAULT_INITIAL_CAPACITY, DEFAULT_LOAD_FACTOR);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a new &lt;tt&gt;HashMap&lt;/tt&gt; with the same mappings as the</span><br><span class="line"> * specified &lt;tt&gt;Map&lt;/tt&gt;.  The &lt;tt&gt;HashMap&lt;/tt&gt; is created with</span><br><span class="line"> * default load factor (0.75) and an initial capacity sufficient to</span><br><span class="line"> * hold the mappings in the specified &lt;tt&gt;Map&lt;/tt&gt;.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>   m the map whose mappings are to be placed in this map</span><br><span class="line"> *<span class="javadoctag"> @throws</span>  NullPointerException if the specified map is null</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;<span class="comment">//直接支持map容器实体的构造</span></span><br><span class="line">    <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,</span><br><span class="line">                  DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);</span><br><span class="line">    inflateTable(threshold);</span><br><span class="line"></span><br><span class="line">    putAllForCreate(m);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<hashmap>中除了无参的构造函数之外，还支持：</hashmap></p>
<ul>
<li>指定初始容量和负载因子</li>
<li>制定初始容量</li>
<li>直接使用map容器实体来构造</li>
</ul>
<p>这三种构造函数，其中的指定初始容量和负载因子均不能小于等于0，并且负载因子必须是<code>float</code>类型的</p>
<h2 id="hash散列">hash散列</h2><blockquote>
<p><code>HashMap</code>通过自定义的<code>hash</code>函数希望将各个<code>key</code>均匀得分散到各个桶中</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Retrieve object hash code and applies a supplemental hash function to the</span><br><span class="line"> * result hash, which defends against poor quality hash functions.  This is</span><br><span class="line"> * critical because HashMap uses power-of-two length hash tables, that</span><br><span class="line"> * otherwise encounter collisions for hashCodes that do not differ</span><br><span class="line"> * in lower bits. Note: Null keys always map to hash 0, thus index 0.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;<span class="comment">//将key值进行hash</span></span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">    <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">    <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns index for hash code h.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;<span class="comment">//查找桶号</span></span><br><span class="line">    <span class="comment">// assert Integer.bitCount(length) == 1 : "length must be a non-zero power of 2";</span></span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);<span class="comment">//获取桶号  Bucket</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;上面hash的源码中我们可以了解到：</p>
<ul>
<li>当<code>hashSeed!=0</code>和<code>key</code>为<code>String</code>类型时，将使用sun.misc.Hashing.stringHash32((String) k)进行hash，否则主要使用无符号位移位和异或操作得到<code>hash</code>值</li>
<li>当<code>key=null</code>的时候得到的<code>hash</code>值为0</li>
<li><code>HashMap</code>的<code>table</code>的<code>length</code><strong>必须为2的幂次方</strong>，在<code>indexFor</code>方法中通过<code>hash</code>值和<code>length-1</code>的与操作来得到桶号，保证获取的桶号小于尺寸阈值，这个桶号的是否均匀很重要，假如t为奇数，则<code>length-1</code>为偶数，二进制的最低位肯定为0,在与<code>hash</code>值进行与操作之后得到的最低位肯定也为0，则最终得到到桶号一定是偶数，这样的话<code>indexFor</code>方法将一定返回偶数，也就是说<code>HashMap</code>存储数组中的奇数索引位置都不会存储值，这会大大浪费存储空间，同时会增加<code>hash</code>冲突的概率，然而当<code>length</code>为偶数时，<code>length-1</code>的最低位为1，与<code>hash</code>值进行与操作时候得到的奇偶数概率各一半，这样就可以均匀的散列到各个桶中了</li>
</ul>
<h2 id="put方法">put方法</h2><blockquote>
<p><code>put</code>方法是<code>HashMap</code>最常用的一个方法，它传递一组<code>key-value</code>数据往<code>HashMap</code>中添加，如果<code>key</code>存在，则更新该<code>key</code>的<code>value</code>，但是你知道<code>put</code>方法整个实现的流程吗？特别是在<code>hash</code>冲突时！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Associates the specified value with the specified key in this map.</span><br><span class="line"> * If the map previously contained a mapping for the key, the old</span><br><span class="line"> * value is replaced.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> key key with which the specified value is to be associated</span><br><span class="line"> *<span class="javadoctag"> @param</span> value value to be associated with the specified key</span><br><span class="line"> *<span class="javadoctag"> @return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span><br><span class="line"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span><br><span class="line"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span><br><span class="line"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;<span class="comment">//已存在key 更新值</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;<span class="comment">//返回被覆盖的那个值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Inflates the table.//初始化新的table</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Find a power of 2 &gt;= toSize</span></span><br><span class="line">    <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</span><br><span class="line"></span><br><span class="line">    threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">    initHashSeedAsNeeded(capacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Offloaded version of put for null keys</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;<span class="comment">//已存在key 更新值</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Adds a new entry with the specified key, value and hash code to</span><br><span class="line"> * the specified bucket.  It is the responsibility of this</span><br><span class="line"> * method to resize the table if appropriate.</span><br><span class="line"> *</span><br><span class="line"> * Subclass overrides this to alter the behavior of put method.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;<span class="comment">//当size&gt;threshold时 将会进行扩容和rehash</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);<span class="comment">//2倍扩容</span></span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Like addEntry except that this version is used when creating entries</span><br><span class="line"> * as part of Map construction or "pseudo-construction" (cloning,</span><br><span class="line"> * deserialization).  This version needn't worry about resizing the table.</span><br><span class="line"> *</span><br><span class="line"> * Subclass overrides this to alter the behavior of HashMap(Map),</span><br><span class="line"> * clone, and readObject.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Rehashes the contents of this map into a new array with a</span><br><span class="line"> * larger capacity.  This method is called automatically when the</span><br><span class="line"> * number of keys in this map reaches its threshold.</span><br><span class="line"> *</span><br><span class="line"> * If current capacity is MAXIMUM_CAPACITY, this method does not</span><br><span class="line"> * resize the map, but sets threshold to Integer.MAX_VALUE.</span><br><span class="line"> * This has the effect of preventing future calls.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> newCapacity the new capacity, MUST be a power of two;</span><br><span class="line"> *        must be greater than current capacity unless current</span><br><span class="line"> *        capacity is MAXIMUM_CAPACITY (in which case value</span><br><span class="line"> *        is irrelevant).</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    table = newTable;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rehash</span></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Transfers all entries from current table to newTable.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;</span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;上面<code>put</code>过程中涉及到几个重要方法的说明：</p>
<ul>
<li><code>put</code>:<code>HashMap</code>对外开放的接口方法,如果已存在<code>key</code>的键，进行更新操作，返回<code>oldValue</code>,否则调用<code>addEntry</code>进行插入，返回<code>null</code></li>
<li><code>inflateTable</code>:初始化的空的<code>table</code></li>
<li><code>putForNullKey</code>:插入或者更新键为<code>null</code>的值，如果已存在<code>null</code>的键，进行更新操作，返回<code>oldValue</code>,否则调用<code>addEntry</code>进行插入，返回<code>null</code></li>
<li><code>addEntry</code>:添加Entry实体，会进行<code>size &gt;= threshold</code>判断，如果成立，触发<code>resize</code>进行扩容，最终会调用<code>createEntry</code>插入<code>key-value</code></li>
<li><code>createEntry</code>：将<code>key-value</code>插入<code>table[buctetIndex]</code>的表头（这样做在插入的时候就不需要判断原来的链表上是否有值了，bingo）</li>
<li><code>resize</code>:进行扩容操作，扩容完成之后容量为原来的2倍，同时会调用<code>transfer</code>进行<code>rehash</code></li>
<li><code>transfer</code>:根据原来的<code>key</code>和新的<code>length</code>进行<code>rehash</code>，得到新的<code>table</code></li>
</ul>
<p>&#160; &#160; &#160; &#160;将上述执行流程使用图来表示之后：<br><img src="/img/Java-HashMap/put.png" alt=""></p>
<h2 id="remove方法">remove方法</h2><blockquote>
<p><code>remove</code>是<code>HashMap</code>中最长用的方法之一，他是通过链表进行删除的</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes the mapping for the specified key from this map if present.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  key key whose mapping is to be removed from the map</span><br><span class="line"> *<span class="javadoctag"> @return</span> the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or</span><br><span class="line"> *         &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;.</span><br><span class="line"> *         (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map</span><br><span class="line"> *         previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(key);</span><br><span class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes and returns the entry associated with the specified key</span><br><span class="line"> * in the HashMap.  Returns null if the HashMap contains no mapping</span><br><span class="line"> * for this key.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; removeEntryForKey(Object key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);<span class="comment">//桶号</span></span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">    Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;<span class="comment">//通过equals方法进行key的查找</span></span><br><span class="line">            modCount++;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">if</span> (prev == e)</span><br><span class="line">                table[i] = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev.next = next;</span><br><span class="line">            e.recordRemoval(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = e;</span><br><span class="line">        e = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;<code>remove</code>方法比较简单，首先是得到删除<code>key</code>的<code>hash</code>值和其对应的桶号<code>i</code>（<code>key=null</code>时其桶号为0），根据其<code>i</code>即可取得所在的单链表，然后循环单链表，通过<code>equals</code>来查找是否存在对应的<code>key</code>，如存在，则在单链表上删除<code>key</code>所对应的<code>Entry</code>，将删除的<code>Entry</code>进行返回，否则返回<code>null</code></p>
<h2 id="get和containsKey方法">get和containsKey方法</h2><blockquote>
<p>我们常常会先执行<code>containsKey</code>来判断<code>HashMap</code>中是否存在所查询的<code>key</code>值，如存在再进行<code>get</code>，那这两个方法实现上是？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns the value to which the specified key is mapped,</span><br><span class="line"> * or &#123;@code null&#125; if this map contains no mapping for the key.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;More formally, if this map contains a mapping from a key</span><br><span class="line"> * &#123;@code k&#125; to a value &#123;@code v&#125; such that &#123;@code (key==null ? k==null :</span><br><span class="line"> * key.equals(k))&#125;, then this method returns &#123;@code v&#125;; otherwise</span><br><span class="line"> * it returns &#123;@code null&#125;.  (There can be at most one such mapping.)</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;A return value of &#123;@code null&#125; does not &lt;i&gt;necessarily&lt;/i&gt;</span><br><span class="line"> * indicate that the map contains no mapping for the key; it's also</span><br><span class="line"> * possible that the map explicitly maps the key to &#123;@code null&#125;.</span><br><span class="line"> * The &#123;@link #containsKey containsKey&#125; operation may be used to</span><br><span class="line"> * distinguish these two cases.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @see</span> #put(Object, Object)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> getForNullKey();</span><br><span class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Offloaded version of get() to look up null keys.  Null keys map</span><br><span class="line"> * to index 0.  This null case is split out into separate methods</span><br><span class="line"> * for the sake of performance in the two most commonly used</span><br><span class="line"> * operations (get and put), but incorporated with conditionals in</span><br><span class="line"> * others.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;<span class="comment">//当查询的key为null的时候 需要遍历这个table[0]链表进行查找</span></span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the</span><br><span class="line"> * specified key.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>   key   The key whose presence in this map is to be tested</span><br><span class="line"> *<span class="javadoctag"> @return</span> &lt;tt&gt;true&lt;/tt&gt; if this map contains a mapping for the specified</span><br><span class="line"> * key.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns the entry associated with the specified key in the</span><br><span class="line"> * HashMap.  Returns null if the HashMap contains no mapping</span><br><span class="line"> * for the key.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">final</span> Entry&lt;K,V&gt; getEntry(Object key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;有没有惊奇的发现<code>get</code>和<code>containsKey</code>最终都会调用<code>getEntry</code>方法，只是在返回值上作了不同的判断而已，<code>getEntry</code>方法是根据<code>key</code>通过遍历链表来获取对应的<code>Entry</code>实体。另外<code>get</code>在同前面一样在<code>null</code>上也是作了单独的处理。</p>
<h2 id="keySet和values集合">keySet和values集合</h2><blockquote>
<p>在遍历<code>HashMap</code>取值时主要有：</p>
<ul>
<li>keySet：取得键集合，迭代键集合通过<code>get</code>方法逐个取值</li>
<li>values：直接取得<code>HashMap</code>的<code>value</code>集合进行遍历</li>
</ul>
</blockquote>
<p>下面我们看下这两个方法在源码中的实现<br>keySet方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns a &#123;@link Set&#125; view of the keys contained in this map.</span><br><span class="line"> * The set is backed by the map, so changes to the map are</span><br><span class="line"> * reflected in the set, and vice-versa.  If the map is modified</span><br><span class="line"> * while an iteration over the set is in progress (except through</span><br><span class="line"> * the iterator's own &lt;tt&gt;remove&lt;/tt&gt; operation), the results of</span><br><span class="line"> * the iteration are undefined.  The set supports element removal,</span><br><span class="line"> * which removes the corresponding mapping from the map, via the</span><br><span class="line"> * &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;,</span><br><span class="line"> * &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and &lt;tt&gt;clear&lt;/tt&gt;</span><br><span class="line"> * operations.  It does not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt;</span><br><span class="line"> * operations.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;K&gt; ks = keySet;</span><br><span class="line">    <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newKeyIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> containsKey(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Subclass overrides these to alter behavior of views' iterator() method</span></span><br><span class="line"><span class="function">Iterator&lt;K&gt; <span class="title">newKeyIterator</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;<span class="comment">//最终还是基于HashIterator迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>values方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns a &#123;@link Collection&#125; view of the values contained in this map.</span><br><span class="line"> * The collection is backed by the map, so changes to the map are</span><br><span class="line"> * reflected in the collection, and vice-versa.  If the map is</span><br><span class="line"> * modified while an iteration over the collection is in progress</span><br><span class="line"> * (except through the iterator's own &lt;tt&gt;remove&lt;/tt&gt; operation),</span><br><span class="line"> * the results of the iteration are undefined.  The collection</span><br><span class="line"> * supports element removal, which removes the corresponding</span><br><span class="line"> * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;,</span><br><span class="line"> * &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;,</span><br><span class="line"> * &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; operations.  It does not</span><br><span class="line"> * support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Collection&lt;V&gt; vs = values;</span><br><span class="line">    <span class="keyword">return</span> (vs != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> Values()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> newValueIterator();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> containsValue(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Iterator&lt;V&gt; <span class="title">newValueIterator</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;<span class="comment">//最终还是基于HashIterator迭代器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextEntry().value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;通过上面<code>keySet</code>和<code>values</code>这两个方法的源码会发现他们最终都是调用<code>HashIterator</code>来进行实现的，只是<code>keySet</code>通过<code>HashIterator</code>迭代器之后返回的是<code>Entry</code>的<code>key</code>，而<code>values</code>返回的是<code>Entry</code>的<code>value</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; next;        <span class="comment">// next entry to return</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount;   <span class="comment">// For fast-fail</span></span><br><span class="line">    <span class="keyword">int</span> index;              <span class="comment">// current slot</span></span><br><span class="line">    Entry&lt;K,V&gt; current;     <span class="comment">// current entry</span></span><br><span class="line"></span><br><span class="line">    HashIterator() &#123;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry</span></span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)<span class="comment">//一直循环到有值的Entry作为起始的Iter起点</span></span><br><span class="line">                ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Entry&lt;K,V&gt; nextEntry() &#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        Entry&lt;K,V&gt; e = next;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            Entry[] t = table;</span><br><span class="line">            <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)</span><br><span class="line">                ;</span><br><span class="line">        &#125;</span><br><span class="line">        current = e;</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        Object k = current.key;</span><br><span class="line">        current = <span class="keyword">null</span>;</span><br><span class="line">        HashMap.<span class="keyword">this</span>.removeEntryForKey(k);</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;<code>HashIterator</code>在实现时主要解决的时缺省问题，因为<code>HashMap</code>的<code>table</code>是根据散列码来存储的，并不是连续的，在进行迭代的时候需要隔离开这些不连续的数据，在<code>HashIterator</code>中是靠<code>while (index &lt; t.length &amp;&amp; (next = t[index++]) == null)</code>进行不连续缺省值的判断的。</p>
<h2 id="HashMap的复杂度">HashMap的复杂度</h2><p>&#160; &#160; &#160; &#160;如果说<code>HashMap</code>的<code>get</code>,<code>put</code>,<code>remove</code>方法的复杂度是O(1)，大多数程序都应该会认同吧？其实看了上面的源码之后说O(1)的并不准确，执行这三个方法他们都要做的一件事情就是遍历桶号所在的链表，进行已有<code>key</code>的判断，当这个链表的长度为0或者为1时，自然的他们的复杂度都是O(1)，那是在没有<code>hash</code>冲突的情况下，但是假如存在<code>hash</code>冲突，那么必然两个不同的<code>key</code>会散列到同一个链表中，其实他们的复杂度就不是O(1)了，所以我觉得比较准备的说法是这三个方法的复杂度近似为O(1)。<br>&#160; &#160; &#160; &#160;关于HashMap的优化，就是需要减少<code>hash</code>冲突，越少越好，我们知道<code>table</code>的容量越大，<code>hash</code>冲突的概率会越低，但是<code>table</code>的利用率也会越低，所以<code>table</code>的容量至关重要，我们也知道<code>size&gt;=table.length*loadFactor</code>时，<code>table</code>就会扩容量，所以我们在优化<code>loadFactor</code>参数很重要。</p>
<h2 id="总结">总结</h2><ul>
<li><code>HashMap</code>不是线程安全的类</li>
<li><code>HashMap</code>是基于数组加链表的形式实现的</li>
<li><code>HashMap</code>支持<code>null</code>键和值</li>
<li><code>HashMap</code>在<code>size&gt;=table.length*loadFactor</code>时会进行2倍扩容</li>
<li><code>HashMap</code>的<code>get</code>,<code>put</code>,<code>remove</code>复杂度近似O(1)</li>
<li><code>loadFactor</code>是优化的重要参数，<code>loadFactor</code>越大，<code>hash</code>冲突的概率越大，<code>table</code>的利用率越大，反之都越小</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>HashMap</code>是<code>Java</code>编程中最常用的容器类之一，它是通过<strong>数组+链表</strong>实现的，在面试时常常被问实现原理以及与<code>HashTable</code>作比较！</]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.LinkedList]]></title>
    <link href="http://yyl8781697.github.io/2015/03/26/Java%20Source/Java-LinkedList/"/>
    <id>http://yyl8781697.github.io/2015/03/26/Java Source/Java-LinkedList/</id>
    <published>2015-03-26T08:45:52.000Z</published>
    <updated>2015-04-25T07:19:32.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>LinkedList</code>是<code>Java</code>编程中最常用的容器类之一，它是基于双向链接实现的，在面试时常常被与<code>ArrayList</code>作比较！</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;<code>LinkedList</code>容器在插入操作上效率很高，本文主要以他的构造函数，存储结构，增删改机制来介绍<code>LinkedList</code></p>
<h2 id="构造函数">构造函数</h2><p>&#160; &#160; &#160; &#160;先来看一下它的几个私有变量的定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Pointer to first node.</span><br><span class="line"> * Invariant: (first == null &amp;&amp; last == null) ||</span><br><span class="line"> *            (first.prev == null &amp;&amp; first.item != null)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Pointer to last node.</span><br><span class="line"> * Invariant: (first == null &amp;&amp; last == null) ||</span><br><span class="line"> *            (last.next == null &amp;&amp; last.item != null)</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;注释中描述的得清晰</p>
<ul>
<li><code>size</code>表示<code>LinkedList</code>列表的实际尺寸大小</li>
<li><code>first</code>和<code>last</code>分别表示双向链表的头部指针和尾部指针，默认都是指向<code>null</code></li>
<li><code>Node</code>为<code>LinkedList</code>中一个内部类，单个元素存储的实体，通过<code>prev</code>和<code>next</code>来建立双向链表</li>
</ul>
<p>&#160; &#160; &#160; &#160;咱们在来看一下LinkedList的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty list.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a list containing the elements of the specified</span><br><span class="line"> * collection, in the order they are returned by the collection's</span><br><span class="line"> * iterator.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  c the collection whose elements are to be placed into this list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> NullPointerException if the specified collection is null</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;<code>LinkedList</code>在它的构造函数上有一个无参构造器和集合类构造器，这个大致和<code>ArrayList</code>是类似的，少了一个指定初始容量构造器。</p>
<h2 id="链表的添加">链表的添加</h2><p>&#160; &#160; &#160; &#160;先来看下源码中链表添加元素的几个基础实现方法：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Links e as first element.添加一个元素作为链表的头部</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> linkFirst(E e) &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">    first = newNode;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        last = newNode;<span class="comment">//如果链表里面还没有元素  则将第一个元素置为last   当然他同时也是first</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        f.prev = newNode;</span><br><span class="line">    <span class="keyword">size</span>++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Links e as last element.//添加一个元素作为链表的尾部</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">void</span> linkLast(E e) &#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;<span class="comment">//如果链表里面没有元素，则这个添加的元素为first，同时也是last</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.<span class="keyword">next</span> = newNode;</span><br><span class="line">    <span class="keyword">size</span>++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Inserts element e before non-null Node succ.//在非空的succ之前插入元素</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">void</span> linkBefore(E e, Node&lt;E&gt; succ) &#123;</span><br><span class="line">    <span class="comment">// assert succ != null;</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;</span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        pred.<span class="keyword">next</span> = newNode;</span><br><span class="line">    <span class="keyword">size</span>++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;在上面的添加功能的基础实现方法中，<code>linkFirst</code>和<code>linkLast</code>这两个方法很容易理解，它们是通过改变头部指针或者尾部指针的指向来实现将元素直接添加到头部或者尾部，<code>linkBefore</code>这个方法这则需要指定一个插入元素的“坑”， 再往这个“坑”前进行元素添加，用图来表示：<br><img src="/img/Java-LinkedList/linkBefore.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Inserts the specified element at the beginning of this list.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> e the element to add</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkFirst(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Appends the specified element to the end of this list.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method is equivalent to &#123;@link #add&#125;.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> e the element to add</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Appends the specified element to the end of this list.</span><br><span class="line"> *</span><br><span class="line"> * &lt;p&gt;This method is equivalent to &#123;@link #addLast&#125;.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> e element to be appended to this list</span><br><span class="line"> *<span class="javadoctag"> @return</span> &#123;@code true&#125; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    linkLast(e);<span class="comment">//默认插入的元素都是插入到链表的尾部</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Inserts the specified element at the specified position in this list.</span><br><span class="line"> * Shifts the element currently at that position (if any) and any</span><br><span class="line"> * subsequent elements to the right (adds one to their indices).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> index index at which the specified element is to be inserted</span><br><span class="line"> *<span class="javadoctag"> @param</span> element element to be inserted</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    checkPositionIndex(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index == size)</span><br><span class="line">        linkLast(element);</span><br><span class="line">    <span class="function"><span class="keyword">else</span></span><br><span class="line">        <span class="title">linkBefore</span><span class="params">(element, node(index)</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;上面源码中的方法均是<code>LinkedList</code>公开出来的方法，最终也都是调用了<code>linkFirst</code>,<code>linkLast</code>,<code>linkBefore</code>来完成操作的。</p>
<h2 id="链表的删除">链表的删除</h2><p>&#160; &#160; &#160; &#160;下面贴出来的是链表删除操作时的核心方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Unlinks non-null first node f.//</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;<span class="comment">//将fisrt指针指向f.next  也就是删除了f节点以及他之前的元素</span></span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Unlinks non-null last node l.//</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(Node&lt;E&gt; l)</span> </span>&#123;<span class="comment">//将last指针指针l.prev，也就是删除了f节点以及他之后的元素</span></span><br><span class="line">    <span class="comment">// assert l == last &amp;&amp; l != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = l.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = l.prev;</span><br><span class="line">    l.item = <span class="keyword">null</span>;</span><br><span class="line">    l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    last = prev;</span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">        first = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        prev.next = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Unlinks non-null node x.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;<span class="comment">//删除指定的元素x</span></span><br><span class="line">    <span class="comment">// assert x != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = x.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">        first = next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prev.next = next;</span><br><span class="line">        x.prev = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        last = prev;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        next.prev = prev;</span><br><span class="line">        x.next = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    x.item = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;删除方法中unlinkFirst和unlinkLast一眼看上去比较难理解，不过稍微盯几分钟画个图还是很好理解的</p>
<ul>
<li><code>unlinkFirst(Node<e> f)</e></code>：将fisrt指针指向f.next  也就是删除了f节点以及他之前的元素</li>
<li><code>unlinkLast(Node<e> l)</e></code>：将last指针指针l.prev，也就是删除了l节点以及他之后的元素</li>
<li><code>unlink(Node<e> x)</e></code>：最容易理解，直接删除指定的x元素</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes and returns the first element from this list.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @return</span> the first element from this list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> NoSuchElementException if this list is empty</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; f = first;</span><br><span class="line">    <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes and returns the last element from this list.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @return</span> the last element from this list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> NoSuchElementException if this list is empty</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">    <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes the first occurrence of the specified element from this list,</span><br><span class="line"> * if it is present.  If this list does not contain the element, it is</span><br><span class="line"> * unchanged.  More formally, removes the element with the lowest index</span><br><span class="line"> * &#123;@code i&#125; such that</span><br><span class="line"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span><br><span class="line"> * (if such an element exists).  Returns &#123;@code true&#125; if this list</span><br><span class="line"> * contained the specified element (or equivalently, if this list</span><br><span class="line"> * changed as a result of the call).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> o element to be removed from this list, if present</span><br><span class="line"> *<span class="javadoctag"> @return</span> &#123;@code true&#125; if this list contained the specified element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                unlink(x);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;可以看到<code>LinkedList</code>删除里面的公开方法也都是直接调用了<code>unlinkFirst</code>,<code>unlinkLast</code>,<code>remove</code></p>
<h2 id="链表的get">链表的get</h2><blockquote>
<p><code>LinkedList</code>是基于链表实现的，其插入和删除元素方法都是在O(1)里面完成的，那么他的get方法又是如何做的呢？</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns the (non-null) Node at the specified element index.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)<span class="comment">//从前往后取</span></span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)<span class="comment">//从后往前取</span></span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Returns the element at the specified position in this list.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> index index of the element to return</span><br><span class="line"> *<span class="javadoctag"> @return</span> the element at the specified position in this list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    checkElementIndex(index);</span><br><span class="line">    <span class="keyword">return</span> node(index).item;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;从源码的可以看到，<code>LinkedList</code>的get方法不能像<code>ArrayList</code>一样直接按索引取值，这里需要用遍历的方法来做，那当然在get上的复杂度肯定是要高于<code>ArrayList</code>了，不过<code>LinkedList</code>也做了一定的优化，从<code>node(int index)</code>可以看到，在按索引遍历的时候会根据索引所在位置（前半部分，后半部分）来决定遍历的方向：</p>
<ul>
<li>当index&lt;size/2的时候，<strong>从前往后取</strong></li>
<li>当index&gt;size/2的时候，<strong>从后往前取</strong></li>
</ul>
<h2 id="Iterator方法">Iterator方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Node&lt;E&gt; next;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">        <span class="comment">// assert isPositionIndex(index);</span></span><br><span class="line">        next = (index == size) ? <span class="keyword">null</span> : node(index);</span><br><span class="line">        nextIndex = index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">if</span> (!hasNext())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        lastReturned = next;</span><br><span class="line">        next = next.next;</span><br><span class="line">        nextIndex++;</span><br><span class="line">        <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextIndex &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">if</span> (!hasPrevious())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">        lastReturned = next = (next == <span class="keyword">null</span>) ? last : next.prev;</span><br><span class="line">        nextIndex--;</span><br><span class="line">        <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextIndex - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line"></span><br><span class="line">        Node&lt;E&gt; lastNext = lastReturned.next;</span><br><span class="line">        unlink(lastReturned);</span><br><span class="line">        <span class="keyword">if</span> (next == lastReturned)</span><br><span class="line">            next = lastNext;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            nextIndex--;</span><br><span class="line">        lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        expectedModCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line">        lastReturned.item = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">            linkLast(e);</span><br><span class="line">        <span class="function"><span class="keyword">else</span></span><br><span class="line">            <span class="title">linkBefore</span><span class="params">(e, next)</span></span>;</span><br><span class="line">        nextIndex++;</span><br><span class="line">        expectedModCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;在<code>ArrayList</code>的<code>iterator</code>方法里面只提供了向后遍历，但是在<code>LinkedList</code>的<code>iterator</code>中可以发现他在提供<code>hasNext</code>的同时还提供了<code>hasPrevious</code>方法，所以这个<code>iterator</code>有<strong>双向</strong>遍历功能，既可以从前往后，也可以从后往前进行遍历，为我们在开发时提供了不少的便利</p>
<h2 id="一些便利的方法">一些便利的方法</h2><ul>
<li><code>peek()</code>,<code>peekFirst()</code>返回链表的头部但不删除，<code>poll()</code>,<code>pollFirst()</code>返回链表的头部同时将其删除</li>
<li><code>peekLast()</code>返回链表的尾部但是不删除，<code>pollLast()</code>返回链表的尾部同时将其删除</li>
<li><code>offer(E e)</code>,<code>offerLast(E e)</code>在链表的尾部添加一个元素，<code>offerFirst(E e)</code>向链表的头部添加一个元素</li>
<li><code>removeFirstOccurrence(Object o)</code>移除第一次出现的元素，<code>removeLastOccurrence(Object o)</code>移除最后一次出现的元素</li>
</ul>
<h2 id="总结">总结</h2><ul>
<li><code>LinkedList</code>是基于双向链表实现的</li>
<li><code>LinkedList</code>的插入和删除的复杂度为O(1)，（假设已有插入或者删除的元素），get的复杂度为O(N)</li>
<li><code>LinkedList</code>的迭代器有双向遍历功能</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>LinkedList</code>是<code>Java</code>编程中最常用的容器类之一，它是基于双向链接实现的，在面试时常常被与<code>ArrayList</code>作比较！</p>
</blockquote>
<p>&#]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.Vector]]></title>
    <link href="http://yyl8781697.github.io/2015/03/25/Java%20Source/Java-Vector/"/>
    <id>http://yyl8781697.github.io/2015/03/25/Java Source/Java-Vector/</id>
    <published>2015-03-25T06:10:21.000Z</published>
    <updated>2015-04-25T07:19:36.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>Vector</code>是<code>Java</code>编程中最常用的容器类之一，它是基于动态的数组实现的，在面试时常常被与<code>ArrayList</code>作比较！</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;看过源码的小伙伴可能有相同的感觉：进入<code>Vector.Java</code>会顿一会儿，还以为自己点错进去<code>ArrayList</code>的源码文件了呢！是的，<code>Vector</code>与<code>ArrayList</code>的实现基本相似，同样是基于动态数组，同样是需要扩容，本文在接下来的源码分析中与<code>ArraryList</code>重复的部分不再累赘，如需要了解的同学请点入进<a href="http://kubicode.me/2015/03/24/Java-ArrayList/" target="_blank" rel="external">ArrarList源码分析</a></p>
<h2 id="Vertor的1倍扩容">Vertor的1倍扩容</h2><blockquote>
<p>还记得<code>ArrayList</code>每次扩容为元数组的0.5倍不？<code>Vector</code>在进行扩容操作时与<code>ArrayList</code>略微不同</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The amount by which the capacity of the vector is automatically</span><br><span class="line"> * incremented when its size becomes greater than its capacity.  If</span><br><span class="line"> * the capacity increment is less than or equal to zero, the capacity</span><br><span class="line"> * of the vector is doubled each time it needs to grow.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @serial</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;<span class="comment">//用于指定每次扩容的容量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                     capacityIncrement : oldCapacity);<span class="comment">//如不指定capacityIncrement，默认扩容的容量为原数组的容量</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;细心的小伙伴可以发现<code>Vector</code>中多了一个<code>capacityIncrement</code>变量，该变量是用于指定每次扩容的增量，如果不指定该变量，在<code>grow</code>中可以发现<code>Vector</code>默认就扩容为原数组的1倍</p>
<h2 id="线程安全">线程安全</h2><blockquote>
<p><code>Vertor</code>是线程安全的</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;<code>Vertor</code>源码中另一个比较显眼的地方就是绝大部分方法都有<code>synchronized</code>关键字，大家都知道这个关键字是用于线程同步的，所以<code>Vector</code>类是线程安全的！<br>但是即使它所有的方法都被修饰成同步，也不意味着调用它的时候永远都不需要同步手段了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector=<span class="keyword">new</span> Vector&lt;Integer&gt;();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">	<span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			vector.add(i);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		Thread removeThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">			</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vector.size();i++)</span><br><span class="line">				&#123;</span><br><span class="line">					vector.remove(i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		Thread printThread=<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">			<span class="annotation">@Override</span></span><br><span class="line">			<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span><br><span class="line">			</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;vector.size();i++)</span><br><span class="line">				&#123;</span><br><span class="line">					System.out.println(vector.get(i));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		</span><br><span class="line">		removeThread.start();</span><br><span class="line">		printThread.start();</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(Thread.activeCount()&gt;<span class="number">20</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;大家运行此段代码时 跑了一小段时间之后会发现有ArrayIndexOutOfBoundsException异常，这里<code>Vector</code>的get,remove,size方法尽管有<code>synchronized</code>修饰，但是在多线程环境中，如果不在方法端额外做同步措施的话，这段代码仍然是不安全的，如果一个线程删除了序号i的元素之后，另一个线程去访问这个i的话就直接回抛异常，所以保证这段代码安全还需要再<code>run</code>里面再添加<br><code>synchronized</code>修饰</p>
<h2 id="总结">总结</h2><ol>
<li><code>Vector</code>的实现与<code>ArrayList</code>基本一致</li>
<li><code>Vector</code>在扩容时可以指定每次扩容的增长，如果不指定则默认增加1倍</li>
<li><code>Vector</code>是线程安全的，但是在多线程环境下可能还是需要用<code>synchronized</code>关键词才能保证真正的安全</li>
</ol>
<h2 id="参考">参考</h2><ul>
<li>《深入理解Java虚拟机》.周志明，第十三章，Page388-389</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>Vector</code>是<code>Java</code>编程中最常用的容器类之一，它是基于动态的数组实现的，在面试时常常被与<code>ArrayList</code>作比较！</p>
</blockquote>
<p>&#160]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java 源码学习之java.util.ArrayList]]></title>
    <link href="http://yyl8781697.github.io/2015/03/24/Java%20Source/Java-ArrayList/"/>
    <id>http://yyl8781697.github.io/2015/03/24/Java Source/Java-ArrayList/</id>
    <published>2015-03-24T12:50:40.000Z</published>
    <updated>2015-04-25T07:19:06.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>ArrayList</code>是Java编程中最常用的容器类之一，它是基于动态的数组实现的，在面试时常常被与<code>Vector</code>、<code>LikedList</code>作比较！</p>
</blockquote>
<p>&#160; &#160; &#160; &#160;本文将主要从<code>ArrayList</code>的构造函数、<code>add</code>、<code>remove</code>,<code>iterator</code>为入口进行源码分析</p>
<h2 id="构造函数">构造函数</h2><p>&#160; &#160; &#160; &#160;在看构造函数之后先看下一下<code>ArrayList</code>类的三个重要私有变量</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Default initial capacity.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The array buffer into which the elements of the ArrayList are stored.</span><br><span class="line"> * The capacity of the ArrayList is the length of this array buffer. Any</span><br><span class="line"> * empty ArrayList with elementData == EMPTY_ELEMENTDATA will be expanded to</span><br><span class="line"> * DEFAULT_CAPACITY when the first element is added.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * The size of the ArrayList (the number of elements it contains).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @serial</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure>
<p>&#160; &#160; &#160; &#160;从注释中很容易了解到：</p>
<ul>
<li><code>DEFAULT_CAPACITY</code>为<code>ArrayList</code>的默认容量，大小为10，</li>
<li><code>elementData</code>就是为存储<code>ArrayList</code>的实体数组，注意它是<code>transient</code>的，也就是在进行序列化的时候不会被持久化，另一个要点他是<code>Object</code>类型的，也就是<code>ArrayList</code>存储数据时会进行装箱和拆箱操作</li>
<li><code>size</code>为<code>ArrayList</code>存储的实际容量，这个值在执行<code>add</code>方法可能会有扩容的操作</li>
</ul>
<p>&#160; &#160; &#160; &#160;咱们在来看一下<code>ArrayList</code>的构造函数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty list with the specified initial capacity.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>  initialCapacity  the initial capacity of the list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IllegalArgumentException if the specified initial capacity</span><br><span class="line"> *         is negative</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs an empty list with an initial capacity of ten.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Constructs a list containing the elements of the specified</span><br><span class="line"> * collection, in the order they are returned by the collection's</span><br><span class="line"> * iterator.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> c the collection whose elements are to be placed into this list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> NullPointerException if the specified collection is null</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    size = elementData.length;</span><br><span class="line">    <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">    <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">        elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160; <code>ArrayList</code>在进行实例时其实就是实例化<code>elementData</code>数组变量，他可以指定数组的大小，如果未指定就使用默认的<code>DEFAULT_CAPACITY</code>，它还可以直接使用集合类的数据直接进行初始化</p>
<h2 id="add和扩容">add和扩容</h2><p>&#160; &#160; &#160; &#160; <code>add</code>方法是咱们在<code>ArrayList</code>上最为常用的一个方法，先来看下<code>Java</code>中对<code>add</code>方法的定义<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Appends the specified element to the end of this list.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> e element to be appended to this list</span><br><span class="line"> *<span class="javadoctag"> @return</span> &lt;tt&gt;true&lt;/tt&gt; (as specified by &#123;@link Collection#add&#125;)</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    elementData[size++] = e;<span class="comment">//对实体数组进行赋值，同时将ArrayList的实际尺寸累加1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;<code>add</code>方法在<code>java</code>中定义极为精简，一眼看过去就是在实体数组中进行相应索引位置的赋值以及<code>size</code>变量的累加，但是各位请注意一下<code>ensureCapacityInternal</code>这个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Increases the capacity of this &lt;tt&gt;ArrayList&lt;/tt&gt; instance, if</span><br><span class="line"> * necessary, to ensure that it can hold at least the number of elements</span><br><span class="line"> * specified by the minimum capacity argument.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span>   minCapacity   the desired minimum capacity</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> minExpand = (elementData != EMPTY_ELEMENTDATA)</span><br><span class="line">        <span class="comment">// any size if real element table</span></span><br><span class="line">        ? <span class="number">0</span></span><br><span class="line">        <span class="comment">// larger than default for empty table. It's already supposed to be</span></span><br><span class="line">        <span class="comment">// at default size.</span></span><br><span class="line">        : DEFAULT_CAPACITY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (minCapacity &gt; minExpand) &#123;</span><br><span class="line">        ensureExplicitCapacity(minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);<span class="comment">//这里调用扩容方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;该方法主要是在进行数组元素赋值前进行数组的容量“确保”，防止其越界，当然当前添加元素之后如果所需数组容量大于<code>size</code>，它就会进行扩容操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Increases the capacity to ensure that it can hold at least the</span><br><span class="line"> * number of elements specified by the minimum capacity argument.</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> minCapacity the desired minimum capacity</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);<span class="comment">//扩容，每次增长oldLength/2</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);<span class="comment">//每次扩容都会将原有的数组重新拷贝一份</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;数组扩容方法中有两个较为重要的点：</p>
<ol>
<li>每次扩容时都是增加原数组大小的一半（这也是面试中较为常问的一个点）</li>
<li>他是使用数组的拷贝来完成扩容的，这里将会产生较大的开销，不过还好的是调用的拷贝方法<code>Arrays.copyOf</code>最终是调用<code>System.arraycopy</code>，它是一个<code>native</code>方法</li>
</ol>
<p>&#160; &#160; &#160; &#160;ArrayList的add方法大致就是按照上述实现的，其余的addAll,add(index,e)方法也基本都是调用上述的方法来完成的</p>
<h2 id="remove部分">remove部分</h2><p>&#160; &#160; &#160; &#160;<code>remove</code>方法主要有根据数组索引或者数组的值进行删除 这两种方法，还是先看源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes the element at the specified position in this list.</span><br><span class="line"> * Shifts any subsequent elements to the left (subtracts one from their</span><br><span class="line"> * indices).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> index the index of the element to be removed</span><br><span class="line"> *<span class="javadoctag"> @return</span> the element that was removed from the list</span><br><span class="line"> *<span class="javadoctag"> @throws</span> IndexOutOfBoundsException &#123;@inheritDoc&#125;</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Removes the first occurrence of the specified element from this list,</span><br><span class="line"> * if it is present.  If the list does not contain the element, it is</span><br><span class="line"> * unchanged.  More formally, removes the element with the lowest index</span><br><span class="line"> * &lt;tt&gt;i&lt;/tt&gt; such that</span><br><span class="line"> * &lt;tt&gt;(o==null&amp;nbsp;?&amp;nbsp;get(i)==null&amp;nbsp;:&amp;nbsp;o.equals(get(i)))&lt;/tt&gt;</span><br><span class="line"> * (if such an element exists).  Returns &lt;tt&gt;true&lt;/tt&gt; if this list</span><br><span class="line"> * contained the specified element (or equivalently, if this list</span><br><span class="line"> * changed as a result of the call).</span><br><span class="line"> *</span><br><span class="line"> *<span class="javadoctag"> @param</span> o element to be removed from this list, if present</span><br><span class="line"> *<span class="javadoctag"> @return</span> &lt;tt&gt;true&lt;/tt&gt; if this list contained the specified element</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * Private remove method that skips bounds checking and does not</span><br><span class="line"> * return the value removed.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;<code>remove</code>方法大致可以有如下几种归纳：</p>
<ol>
<li><code>remove(index)</code>会进行<code>index</code>的越界检查，在进行移除时是使用数组拷贝来完成的，在移除完成之后方法会返回被移除的值</li>
<li><code>remove(obj)</code>根据<code>obj</code>是否为<code>null</code>分为两种情况考虑，主要是使用相等的方式不同<code>==</code>和<code>equal</code></li>
<li><code>remove(obj)</code>会调用<code>fastRemove</code>来完成移除操作，而<code>fastRemove</code>也是使用数组的拷贝来完成的</li>
<li>在<code>remove</code>时会将<code>size</code>递减1，所以在<code>ArrayList</code>的循环中删除元素时需要小心，较为安全的方法在<code>ArrayList</code>的<code>Iterator</code>部分提及</li>
</ol>
<h2 id="Iterator部分">Iterator部分</h2><p>&#160; &#160; &#160; &#160;<code>ArrayList</code>实现他的迭代器，可以使用<code>foreach</code>进行循环遍历<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * An optimized version of AbstractList.Itr</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];<span class="comment">//将当前的i赋值给lastRet  并且返回elementData[lastRet]数组的值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;它的迭代器实现较为精简，主要是实现了<code>next</code>和<code>remove</code>两个方法，其实这里的<code>remove</code>可以完成我们在迭代过程中进行元素的移除，不过由于有<code>lastRet &lt; 0</code>的检测，所以必须在进行<code>next</code>之后才能进行调用<code>remove</code>方法，不然会报错</p>
<p>&#160; &#160; &#160; &#160;例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list=<span class="keyword">new</span> ArrayList&lt;Integer&gt;(Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>));</span><br><span class="line">Iterator&lt;Integer&gt; iter=list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iter.hasNext())</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(iter.next()==<span class="number">3</span>)<span class="comment">//先执行next</span></span><br><span class="line">	&#123;</span><br><span class="line">		iter.remove();<span class="comment">//再用remove就ok了</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(list);<span class="comment">//会打印[1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure></p>
<h2 id="其他的一些便利api">其他的一些便利<code>api</code></h2><p>&#160; &#160; &#160; &#160;<code>ArrayList</code>提供了丰富的<code>api</code>，例如</p>
<ul>
<li><code>indexOf</code>：元素的索引位置查找<code>O(N)</code></li>
<li><code>fill</code>：元素的填充</li>
<li><code>contains</code>：元素的查找等，会调用<code>indexOf</code></li>
<li><code>get</code>：直接使用数组索引取值<code>O(1)</code></li>
<li><code>toArray</code>：转为数组</li>
</ul>
<h2 id="总结：">总结：</h2><ul>
<li><code>ArrayList</code>是基于动态数组实现的</li>
<li>在使用<code>add</code>方法时遇到容量不够会执行扩容操作，每次增加原数组的一半，需要使用数组拷贝完成，所以使用<code>ArrayList</code>尽量指定所需要的容量</li>
<li>在迭代删除元素时先<code>next</code>，再<code>remove</code></li>
<li><code>ArrayList</code>的取值方法是<code>O(1)</code>，查找方法是<code>O(N)</code>，在插入元素时如果不需要扩容也是<code>O(N)</code>，如果扩容就有较大开销</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>ArrayList</code>是Java编程中最常用的容器类之一，它是基于动态的数组实现的，在面试时常常被与<code>Vector</code>、<code>LikedList</code>作比较！</p>
</blockquote]]>
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Source" scheme="http://yyl8781697.github.io/categories/Java-Source/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[二叉树的遍历-递归和非递归]]></title>
    <link href="http://yyl8781697.github.io/2015/03/24/Algorithm/bitTree-traversal/"/>
    <id>http://yyl8781697.github.io/2015/03/24/Algorithm/bitTree-traversal/</id>
    <published>2015-03-24T12:08:39.000Z</published>
    <updated>2015-04-25T07:17:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="二叉树">二叉树</h2><p>二叉树是一种较为常见的数据结构，不了解的<a href="http://baike.baidu.com/link?url=ZqKtj1Mk_vN9Ey2QZjTih_rUgyH5JiLJ7deno8DdRff7tLr6Q0C-uzAxEGBTCkx-9zd5JiyjOmihMbuuv_tc_a" target="_blank" rel="external">点我</a>，他在各大公司的笔试/面试中经常出现，特别是它的遍历。<br>二叉树的遍历共三种：</p>
<ol>
<li>前序遍历：根节点-&gt;左孩子节点-&gt;右孩子节点</li>
<li>中序遍历：左孩子节点-&gt;根节点-&gt;右孩子节点</li>
<li>后续遍历：左孩子节点-&gt;右孩子节点-&gt;根节点</li>
</ol>
<h2 id="递归遍历">递归遍历</h2><p>&#160; &#160; &#160; &#160;该遍历最为经典也最为简单的就是使用递归方法来做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderTraversalRecursive</span><span class="params">(BitNode node)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(node ==<span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	</span><br><span class="line">	System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">	preOrderTraversalRecursive(node.left);</span><br><span class="line">	preOrderTraversalRecursive(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraversalRecursive</span><span class="params">(BitNode node)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(node ==<span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	inOrderTraversalRecursive(node.left);</span><br><span class="line">	System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">	inOrderTraversalRecursive(node.right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraversalRecursive</span><span class="params">(BitNode node)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(node ==<span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	postOrderTraversalRecursive(node.left);</span><br><span class="line">	postOrderTraversalRecursive(node.right);</span><br><span class="line">	System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;本文主要讨论二叉树的非递归遍历（也是面试官们喜欢的提问点）。</p>
<h2 id="非递归遍历">非递归遍历</h2><blockquote>
<p>在用非递归进行二叉树的遍历时最主要借助的结构就是Stack</p>
</blockquote>
<h3 id="前序遍历">前序遍历</h3><blockquote>
<p>前序遍历使用栈可以轻松的搞定：</p>
</blockquote>
<ol>
<li>将根节点Node压入栈</li>
<li>取出栈顶将其进行打印，同时将取得元素的左右孩子节点分别入栈</li>
<li>直至栈中的元素全部取光<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 前序遍历 </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraversal</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Stack&lt;BitNode&gt; stack=<span class="keyword">new</span> Stack&lt;BitNode&gt;();</span><br><span class="line">	BitNode node;</span><br><span class="line">	<span class="keyword">if</span>(root!=<span class="keyword">null</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		stack.push(root);</span><br><span class="line">		<span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			node=stack.pop();</span><br><span class="line">			System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">			<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">				stack.push(node.right);</span><br><span class="line">			<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">				stack.push(node.left);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="中序遍历">中序遍历</h3><blockquote>
<p>中序遍历在使用栈是不能简单的按前序的做法进行操作，因为他最先需要输出的左孩子节点</p>
</blockquote>
<ol>
<li>首选将当前节点root的各个左子节点压入栈</li>
<li>然后依次从栈中取数据，进行打印，将当前节点置为栈顶的右孩子节点，回到1</li>
<li>直至栈为空<figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 中序遍历 </span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="literal">void</span> inOrderTraversal()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">Stack</span><span class="subst">&lt;</span>BitNode<span class="subst">&gt;</span> <span class="built_in">stack</span><span class="subst">=</span><span class="literal">new</span> <span class="built_in">Stack</span><span class="subst">&lt;</span>BitNode<span class="subst">&gt;</span>();</span><br><span class="line">	BitNode node<span class="subst">=</span>root;</span><br><span class="line">	<span class="keyword">while</span>(node<span class="subst">!=</span><span class="built_in">null</span> <span class="subst">||</span> <span class="built_in">stack</span><span class="built_in">.</span>size()<span class="subst">&gt;</span><span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(node<span class="subst">!=</span><span class="built_in">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">stack</span><span class="built_in">.</span>push(node);</span><br><span class="line">			node<span class="subst">=</span>node<span class="built_in">.</span>left;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">stack</span><span class="built_in">.</span>size()<span class="subst">&gt;</span><span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			node<span class="subst">=</span><span class="built_in">stack</span><span class="built_in">.</span>pop();</span><br><span class="line">			System<span class="built_in">.</span>out<span class="built_in">.</span>print(node<span class="built_in">.</span>val<span class="subst">+</span><span class="string">","</span>);</span><br><span class="line">			node<span class="subst">=</span>node<span class="built_in">.</span>right;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="后续遍历">后续遍历</h3><blockquote>
<p>后序遍历比中序更为复杂一点，不过大致思路类似</p>
</blockquote>
<ol>
<li>首先将当前节点的各个又孩子节点进行入数据栈，同时将该节点的值压入一个值栈</li>
<li>然后依次从数据栈中取数据，将当前节点置为数据栈顶元素的左孩子节点，回到1</li>
<li>直至数据栈为空，此时再依次遍历值栈进行打印即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 后续遍历 </span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraversal</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Stack&lt;BitNode&gt; stack=<span class="keyword">new</span> Stack&lt;BitNode&gt;();</span><br><span class="line">	Stack&lt;Integer&gt; valStack=<span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">	BitNode node=root;</span><br><span class="line">	<span class="keyword">while</span>(node!=<span class="keyword">null</span> || stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(node!=<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			stack.push(node);</span><br><span class="line">			valStack.push(node.val);</span><br><span class="line">			node=node.right;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		node=stack.pop();</span><br><span class="line">		node=node.left;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(valStack.size()&gt;<span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		System.out.print(valStack.pop()+<span class="string">","</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="演示">演示</h2><p>&#160; &#160; &#160; &#160;下面给出全部的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitTree</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	BitNode root;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">		</span><br><span class="line">		BitTree tree=BitTree.createBitTree(array);</span><br><span class="line">		System.out.println(<span class="string">"前序遍历"</span>);</span><br><span class="line">		System.out.println(<span class="string">"非递归形式"</span>);</span><br><span class="line">		tree.preOrderTraversal();</span><br><span class="line">		System.out.println(<span class="string">"\r\n递归形式"</span>);</span><br><span class="line">		tree.preOrderTraversalRecursive();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"\r\n\r\n中序遍历"</span>);</span><br><span class="line">		System.out.println(<span class="string">"非递归形式"</span>);</span><br><span class="line">		tree.inOrderTraversal();</span><br><span class="line">		System.out.println(<span class="string">"\r\n递归形式"</span>);</span><br><span class="line">		tree.inOrderTraversalRecursive();</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">"\r\n\r\n后序遍历"</span>);</span><br><span class="line">		System.out.println(<span class="string">"非递归形式"</span>);</span><br><span class="line">		tree.postOrderTraversal();</span><br><span class="line">		System.out.println(<span class="string">"\r\n递归形式"</span>);</span><br><span class="line">		tree.postOrderTraversalRecursive();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 创建一颗树</span><br><span class="line">	 *<span class="javadoctag"> @param</span> array</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BitTree <span class="title">createBitTree</span><span class="params">(<span class="keyword">int</span>[] array)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		BitTree bitTree=<span class="keyword">new</span> BitTree();</span><br><span class="line">		bitTree.root=bitTree.createBitTree(array,<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> bitTree;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> BitNode <span class="title">createBitTree</span><span class="params">(<span class="keyword">int</span>[] array,<span class="keyword">int</span> i)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(i&gt;=array.length || array[i]==<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">		</span><br><span class="line">		BitNode node=<span class="keyword">new</span> BitNode();</span><br><span class="line">		node.val=array[i];</span><br><span class="line">		</span><br><span class="line">		node.left=createBitTree(array,<span class="number">2</span>*i+<span class="number">1</span>);</span><br><span class="line">		node.right=createBitTree(array,<span class="number">2</span>*i+<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">return</span> node;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 前序遍历 </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraversal</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Stack&lt;BitNode&gt; stack=<span class="keyword">new</span> Stack&lt;BitNode&gt;();</span><br><span class="line">		BitNode node;</span><br><span class="line">		<span class="keyword">if</span>(root!=<span class="keyword">null</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			stack.push(root);</span><br><span class="line">			<span class="keyword">while</span>(stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				node=stack.pop();</span><br><span class="line">				System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">				<span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)</span><br><span class="line">					stack.push(node.right);</span><br><span class="line">				<span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)</span><br><span class="line">					stack.push(node.left);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 中序遍历 </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraversal</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Stack&lt;BitNode&gt; stack=<span class="keyword">new</span> Stack&lt;BitNode&gt;();</span><br><span class="line">		BitNode node=root;</span><br><span class="line">		<span class="keyword">while</span>(node!=<span class="keyword">null</span> || stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(node!=<span class="keyword">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				stack.push(node);</span><br><span class="line">				node=node.left;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				node=stack.pop();</span><br><span class="line">				System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">				node=node.right;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 后续遍历 </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraversal</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Stack&lt;BitNode&gt; stack=<span class="keyword">new</span> Stack&lt;BitNode&gt;();</span><br><span class="line">		Stack&lt;Integer&gt; valStack=<span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">		BitNode node=root;</span><br><span class="line">		<span class="keyword">while</span>(node!=<span class="keyword">null</span> || stack.size()&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span>(node!=<span class="keyword">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				stack.push(node);</span><br><span class="line">				valStack.push(node.val);</span><br><span class="line">				node=node.right;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			node=stack.pop();</span><br><span class="line">			node=node.left;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(valStack.size()&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.print(valStack.pop()+<span class="string">","</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 前序遍历（递归形式）</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrderTraversalRecursive</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		preOrderTraversalRecursive(root);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preOrderTraversalRecursive</span><span class="params">(BitNode node)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(node ==<span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		</span><br><span class="line">		System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">		preOrderTraversalRecursive(node.left);</span><br><span class="line">		preOrderTraversalRecursive(node.right);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 中序遍历（递归形式）</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraversalRecursive</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		inOrderTraversalRecursive(root);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrderTraversalRecursive</span><span class="params">(BitNode node)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(node ==<span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		inOrderTraversalRecursive(node.left);</span><br><span class="line">		System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">		inOrderTraversalRecursive(node.right);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 后序遍历（递归形式）</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraversalRecursive</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		postOrderTraversalRecursive(root);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrderTraversalRecursive</span><span class="params">(BitNode node)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(node ==<span class="keyword">null</span>)</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		postOrderTraversalRecursive(node.left);</span><br><span class="line">		postOrderTraversalRecursive(node.right);</span><br><span class="line">		System.out.print(node.val+<span class="string">","</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 二叉树的节点</span><br><span class="line">	 *<span class="javadoctag"> @author</span> Administrator</span><br><span class="line">	 *</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BitNode</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> val;</span><br><span class="line">		BitNode left,right;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&#160; &#160; &#160; &#160;该二叉树使用数组来表示建立，对应为：<br><img src="http://img.blog.csdn.net/20140805205402022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcG9ueV9tYWdnaWU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt=""><br>最终得到的结果为：</p>
<pre><code>前序遍历
非递归形式
1,2,4,5,3,6,8,7,
递归形式
1,2,4,5,3,6,8,7,

中序遍历
非递归形式
4,2,5,1,8,6,3,7,
递归形式
4,2,5,1,8,6,3,7,

后序遍历
非递归形式
4,5,2,8,6,7,3,1,
递归形式
4,5,2,8,6,7,3,1,
</code></pre><h2 id="参考">参考</h2><ul>
<li><a href="http://blog.csdn.net/pony_maggie/article/details/38390513" target="_blank" rel="external">http://blog.csdn.net/pony_maggie/article/details/38390513</a></li>
<li><a href="http://www.cnblogs.com/dolphin0520/archive/2011/08/25/2153720.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/archive/2011/08/25/2153720.html</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="二叉树">二叉树</h2><p>二叉树是一种较为常见的数据结构，不了解的<a href="http://baike.baidu.com/link?url=ZqKtj1Mk_vN9Ey2QZjTih_rUgyH5JiLJ7deno8DdRff7tLr6Q0C-uzA]]>
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
</feed>