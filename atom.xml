<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Kubi Code'Blog]]></title>
  <subtitle><![CDATA[The palest ink is better than the best memory.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yyl8781697.github.io/"/>
  <updated>2015-08-03T22:44:12.000Z</updated>
  <id>http://yyl8781697.github.io/</id>
  
  <author>
    <name><![CDATA[Kubi Code]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[股票买卖，获得最大的收益]]></title>
    <link href="http://yyl8781697.github.io/2015/08/04/Algorithm/Stock/"/>
    <id>http://yyl8781697.github.io/2015/08/04/Algorithm/Stock/</id>
    <published>2015-08-03T22:34:24.000Z</published>
    <updated>2015-08-03T22:44:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="问题">问题</h2><pre><code>一个人知道未来<span class="keyword">n</span>天的每天股票的价格，请你给出一个算法，使得这个人从哪天买入，哪天卖出能获得最大的收益。
</code></pre><h2 id="解析">解析</h2><p>问题实际上就是求一个数组后面元素减前面元素的最大值<br>看了大神们提出了一个O(n)的方法，就是遍历过去，同时记录当前最小的那个元素，然后每次都是当前遍历元素减去最小的元素   取其差值最大<br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 通过维护一个最小的minLeft  来计算最大的差值  聪明</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">stock</span><span class="params">(<span class="keyword">int</span>[] a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.length&lt;<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//都来不及买和卖  肯定不做了</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> max=a[<span class="number">1</span>]-a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> minLeft=a[<span class="number">0</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;a.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		minLeft=Math.min(minLeft, a[i-<span class="number">1</span>]);<span class="comment">//通过最小的价格买下</span></span><br><span class="line">		max=Math.max(max, a[i]-minLeft);<span class="comment">//计算买了能赚最大的钱</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> Math.max(<span class="number">0</span>, max);<span class="comment">//再怎么也不能亏</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] a=&#123;<span class="number">4</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>&#125;;</span><br><span class="line">	System.out.println(stock(a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<pre><code>14
</code></pre><p>其他两个股票升级问题看</p>
<ul>
<li><a href="http://kubicode.me/2014/07/04/LeetCode/LeetCode-Best-Time-to-Buy-and-Sell-Stock-II/" target="_blank" rel="external">LeetCode-Best Time to Buy and Sell Stock II</a></li>
<li><a href="http://kubicode.me/2014/07/05/LeetCode/LeetCode-Best-Time-to-Buy-and-Sell-Stock-III/" target="_blank" rel="external">LeetCode-Best Time to Buy and Sell Stock III</a></li>
</ul>
<h2 id="参考">参考</h2><p><a href="http://www.cnblogs.com/iamccme/archive/2013/05/21/3091706.html" target="_blank" rel="external">http://www.cnblogs.com/iamccme/archive/2013/05/21/3091706.html</a></p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="问题">问题</h2><pre><code>一个人知道未来<span class="keyword">n</span>天的每天股票的价格，请你给出一个算法，使得这个人从哪天买入，哪天卖出能获得最大的收益。
</code></pre><h2 id="解析">解析</h2><p>问题实际上就是求一个数组后面元素减前面元素的最大值<br>看了大神们提出了一个O(n)的方法，就是遍历过去，同时记录当前最小的那个元素，然后每次都是当前遍历元素减去最小的元素   取其差值最大<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最短摘要生成]]></title>
    <link href="http://yyl8781697.github.io/2015/08/03/Algorithm/Short-Abstract/"/>
    <id>http://yyl8781697.github.io/2015/08/03/Algorithm/Short-Abstract/</id>
    <published>2015-08-03T15:21:15.000Z</published>
    <updated>2015-08-03T15:28:14.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>最短摘要生成
给定一个字符串，以及一系列查询词，在这个字符串中找到一个子串，该子串包含全部的查询词，求这个最短子串
</code></pre><h2 id="解析">解析</h2><p>两个指针，begin和end<br>首先使用end往右边移动一直移动到全部包含查询字符集q的位置<br>然后将begin也向右边移动，直达再移动一次begin-end区间里面的数据将不再包含q<br>此时记录begin和end以及其最小的间距<br>然后begin右移一位，end继续右边移动直至全部包含，周而复始<br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> minBegin=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> minEnd=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> curBegin=-<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> curEnd=-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 最短摘要生成的匹配</span><br><span class="line"> * 两个指针，begin和end</span><br><span class="line"> * 首先使用end往右边移动一直移动到全部包含查询字符集q的位置</span><br><span class="line"> * 然后将begin也向右边移动，直达再移动一次begin-end区间里面的数据将不再包含q</span><br><span class="line"> * 此时记录begin和end以及其最小的间距</span><br><span class="line"> * 然后begin右移一位，end继续右边移动直至全部包含，周而复始</span><br><span class="line"> * 代码中查询是否全部包含使用了位操作，这样更加快^_^</span><br><span class="line"> *<span class="javadoctag"> @param</span> data</span><br><span class="line"> *<span class="javadoctag"> @param</span> q</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">match</span><span class="params">(String data,<span class="keyword">char</span>[] q)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> matchs=<span class="number">0</span>;<span class="comment">//存储匹配的情况</span></span><br><span class="line">	<span class="keyword">int</span> matchIndex=-<span class="number">1</span>;</span><br><span class="line">	curBegin=-<span class="number">1</span>;</span><br><span class="line">	curEnd=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(curEnd&lt;data.length())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>((matchIndex=indexOf(q,data.charAt(curEnd)))&gt;=<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(curBegin==-<span class="number">1</span>)</span><br><span class="line">				curBegin=curEnd;<span class="comment">//初始化第一次开始匹配项</span></span><br><span class="line">			</span><br><span class="line">			matchs|=<span class="number">1</span>&lt;&lt;matchIndex;<span class="comment">//存储到匹配库</span></span><br><span class="line">			<span class="keyword">if</span>(matchs==(<span class="number">1</span>&lt;&lt;q.length)-<span class="number">1</span>)<span class="comment">//全部匹配</span></span><br><span class="line">			&#123;</span><br><span class="line">				</span><br><span class="line">				<span class="keyword">if</span>(minBegin==-<span class="number">1</span> || (minEnd-minBegin)&gt;(curEnd-curBegin))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="comment">//更新最短摘要</span></span><br><span class="line">					minBegin=curBegin;</span><br><span class="line">					minEnd=curEnd;</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				matchs^=indexOf(q,data.charAt(curBegin));<span class="comment">//去掉首位匹配</span></span><br><span class="line">				<span class="keyword">while</span>(data.charAt(++curBegin)&lt;<span class="number">0</span>);<span class="comment">//将首位匹配移至第二位</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		curEnd++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(minBegin!=-<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">char</span>[] rc=<span class="keyword">new</span> <span class="keyword">char</span>[minEnd-minBegin+<span class="number">1</span>];</span><br><span class="line">		<span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(minBegin&lt;=minEnd)</span><br><span class="line">		&#123;</span><br><span class="line">			rc[i++]=data.charAt(minBegin++);<span class="comment">//取值</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		minBegin=-<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> String.valueOf(rc);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 查找当前字符在数组中的位置</span><br><span class="line"> *<span class="javadoctag"> @param</span> q</span><br><span class="line"> *<span class="javadoctag"> @param</span> d</span><br><span class="line"> *<span class="javadoctag"> @return</span> 没有找到则返回-1</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span>[] q,<span class="keyword">char</span> d)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> index=-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i]==d)</span><br><span class="line">		&#123;</span><br><span class="line">			index=i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试的代码为<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] q=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'s'</span>,<span class="string">'d'</span>&#125;;</span><br><span class="line">	String data=<span class="string">"hello are you bottom of ado the is bot doke astringadb"</span>;</span><br><span class="line">	<span class="comment">//String data="abd";</span></span><br><span class="line">	</span><br><span class="line">	System.out.println(<span class="keyword">new</span> ShortAbstract().match(data, q));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出的结果为</p>
<pre><code>are you bottom <span class="keyword">of</span> ado <span class="keyword">the</span> <span class="keyword">is</span>
</code></pre><hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>最短摘要生成
给定一个字符串，以及一系列查询词，在这个字符串中找到一个子串，该子串包含全部的查询词，求这个最短子串
</code></pre><h2 id="解析">解析</h2><p>两个指针，begin和end<br>首先使用end往右边移动一直移动到全部包含查询字符集q的位置<br>然后将begin也向右边移动，直达再移动一次begin-end区间里面的数据将不再包含q<br>此时记录begin和end以及其最小的间距<br>然后begin右移一位，end继续右边移动直至全部包含，周而复始<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[找一个数组中绝对值和最小的三个元素]]></title>
    <link href="http://yyl8781697.github.io/2015/08/03/Algorithm/Min-Abs-ThreeNumber/"/>
    <id>http://yyl8781697.github.io/2015/08/03/Algorithm/Min-Abs-ThreeNumber/</id>
    <published>2015-08-03T15:11:04.000Z</published>
    <updated>2015-08-03T15:16:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>找一个数组中绝对值和最小的三个元素
</code></pre><h2 id="解析">解析</h2><p>暴力的方法是O(n^3)，肯定还存在其他更加优的方法</p>
<ol>
<li>将数组升序排序</li>
<li>固定一个数字，然后从两端开始找，如果sum&lt;0 则left++ 否则right—  同时记录最小的minSum<blockquote>
<p>注意，两端向中间找的时候如果遇到当前固定的数字需要跳过</p>
</blockquote>
</li>
</ol>
<a id="more"></a>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">minAbsThreeNumber</span><span class="params">(<span class="keyword">int</span>[] a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> left=<span class="number">0</span>,mid=<span class="number">0</span>,right=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> mas=Integer.MAX_VALUE;<span class="comment">//min abs sum</span></span><br><span class="line">	</span><br><span class="line">	Arrays.sort(a);<span class="comment">//这里使用了快速排序  会破坏原有数组 不过由于本题重点不在这里 所以也就不需要考虑了</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//mas==0 的时候已经是最小的sum了，如果出现这种情况可以直接停止</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;a.length&amp;&amp;mas!=<span class="number">0</span>;k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//固定的那个数字为k</span></span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>,j=k-<span class="number">1</span>;i&lt;j &amp;&amp; mas!=<span class="number">0</span>;)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//两个continue操作是避免重复使用了k</span></span><br><span class="line">			<span class="keyword">if</span>(i==k)</span><br><span class="line">			&#123;</span><br><span class="line">				i++;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(j==k)</span><br><span class="line">			&#123;</span><br><span class="line">				j--;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//更新最小的abs(sum)</span></span><br><span class="line">			<span class="keyword">int</span> sum=a[i]+a[k]+a[j];</span><br><span class="line">			<span class="keyword">if</span>(Math.abs(sum)&lt;mas)</span><br><span class="line">			&#123;</span><br><span class="line">				mas=Math.abs(sum);</span><br><span class="line">				left=i;</span><br><span class="line">				mid=k;</span><br><span class="line">				right=j;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">			<span class="keyword">if</span>(sum&lt;<span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				i++;<span class="comment">//增加sum</span></span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				j--;<span class="comment">//减少sum</span></span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	System.out.println(String.format(<span class="string">"min abs sum:%s=(%s)+(%s)+(%s)"</span>,mas,a[left],a[mid],a[right]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[]=&#123;-<span class="number">9</span>,<span class="number">9</span>,<span class="number">0</span>,-<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span> b[]=&#123;-<span class="number">99</span>,<span class="number">66</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">	minAbsThreeNumber(b);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果为</p>
<pre><code><span class="built_in">min</span> <span class="built_in">abs</span> <span class="built_in">sum</span>:<span class="number">5</span>=(<span class="number">0</span>)+(<span class="number">3</span>)+(<span class="number">2</span>)
</code></pre><p>它的最终复杂度是O(n^2)，还是有所提升的</p>
<h2 id="参考">参考</h2><p><a href="http://blog.csdn.net/deutschester/article/details/5981503" target="_blank" rel="external">http://blog.csdn.net/deutschester/article/details/5981503</a></p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>找一个数组中绝对值和最小的三个元素
</code></pre><h2 id="解析">解析</h2><p>暴力的方法是O(n^3)，肯定还存在其他更加优的方法</p>
<ol>
<li>将数组升序排序</li>
<li>固定一个数字，然后从两端开始找，如果sum&lt;0 则left++ 否则right—  同时记录最小的minSum<blockquote>
<p>注意，两端向中间找的时候如果遇到当前固定的数字需要跳过</p>
</blockquote>
</li>
</ol>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对于一个由N个整数组成的数组，需要比较多少次才能把最大和最小的数找出来呢？]]></title>
    <link href="http://yyl8781697.github.io/2015/08/03/Algorithm/Max-Min-in-Array/"/>
    <id>http://yyl8781697.github.io/2015/08/03/Algorithm/Max-Min-in-Array/</id>
    <published>2015-08-03T14:59:25.000Z</published>
    <updated>2015-08-03T15:16:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>对于一个由<span class="keyword">N</span>个整数组成的数组，需要比较多少次才能把最大和最小的数找出来呢？
</code></pre><h2 id="解析">解析</h2><p>普通的遍历是需要O(2n)时间，那有没有其他更好的办法呢？<br>其实可以使用分而治之的思想，将N分为两段  分别取到每一段中的最大和最小值  ，然后最大与最大比即可 最小与最小比即可，这样就可以避免最小与最大的比较</p>
<pre><code>比如：
<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>
正常对比的话得到<span class="built_in">min</span>=<span class="number">1</span>,<span class="built_in">max</span>=<span class="number">4</span>需要<span class="number">6</span>次
那如果先求的<span class="built_in">min1</span>=<span class="number">1</span>,<span class="built_in">max1</span>=<span class="number">2</span>,min2=<span class="number">3</span>,max2=<span class="number">4</span>（需要<span class="number">2</span>次比较）
然后<span class="built_in">min1</span>&lt;min2 得到<span class="built_in">min</span>=<span class="number">1</span>,<span class="built_in">max1</span>&lt;max2可得<span class="built_in">max</span>=<span class="number">4</span> （又是需要<span class="number">2</span>次）
所以这种方法只需要<span class="number">4</span>次
</code></pre><a id="more"></a>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> compareCount=<span class="number">0</span>;</span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 分而治之的思想，将N分为两段  分别取到每一段中的最大和最小值  ，然后最大与最大比即可 最小与最小比即可，这样就可以避免最小与最大的比较</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">maxMinInArray</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> left,<span class="keyword">int</span> right,Data data)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="comment">//当只有两个以及两个以内时才进行比较</span></span><br><span class="line">	<span class="keyword">if</span>(right-left&lt;=<span class="number">1</span>)<span class="comment">//难道这个索引位置的比较不算？？？</span></span><br><span class="line">	&#123;</span><br><span class="line">		compareCount++;</span><br><span class="line">		<span class="keyword">if</span>(a[right]&gt;a[left])</span><br><span class="line">		&#123;</span><br><span class="line">			data.min=a[left];</span><br><span class="line">			data.max=a[right];</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			data.min=a[right];</span><br><span class="line">			data.max=a[left];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	Data dLeft=<span class="keyword">new</span> Data();</span><br><span class="line">	Data dRight=<span class="keyword">new</span> Data();</span><br><span class="line">	<span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">	maxMinInArray(a,left,mid,dLeft);<span class="comment">//递归左边</span></span><br><span class="line">	maxMinInArray(a,mid+<span class="number">1</span>,right,dRight);<span class="comment">//递归右边</span></span><br><span class="line">	</span><br><span class="line">	compareCount++;</span><br><span class="line">	data.min=Math.min(dLeft.min, dRight.min);</span><br><span class="line"></span><br><span class="line">	compareCount++;</span><br><span class="line">	data.max=Math.min(dRight.max, dLeft.max);		</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> min;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种方式最终的复杂度是O(1.5n)<br>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] a = &#123;<span class="number">3</span>, <span class="number">2</span>, <span class="number">56</span>, <span class="number">109</span>, <span class="number">10</span>, <span class="number">95</span>, <span class="number">1</span>, <span class="number">230</span>, -<span class="number">1000</span>&#125;; </span><br><span class="line">	Data data=<span class="keyword">new</span> Data();</span><br><span class="line">	maxMinInArray(a,<span class="number">0</span>,a.length-<span class="number">1</span>,data);</span><br><span class="line">	System.out.println(String.format(<span class="string">"min:%s,max:%s"</span>,data.min,data.max));</span><br><span class="line">	System.out.println(String.format(<span class="string">"length:%s,compare count:%s"</span>,a.length,compareCount));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<pre><code><span class="string">min:</span>-<span class="number">1000</span>,<span class="string">max:</span><span class="number">3</span>
<span class="string">length:</span><span class="number">9</span>,compare <span class="string">count:</span><span class="number">13</span>
</code></pre><h2 id="参考">参考</h2><p>July微软面试100题</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external">kubiCode</a>，并且，不得用于商业用途。如您有任何疑问或者授权方面的协商，请给<a href="http://kubicode.me/about/" target="_blank" rel="external">我留言</a>。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>对于一个由<span class="keyword">N</span>个整数组成的数组，需要比较多少次才能把最大和最小的数找出来呢？
</code></pre><h2 id="解析">解析</h2><p>普通的遍历是需要O(2n)时间，那有没有其他更好的办法呢？<br>其实可以使用分而治之的思想，将N分为两段  分别取到每一段中的最大和最小值  ，然后最大与最大比即可 最小与最小比即可，这样就可以避免最小与最大的比较</p>
<pre><code>比如：
<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>
正常对比的话得到<span class="built_in">min</span>=<span class="number">1</span>,<span class="built_in">max</span>=<span class="number">4</span>需要<span class="number">6</span>次
那如果先求的<span class="built_in">min1</span>=<span class="number">1</span>,<span class="built_in">max1</span>=<span class="number">2</span>,min2=<span class="number">3</span>,max2=<span class="number">4</span>（需要<span class="number">2</span>次比较）
然后<span class="built_in">min1</span>&lt;min2 得到<span class="built_in">min</span>=<span class="number">1</span>,<span class="built_in">max1</span>&lt;max2可得<span class="built_in">max</span>=<span class="number">4</span> （又是需要<span class="number">2</span>次）
所以这种方法只需要<span class="number">4</span>次
</code></pre>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[全排列以及全组合]]></title>
    <link href="http://yyl8781697.github.io/2015/08/02/Algorithm/Permutation-and-Combination/"/>
    <id>http://yyl8781697.github.io/2015/08/02/Algorithm/Permutation-and-Combination/</id>
    <published>2015-08-02T14:44:33.000Z</published>
    <updated>2015-08-02T15:08:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="全排列">全排列</h2><blockquote>
<p>这里主要使用递归来实现，也就是考察递归的熟练使用与否</p>
</blockquote>
<p>全排列的递归生成规则为：</p>
<ol>
<li>n个数的全排列=(其中一个数的前缀)+n-1个树的全排列</li>
<li>当前只剩下一个待选前缀的时候，停止迭代</li>
<li>关于前缀的设立，是逐个迭代剩余的候选元素通过两两交换完成的，在进行输出之后还需要还得将两个数字重新交换回去</li>
</ol>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 全排列算法</span><br><span class="line"> * 依次将剩余的元素交换到begin处  直到end的地方进行输出</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> *<span class="javadoctag"> @param</span> begin</span><br><span class="line"> *<span class="javadoctag"> @param</span> end</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">permutation</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> begin,<span class="keyword">int</span> end)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(begin==end)<span class="comment">//当前已经排列完成 进行输出</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">			System.out.print(a[i]);</span><br><span class="line">		System.out.println();</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=begin;j&lt;=end;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			swap(a,begin,j);<span class="comment">//依次遍历剩余元素放置在begin 位置处</span></span><br><span class="line">			permutation(a,begin+<span class="number">1</span>,end);</span><br><span class="line">			swap(a,begin,j);<span class="comment">//将之前交换的数据还原</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp=a[i];</span><br><span class="line">	a[i]=a[j];</span><br><span class="line">	a[j]=temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进行测试输出为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">permutation(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p>
<p>最终的结果是</p>
<pre><code>123
132
213
231
321
312
</code></pre><blockquote>
<p>这里，这里只考虑的无重复的情况，一旦有重复的，需要考虑去重，因为两个相同的数字交换没什么意思啊。这里的去重主要是在for循环中添加一个isSwap来判断是否要交换即可。</p>
</blockquote>
<h2 id="全组合">全组合</h2><blockquote>
<p>全组合貌似就是一个元素的<a href="http://kubicode.me/2015/07/19/Algorithm/SubCollection/" target="_blank" rel="external">全子集算法</a>，之前做过的-_-</p>
</blockquote>
<h2 id="参考">参考</h2><ul>
<li><a href="http://blog.csdn.net/hackbuteer1/article/details/7462447" target="_blank" rel="external">http://blog.csdn.net/hackbuteer1/article/details/7462447</a></li>
<li><a href="http://blog.csdn.net/hackbuteer1/article/details/6823329" target="_blank" rel="external">http://blog.csdn.net/hackbuteer1/article/details/6823329</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="全排列">全排列</h2><blockquote>
<p>这里主要使用递归来实现，也就是考察递归的熟练使用与否</p>
</blockquote>
<p>全排列的递归生成规则为：</p>
<ol>
<li>n个数的全排列=(其中一个数的前缀)+n-1个树的全排列</li>
<li>当前只剩下一个待选前缀的时候，停止迭代</li>
<li>关于前缀的设立，是逐个迭代剩余的候选元素通过两两交换完成的，在进行输出之后还需要还得将两个数字重新交换回去</li>
</ol>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习Java AOP的实现]]></title>
    <link href="http://yyl8781697.github.io/2015/07/30/Java%20Base/Java-AOP-Study/"/>
    <id>http://yyl8781697.github.io/2015/07/30/Java Base/Java-AOP-Study/</id>
    <published>2015-07-30T15:49:09.000Z</published>
    <updated>2015-07-31T16:36:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="AOP介绍">AOP介绍</h2><pre><code>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
<span class="comment">--摘自百度百科</span>
</code></pre><p>通过这个介绍还不是很理解怎么办？什么是切面呀？</p>
<blockquote>
<p>我的理解哈：你现在有一系列普通的执行方法，但是想在方法执行的前后加点东西，比如记录日志，那你不可能去再每个方法上都去加记录日志的语句，那这个时候AOP就来了，将这个记录日志作为切面切入到这些方法中，在平常自然调用这些方法时候同时执行这些切面。</p>
</blockquote>
<p>那该怎么切入呢？<br><a id="more"></a></p>
<h2 id="AOP原理">AOP原理</h2><p>切入的方法主要有在编译器修改源代码，在运行期字节码加载前修改字节码或字节码加载后动态创建代理类的字节码，下面借用别人总结的一个表：<br><img src="/img/Java-AOP-Study/list.png" alt=""><br>本文主要是学习“动态AOP”以及“动态字节码生成” 这两种比较常用的实现方法</p>
<h2 id="动态AOP-动态代理">动态AOP-动态代理</h2><p>这种实现方法最主要的就是<code>Proxy.newProxyInstance</code>生成代理方法，其核心需要的是：<br><img src="/img/Java-AOP-Study/dynamicProxy.jpg" alt=""><br>也就是一定需要接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;<span class="comment">//这个就是我们平常所执行的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同时将该接口进行一个实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentImpl</span> <span class="keyword">implements</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"hello ,i am tom"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们添加传说中的切面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 定义日志切面的接口</span><br><span class="line"> *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>;<span class="comment">//方法调用前执行</span></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>;<span class="comment">//方法调用后执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>随便实现一个切面<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintLogAspect</span> <span class="keyword">implements</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"Log:before invoke"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"after invoke"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好，我们的目标就是将切面<code>LogAspect</code>切入到<code>Student</code>这个接口中。</p>
<p>现在我们现在创建代理之前先创建一个<code>InvocationHandler</code>的子类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 这就是调用打印日志的切面</span><br><span class="line"> *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Object target;<span class="comment">//这个就是调用的目标类</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> List&lt;LogAspect&gt; aspectList=<span class="keyword">new</span> ArrayList&lt;LogAspect&gt;();<span class="comment">//所指定的切面方法</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LogInvocationHandler</span><span class="params">(Object instance)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.target=instance;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAspect</span><span class="params">(LogAspect logAspect)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.aspectList.add(logAspect);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 在这个切面调用原方法执行</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">			<span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;aspectList.size();i++)</span><br><span class="line">			aspectList.get(i).before();<span class="comment">//调用方法执行前到方法</span></span><br><span class="line">		</span><br><span class="line">		Object ret=method.invoke(target, args);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=aspectList.size()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">			aspectList.get(i).before();<span class="comment">//这里是方法执行后的方法</span></span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> ret;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>好了我们再实现一个比较简单的日志功能个：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 则是一个非常简单的代理工厂，主要就是创建新的实例</span><br><span class="line"> *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleProxyFactory</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">SimpleProxyFactory</span><span class="params">()</span></span>&#123;&#125;;<span class="comment">//不公开构造方法</span></span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Object instance,LogAspect logAspect)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		LogInvocationHandler h=<span class="keyword">new</span> LogInvocationHandler(instance);</span><br><span class="line">		h.addAspect(logAspect);</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//这里是直接返回创建的代理类</span></span><br><span class="line">		<span class="keyword">return</span> Proxy.newProxyInstance(instance.getClass().getClassLoader(), </span><br><span class="line">							instance.getClass().getInterfaces(), h);</span><br><span class="line">				</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后再来看main方法怎么启动：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//这里创建一个打印的切面</span></span><br><span class="line">	LogAspect logAspect=<span class="keyword">new</span> PrintLogAspect();</span><br><span class="line">	<span class="comment">//使用简单的代理工厂生产具体的接口</span></span><br><span class="line">	Student s=(Student)SimpleProxyFactory.newInstance(<span class="keyword">new</span> StudentImpl(), logAspect);</span><br><span class="line">	<span class="comment">//接口调用方法 可以发现已经带上了需要切入的面</span></span><br><span class="line">	s.sayHello();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终的输结果：</p>
<pre><code>Log:before<span class="instruction"> invoke
</span>hello ,i am tom
Log:before invoke
</code></pre><p>可以发现打印日志已经成功切入。^_^<br>还是蛮神奇的，竟然直接使用原来接口的方法就能自动切入额外打印功能，那么这个代理类是如何工作的呢？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟一下代理类公的工作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyMock</span> <span class="keyword">implements</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> LogInvocationHandler h;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ProxyMock</span><span class="params">(LogInvocationHandler h)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.h=h;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="annotation">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span></span><br><span class="line">		&#123;</span><br><span class="line">			Method m=h.getTarget().getClass().getMethod(<span class="string">"sayHello"</span>, <span class="keyword">null</span>);</span><br><span class="line">			h.invoke(<span class="keyword">this</span>, m,<span class="keyword">null</span>);<span class="comment">//最终调用handler.invoke 来执行</span></span><br><span class="line">		&#125;<span class="keyword">catch</span>(Throwable e)</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LogInvocationHandler lh=<span class="keyword">new</span> LogInvocationHandler(<span class="keyword">new</span> StudentImpl());</span><br><span class="line">		lh.addAspect(<span class="keyword">new</span> PrintLogAspect());</span><br><span class="line">		</span><br><span class="line">		Student student=<span class="keyword">new</span> ProxyMock(lh);<span class="comment">//模拟的代理类</span></span><br><span class="line">		student.sayHello();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>上面是模拟的代理类，在<code>sayHello</code>方法里面使用反射最终还是调用了<code>h.invoke</code>方法，那这样思路就比较清晰了</p>
<blockquote>
<ol>
<li>使用上面代理类的时候别忘了在<code>LogInvocationHandler</code>类上添加<code>getTarget</code>的方法</li>
<li>如果需要知道如何用代码来实现上述过程  请看JDK中的<code>Proxy</code>源码或者下面参考的文章也有介绍</li>
</ol>
</blockquote>
<p>使用动态代理实现<code>AOP</code>问题比较方便，也相当灵活，但是有以下几个缺点：</p>
<ol>
<li>一定需要定义接口</li>
<li>实现是使用反射的，所以带来性能影响</li>
<li>反射生成的文件可能会照成频繁的Major GC</li>
</ol>
<h2 id="动态字节码生成-cglib技术">动态字节码生成-cglib技术</h2><p><code>cglib</code>是一个强大的高效的字节码生成类库，可以在运行期间扩展Java类或者实现java接口，那么按照上述的动态代理技术，使用<code>cglib</code>就不必在去反射，而是直接基于需要代理的类直接取生成一个扩展的字节码即可，这样的话这种方式的切入逻辑为：<br><img src="/img/Java-AOP-Study/cglibAOP.jpg" alt=""><br>现在还是来用<code>LogAspect</code>来进行切入 但是这次切入是切入到具体的类<code>StudentImpl</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 使用cglib来实现AOP</span><br><span class="line"> *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CgLibTest</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		Enhancer enhancer=<span class="keyword">new</span> Enhancer();</span><br><span class="line">		enhancer.setSuperclass(StudentImpl.class);<span class="comment">//设置需要继承的父类  也就是需要切入的类</span></span><br><span class="line">		enhancer.setCallback(<span class="keyword">new</span> LogMethodInterceptor(<span class="keyword">new</span> PrintLogAspect()));<span class="comment">//设置拦截器 这里顺带设置切面</span></span><br><span class="line">		enhancer.setUseCache(<span class="keyword">true</span>);</span><br><span class="line">		StudentImpl studentImpl=(StudentImpl)enhancer.create();<span class="comment">//创建切入的子类</span></span><br><span class="line">		studentImpl.sayHello();<span class="comment">//这里直接对类进行了切入  使用原来的类就可以了</span></span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 日志方法拦截器</span><br><span class="line">	 * 这里的MethodInterceptor是继承net.sf.cglib.proxy.Callback的</span><br><span class="line">	 *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line">	 *</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LogMethodInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">private</span> LogAspect logAspect;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="title">LogMethodInterceptor</span><span class="params">(LogAspect logAspect)</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.logAspect=logAspect;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="annotation">@Override</span></span><br><span class="line">		<span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object instance, Method method, Object[] args,</span><br><span class="line">				MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">			Object ret=<span class="keyword">null</span>;</span><br><span class="line">			<span class="keyword">if</span>(instance!=<span class="keyword">null</span> &amp;&amp; methodProxy!=<span class="keyword">null</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				logAspect.before();<span class="comment">//进行切入</span></span><br><span class="line">				ret=methodProxy.invokeSuper(instance, args);<span class="comment">//注意，这里一定是要执行这个proxy的method 并且是invokeSuper</span></span><br><span class="line">				logAspect.after();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> ret;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最终的输出为：</p>
<pre><code>Log:before<span class="instruction"> invoke
</span>hello ,i am tom
after invoke
</code></pre><p>上面的代码演示了如何使用cglib来进行<code>AOP</code>的实现，可以发现使用cglib不需要提前创建接口，更加灵活，并且它是会动态生成相应的字节码，比原来的动态代理更加高效。</p>
<blockquote>
<p>注意：这个实例需要引用<code>asm.jar</code>以及同时引用的cglib最好使用<code>cglib-nodep.jar</code>防止冲突</p>
</blockquote>
<h2 id="AOP的作用">AOP的作用</h2><p><code>AOP</code>可以做好多事情了，比如：</p>
<ul>
<li>性能监控，在方法调用前后记录调用时间，方法执行太长或超时报警。 赞</li>
<li>缓存代理，缓存某方法的返回值，下次执行该方法时，直接从缓存里获取。 赞，妙</li>
<li>软件破解，使用AOP修改软件的验证类的判断逻辑。 </li>
<li>记录日志，在方法执行前后记录系统日志。 本文的介绍就是用于日志的记录</li>
<li>工作流系统，工作流系统需要将业务代码和流程引擎代码混合在一起执行，那么我们可以使用AOP将其分离，并动态挂接业务。</li>
<li>权限验证，方法执行前验证是否有权限执行当前方法，没有则抛出没有权限执行异常，由业务代码捕捉。 </li>
</ul>
<h2 id="参考">参考</h2><blockquote>
<p>关于<code>Spring</code>的<code>AOP</code>看参考把，不再多说，本来本文绝大部分就是来自参考，自己组织了一下并且实际操练而已-_-</p>
</blockquote>
<ul>
<li><a href="http://www.iteye.com/topic/1116696" target="_blank" rel="external">http://www.iteye.com/topic/1116696</a> 非常推荐，写的非常好</li>
<li><a href="http://rainsilence.iteye.com/blog/684265" target="_blank" rel="external">http://rainsilence.iteye.com/blog/684265</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="AOP介绍">AOP介绍</h2><pre><code>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。
<span class="comment">--摘自百度百科</span>
</code></pre><p>通过这个介绍还不是很理解怎么办？什么是切面呀？</p>
<blockquote>
<p>我的理解哈：你现在有一系列普通的执行方法，但是想在方法执行的前后加点东西，比如记录日志，那你不可能去再每个方法上都去加记录日志的语句，那这个时候AOP就来了，将这个记录日志作为切面切入到这些方法中，在平常自然调用这些方法时候同时执行这些切面。</p>
</blockquote>
<p>那该怎么切入呢？<br>]]>
    
    </summary>
    
      <category term="Java" scheme="http://yyl8781697.github.io/tags/Java/"/>
    
      <category term="Java Base" scheme="http://yyl8781697.github.io/categories/Java-Base/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用两个队列实现栈、两个栈实现队列]]></title>
    <link href="http://yyl8781697.github.io/2015/07/30/Algorithm/Queue-Stack/"/>
    <id>http://yyl8781697.github.io/2015/07/30/Algorithm/Queue-Stack/</id>
    <published>2015-07-29T23:43:30.000Z</published>
    <updated>2015-07-30T15:59:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>队列和栈是编程中非常经典并且使用的两个数据结构：</p>
<ul>
<li>队列：先入先出</li>
<li>栈：先入后出</li>
</ul>
<p>队列和栈的互操作主要考察对两个数据结构的认识</p>
<h2 id="使用两个队列实现栈">使用两个队列实现栈</h2><p>假设现有队列q1和q2，要通过q1,q2来构建数据的先入后出<br>栈每次pop的都是最后一次push的值，所以可以在pop的时候将原有值都压入另一个队列，<br>直到最后一个元素时直接弹出<br>所以这样的话在push的时候就必须将元素进队到有值的那个队列，大致的逻辑图就是这样：<br><a id="more"></a><br><img src="/img/Queue-Stack/q2s.png" alt=""></p>
<pre><code>假如当前<span class="tag">q1</span>有值<span class="attr_selector">[4,3,2,1]</span>，那么压入5的时候就会压入到<span class="tag">q1</span>
然后在<span class="tag">pop</span>的时候从<span class="tag">q1</span>里面依次将<span class="attr_selector">[4,3,2,1]</span>压入到<span class="tag">q2</span>，直至最后一个元素5的时候直接返回即可
</code></pre><p>所以：</p>
<ul>
<li>push的时候将输入压入已有值的队列</li>
<li>pop的时候将已有值的队列出队到另一个队列中，直达最后一个元素进行返回</li>
</ul>
<p>看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Queue&lt;Integer&gt; queue1,queue2;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Queue2Stack</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">this</span>.queue1=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">this</span>.queue2=<span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 压入栈的时候   只需要向有数据的队列进行压入即可</span><br><span class="line"> * 这样可以保证一个队列有值，另一个队列为空</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.queue1.size()==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">this</span>.queue2.add(a);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">this</span>.queue1.add(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 取数据的时候，有值对队列一直向空队列进行值的压入</span><br><span class="line"> * 直到最后一个值 进行弹出即可</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">this</span>.queue1.size()==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> pop(<span class="keyword">this</span>.queue2,<span class="keyword">this</span>.queue1);</span><br><span class="line">	<span class="function"><span class="keyword">else</span></span><br><span class="line">		return <span class="title">pop</span><span class="params">(<span class="keyword">this</span>.queue1,<span class="keyword">this</span>.queue2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">(Queue&lt;Integer&gt; normQueue,Queue&lt;Integer&gt; emptyQueue)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(normQueue.size()==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(normQueue.size()!=<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		emptyQueue.add(normQueue.poll());</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> normQueue.poll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看下测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Queue2Stack queue2Stack=<span class="keyword">new</span> Queue2Stack();</span><br><span class="line">	</span><br><span class="line">	queue2Stack.push(<span class="number">1</span>);</span><br><span class="line">	queue2Stack.push(<span class="number">4</span>);</span><br><span class="line">	queue2Stack.push(<span class="number">5</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.println(queue2Stack.pop());</span><br><span class="line">	System.out.println(queue2Stack.pop());</span><br><span class="line">	System.out.println(queue2Stack.pop());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出为：</p>
<pre><code>5
4
1
</code></pre><h2 id="两个栈实现队列">两个栈实现队列</h2><p>根据栈实现队里相对来说更加简单一点<br>现有栈s1,s2，如果现将输入压入s1,然后s1出栈再压入s2，此时可以发现s2如果再出栈的话就是队列的顺序了，看图<br><img src="/img/Queue-Stack/s2q.png" alt=""></p>
<pre><code>假如见当前数据入队到<span class="tag">s1</span> <span class="attr_selector">[4,3,2,1]</span>，此时入队5的时候继续入<span class="tag">s1</span> <span class="attr_selector">[5,4,3,2,1]</span>
再出队的时候判断<span class="tag">s2</span>中是否有值，如果有直接<span class="tag">pop</span>得值就是出队的值，否则遍历<span class="tag">s1</span>出栈 然后入栈到<span class="tag">s2</span> <span class="attr_selector">[1,2,3,4,5]</span>
再从<span class="tag">s2</span>进行<span class="tag">pop</span>即可
</code></pre><p>所以：</p>
<ul>
<li>enQueue:总是见数据入队到s1</li>
<li>deQueue:先判断s2是否有值，如果有直接pop，否则将s1的数据全部压入到s2  再从s2进行pop</li>
</ul>
<p>代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Stack&lt;Integer&gt; stack1,stack2;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Stack2Queue</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.stack1=<span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">	<span class="keyword">this</span>.stack2=<span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 入队  直接压入s1即可</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(<span class="keyword">int</span> a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.stack1.push(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 出队 先判断s2是否有值，如果没有，现将s1的值压入s2，再返回</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(stack2.isEmpty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(!stack1.isEmpty())</span><br><span class="line">		&#123;</span><br><span class="line">			stack2.push(stack1.pop());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> stack2.pop();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看下测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Stack2Queue test=<span class="keyword">new</span> Stack2Queue();</span><br><span class="line">	test.enQueue(<span class="number">1</span>);</span><br><span class="line">	test.enQueue(<span class="number">4</span>);</span><br><span class="line">	test.enQueue(<span class="number">5</span>);</span><br><span class="line">	</span><br><span class="line">	System.out.println(test.deQueue());</span><br><span class="line">	System.out.println(test.deQueue());</span><br><span class="line">	System.out.println(test.deQueue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出结果为：</p>
<pre><code>1
4
5
</code></pre><hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>队列和栈是编程中非常经典并且使用的两个数据结构：</p>
<ul>
<li>队列：先入先出</li>
<li>栈：先入后出</li>
</ul>
<p>队列和栈的互操作主要考察对两个数据结构的认识</p>
<h2 id="使用两个队列实现栈">使用两个队列实现栈</h2><p>假设现有队列q1和q2，要通过q1,q2来构建数据的先入后出<br>栈每次pop的都是最后一次push的值，所以可以在pop的时候将原有值都压入另一个队列，<br>直到最后一个元素时直接弹出<br>所以这样的话在push的时候就必须将元素进队到有值的那个队列，大致的逻辑图就是这样：<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[函数将字符串中的字符'*'移到串的前部分]]></title>
    <link href="http://yyl8781697.github.io/2015/07/30/Algorithm/Put-x-To-Head/"/>
    <id>http://yyl8781697.github.io/2015/07/30/Algorithm/Put-x-To-Head/</id>
    <published>2015-07-29T16:51:08.000Z</published>
    <updated>2015-07-30T14:42:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>函数将字符串中的字符'<span class="keyword">*</span>'移到串的前部分,前面的非'<span class="keyword">*</span>'字符后移,但不能改变非'<span class="keyword">*</span>'字符的先 后顺序,函数返回串中字符'<span class="keyword">*</span>'的数量。如原始串为:ab<span class="keyword">*</span><span class="keyword">*</span>cd<span class="keyword">*</span><span class="keyword">*</span>e<span class="keyword">*</span>12,处理后为<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>abcde12, 函数并返回值为 5。(要求使用尽量少的时间和辅助空间)
</code></pre><h2 id="解析1">解析1</h2><p>之前做过<a href="http://kubicode.me/2015/07/19/Algorithm/OddEvenSplit/" target="_blank" rel="external">奇数偶数分离</a>可能很快就想到使用快排分区的思想来解此题了：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 使用快排分区 </span><br><span class="line"> * 首位的左侧是* 右侧是非*</span><br><span class="line"> *<span class="javadoctag"> @param</span> cs</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">putxToHead</span><span class="params">(<span class="keyword">char</span>[] cs)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> k=cs[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">0</span>,j=cs.length-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span> c=<span class="string">'*'</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(cs[j]!=c &amp;&amp; i&lt;j)</span><br><span class="line">			j--;</span><br><span class="line">		cs[i]=cs[j];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(cs[i]==c &amp;&amp; i&lt;j)</span><br><span class="line">			i++;</span><br><span class="line">		cs[j]=cs[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cs[i]=k;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (k==c)?i+<span class="number">1</span>:i;<span class="comment">//如果首位是* 则需要多加一个</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>马上进行测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	String str=<span class="string">"ab**cd**e*12"</span>;</span><br><span class="line">	<span class="keyword">char</span>[] cs=<span class="keyword">new</span> <span class="keyword">char</span>[str.length()];</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cs.length;i++)</span><br><span class="line">		cs[i]=str.charAt(i);</span><br><span class="line">	</span><br><span class="line">	System.out.println(putxToHead(cs));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;cs.length;i++)</span><br><span class="line">		System.out.print(cs[i]);</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>看到的结果为</p>
<pre><code>5
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>adceb12
</code></pre><p>咦，*的个数是计算出来的，但是字母的顺序却乱掉了，这是由于分区过程中快排是不考虑同一区里面两两的顺序</p>
<h2 id="解析2">解析2</h2><p>好吧，现在这种做法可以满足，使用两个指针，从后开始遍历，依次将当前非*的字符串给交换进来，这样就可以保证原来数据的顺序了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">putxToHead2</span><span class="params">(<span class="keyword">char</span>[] cs)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=cs.length-<span class="number">1</span>,j=cs.length-<span class="number">1</span>,count=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> c=<span class="string">'*'</span>;</span><br><span class="line">	<span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(cs[i]!=c)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">char</span> t=cs[i];<span class="comment">//进行交换  将非*按顺序往后排</span></span><br><span class="line">			cs[i]=cs[j];</span><br><span class="line">			cs[j]=t;</span><br><span class="line">			j--;</span><br><span class="line">			count++;<span class="comment">//这里交换的次数就是代表非*的个数</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> cs.length-count;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用上面的测试程序的结果为：</p>
<pre><code>5
<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>abcde12
</code></pre><p>恩，这样就对了，上述两种方法的复杂度同样都是O(n)</p>
<h2 id="参考">参考</h2><ul>
<li>July 微软面试100题 第88题</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>函数将字符串中的字符'<span class="keyword">*</span>'移到串的前部分,前面的非'<span class="keyword">*</span>'字符后移,但不能改变非'<span class="keyword">*</span>'字符的先 后顺序,函数返回串中字符'<span class="keyword">*</span>'的数量。如原始串为:ab<span class="keyword">*</span><span class="keyword">*</span>cd<span class="keyword">*</span><span class="keyword">*</span>e<span class="keyword">*</span>12,处理后为<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>abcde12, 函数并返回值为 5。(要求使用尽量少的时间和辅助空间)
</code></pre><h2 id="解析1">解析1</h2><p>之前做过<a href="http://kubicode.me/2015/07/19/Algorithm/OddEvenSplit/">奇数偶数分离</a>可能很快就想到使用快排分区的思想来解此题了：<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[怎样编写一个程序,把一个有序整数数组放到二叉树中]]></title>
    <link href="http://yyl8781697.github.io/2015/07/30/Algorithm/Put-Array-To-Tree/"/>
    <id>http://yyl8781697.github.io/2015/07/30/Algorithm/Put-Array-To-Tree/</id>
    <published>2015-07-29T16:12:36.000Z</published>
    <updated>2015-07-29T16:21:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>怎样编写一个程序,把一个有序整数数组放到二叉树中?
</code></pre><h2 id="解析">解析</h2><p>这里都说这个数组是有序了，想想二叉树中对应有序相关的，就是二叉搜索树了。<br>二叉搜索树的根节点大于左侧的值，同时又小于右侧的值，那这样正好取数组的中间值作为根节点<br>然后将两侧分别递归作为左右子节点即可。<br>这种方式建树的另一个好处就是将树还原成数组很方便：直接使用中序遍历或者<a href="http://kubicode.me/2015/07/01/Algorithm/Binary-Search-Tree-2-Double-LinkedList/" target="_blank" rel="external">用不开辟空间的方法</a><br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 使用递归构建二叉树即可 </span><br><span class="line"> * 这样左侧节点小于根节点，右侧节点大于根节点</span><br><span class="line"> * 对应数组正好是中间的值以及两侧的值</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> *<span class="javadoctag"> @param</span> left</span><br><span class="line"> *<span class="javadoctag"> @param</span> right</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">putArrayToTree</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(left&gt;right)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> m=left+(right-left)/<span class="number">2</span>;<span class="comment">//取中间位置</span></span><br><span class="line">	TreeNode root=<span class="keyword">new</span> TreeNode(a[m]);<span class="comment">//就是根节点</span></span><br><span class="line">	root.left=putArrayToTree(a,left,m-<span class="number">1</span>);</span><br><span class="line">	root.right=putArrayToTree(a,m+<span class="number">1</span>,right);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 树的结构</span><br><span class="line"> *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">int</span> data;</span><br><span class="line">	<span class="keyword">public</span> TreeNode left,right;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> data)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.data=data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ul>
<li>July 微软面试100题 第86题</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>怎样编写一个程序,把一个有序整数数组放到二叉树中?
</code></pre><h2 id="解析">解析</h2><p>这里都说这个数组是有序了，想想二叉树中对应有序相关的，就是二叉搜索树了。<br>二叉搜索树的根节点大于左侧的值，同时又小于右侧的值，那这样正好取数组的中间值作为根节点<br>然后将两侧分别递归作为左右子节点即可。<br>这种方式建树的另一个好处就是将树还原成数组很方便：直接使用中序遍历或者<a href="http://kubicode.me/2015/07/01/Algorithm/Binary-Search-Tree-2-Double-LinkedList/">用不开辟空间的方法</a><br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[a~z 包括大小写与 0~9 组成的 N 个数, 用最快的方式把其中重复的元素挑出来]]></title>
    <link href="http://yyl8781697.github.io/2015/07/27/Algorithm/Find-Same-Char/"/>
    <id>http://yyl8781697.github.io/2015/07/27/Algorithm/Find-Same-Char/</id>
    <published>2015-07-27T15:39:41.000Z</published>
    <updated>2015-07-27T15:54:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code><span class="literal">a</span>~z 包括大小写与 <span class="number">0</span>~<span class="number">9</span> 组成的 N 个数, 用最快的方式把其中重复的元素挑出来。
</code></pre><h2 id="解析">解析</h2><p>本题中已经限制了可能出现字符,他们对应的ascii为</p>
<ul>
<li>a-z:97~122,</li>
<li>A-Z:65-90</li>
<li>0-9:48~57</li>
</ul>
<p>所以这里只需要用位图法来存储，并且之用128位即可，就是4个长度的int数组，<br>在操作过程中，如果数组中已经设置了值，则说明当前遍历的为重复，打印出来即可<br>否则，将这个值设置到数组中，整体思路与位排序大致一致，复杂度为O(n)<br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findSameChar</span><span class="params">(String str)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] store=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];<span class="comment">//4*32 =128  已经可以存下a~z大小写以及0~9</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(get(store,(<span class="keyword">int</span>)str.charAt(i))&gt;<span class="number">0</span>)</span><br><span class="line">		&#123;<span class="comment">//表示这里已经设置过值了，直接打印出来即可</span></span><br><span class="line">			System.out.print(str.charAt(i));</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;<span class="comment">//未出现过，需要先设置标志一下</span></span><br><span class="line">			set(store,(<span class="keyword">int</span>)str.charAt(i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//11111</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHIFT=<span class="number">5</span>;<span class="comment">//除以32</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MASK=<span class="number">0x1F</span>;<span class="comment">//向32取余</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a[v&gt;&gt;SHIFT]&amp;(<span class="number">1</span>&lt;&lt;(v&amp;MASK));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> v)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	a[v&gt;&gt;SHIFT]|=(<span class="number">1</span>&lt;&lt;(v&amp;MASK));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看下实验结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	String str=<span class="string">"helloworld1232"</span>;</span><br><span class="line">	findSameChar(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<pre><code>lol2
</code></pre><h2 id="参考">参考</h2><ul>
<li>July 微软面试100题  第84.1题</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code><span class="literal">a</span>~z 包括大小写与 <span class="number">0</span>~<span class="number">9</span> 组成的 N 个数, 用最快的方式把其中重复的元素挑出来。
</code></pre><h2 id="解析">解析</h2><p>本题中已经限制了可能出现字符,他们对应的ascii为</p>
<ul>
<li>a-z:97~122,</li>
<li>A-Z:65-90</li>
<li>0-9:48~57</li>
</ul>
<p>所以这里只需要用位图法来存储，并且之用128位即可，就是4个长度的int数组，<br>在操作过程中，如果数组中已经设置了值，则说明当前遍历的为重复，打印出来即可<br>否则，将这个值设置到数组中，整体思路与位排序大致一致，复杂度为O(n)<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux下的Find命令学习]]></title>
    <link href="http://yyl8781697.github.io/2015/07/26/Linux/Find-Command/"/>
    <id>http://yyl8781697.github.io/2015/07/26/Linux/Find-Command/</id>
    <published>2015-07-26T06:46:14.000Z</published>
    <updated>2015-07-27T15:22:07.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p><code>find</code>命令极为好使，在面试中也常常会被问到，所以在这里再好好学习一下^_^<br>注：本文使用的环境是CentOS6.5</p>
</blockquote>
<h2 id="Find介绍">Find介绍</h2><pre><code>功能：在目录结构中搜索文件，并执行指定的操作。此命令提供了相当多的查找条件，功能很强大。 
语法：<span class="built_in">find</span> 起始目录 寻找条件 操作 
说明：<span class="built_in">find</span>命令从指定的起始目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对之采取相关的操作。 
</code></pre><p>其实关于<code>Linux</code>下的命令一般通过<code>—help</code>就可以大致入门使用，实在不行再用<code>man</code>来看更为完整版的手册。<br>下面先长长得列一下：<br><a id="more"></a></p>
<pre><code>[root@master spark-1.3.1-bin-hadoop2.6]# find --<span class="keyword">help</span>
Usage: find [-<span class="keyword">H</span>] [-<span class="keyword">L</span>] [-P] [-Olevel] [-<span class="keyword">D</span> <span class="keyword">help</span>|tree|<span class="keyword">search</span>|stat|rates|opt|exec] [path...] [expression]

default path is the current directory; default expression is -<span class="keyword">print</span>
expression may consist of: operators, options, tests, and actions:

operators (decreasing precedence; -and is implicit where <span class="keyword">no</span> others are given):
      ( EXPR )   ! EXPR   -not EXPR   EXPR1 -a EXPR2   EXPR1 -and EXPR2
      EXPR1 -o EXPR2   EXPR1 -or EXPR2   EXPR1 , EXPR2

positional options (always true): -daystart -follow -regextype

normal options (always true, specified before other expressions):
      -depth --<span class="keyword">help</span> -maxdepth <span class="keyword">LEVELS</span> -mindepth <span class="keyword">LEVELS</span> -mount -noleaf
      --<span class="keyword">version</span> -xdev -ignore_readdir_race -noignore_readdir_race

tests (<span class="keyword">N</span> can be +<span class="keyword">N</span> or -<span class="keyword">N</span> or <span class="keyword">N</span>): -amin <span class="keyword">N</span> -anewer <span class="keyword">FILE</span> -atime <span class="keyword">N</span> -cmin <span class="keyword">N</span>
      -cnewer <span class="keyword">FILE</span> -ctime <span class="keyword">N</span> -empty -false -fstype <span class="keyword">TYPE</span> -gid <span class="keyword">N</span> -group NAME
      -ilname PATTERN -iname PATTERN -inum <span class="keyword">N</span> -iwholename PATTERN -iregex PATTERN
      -links <span class="keyword">N</span> -lname PATTERN -mmin <span class="keyword">N</span> -mtime <span class="keyword">N</span> -name PATTERN -newer <span class="keyword">FILE</span>
      -nouser -nogroup -path PATTERN -perm [+-]MODE -regex PATTERN
      -readable -writable -executable
      -wholename PATTERN -size <span class="keyword">N</span>[bcwkMG] -true -<span class="keyword">type</span> [bcdpflsD] -uid <span class="keyword">N</span>
      -used <span class="keyword">N</span> -user NAME -xtype [bcdpfls]
      -context CONTEXT


actions: -delete -print0 -printf <span class="keyword">FORMAT</span> -fprintf <span class="keyword">FILE</span> <span class="keyword">FORMAT</span> -<span class="keyword">print</span>
      -fprint0 <span class="keyword">FILE</span> -fprint <span class="keyword">FILE</span> -<span class="keyword">ls</span> -fls <span class="keyword">FILE</span> -prune -quit
      -exec COMMAND ; -exec COMMAND {} + -ok COMMAND ;
      -execdir COMMAND ; -execdir COMMAND {} + -okdir COMMAND ;

<span class="keyword">Report</span> (and track progress <span class="keyword">on</span> fixing) bugs via the findutils bug-reporting
page at http:<span class="comment">//savannah.gnu.org/ or, if you have no web access, by sending</span>
email to &lt;bug-findutils@gnu.org&gt;.
</code></pre><p>从<code>—help</code>中我们大致可以发现<code>find</code>有以下四大表达式：</p>
<ol>
<li>operators(逻辑运算)：就是<code>and</code>,<code>or</code>,<code>not</code>这些东西</li>
<li>options(可选项？)：感觉是一些额外可选的功能</li>
<li>tests(条件属性)：各种属性啦，文件名，文件大小之类的</li>
<li>acionts(行为)：find之后想干嘛呢？打印出来  or 去执行</li>
</ol>
<p>先来看一下当前的实验目录(使用了spark已编译的一个根目录)：</p>
<pre><code><span class="attr_selector">[root@master spark-1.3.1-bin-hadoop2.6]</span># <span class="tag">ll</span>
<span class="tag">total</span> 408
<span class="tag">drwxrwxr-x</span>. 2 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">bin</span>
<span class="tag">-rw-rw-r--</span>. 1 1000 1000 278851 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">CHANGES</span><span class="class">.txt</span>
<span class="tag">drwxrwxr-x</span>. 2 1000 1000   4096 <span class="tag">May</span> 17 09<span class="pseudo">:00</span> <span class="tag">conf</span>
<span class="tag">drwxrwxr-x</span>. 3 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">data</span>
<span class="tag">drwxrwxr-x</span>. 3 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">ec2</span>
<span class="tag">drwxrwxr-x</span>. 3 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">examples</span>
<span class="tag">drwxrwxr-x</span>. 2 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">lib</span>
<span class="tag">-rw-rw-r--</span>. 1 1000 1000  46083 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">LICENSE</span>
<span class="tag">drwxr-xr-x</span>. 2 <span class="tag">root</span> <span class="tag">root</span>   4096 <span class="tag">Jul</span> 22 11<span class="pseudo">:28</span> <span class="tag">logs</span>
<span class="tag">-rw-rw-r--</span>. 1 1000 1000  22559 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">NOTICE</span>
<span class="tag">drwxrwxr-x</span>. 7 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">python</span>
<span class="tag">-rw-rw-r--</span>. 1 1000 1000   3629 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">README</span><span class="class">.md</span>
<span class="tag">-rw-rw-r--</span>. 1 1000 1000    157 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">RELEASE</span>
<span class="tag">drwxr-xr-x</span>. 2 <span class="tag">root</span> <span class="tag">root</span>   4096 <span class="tag">Jul</span> 20 09<span class="pseudo">:33</span> <span class="tag">runjar</span>
<span class="tag">drwxrwxr-x</span>. 2 1000 1000   4096 <span class="tag">Apr</span> 11 01<span class="pseudo">:32</span> <span class="tag">sbin</span>
<span class="tag">drwx------</span>. 2 <span class="tag">root</span> <span class="tag">root</span>   4096 <span class="tag">May</span> 22 23<span class="pseudo">:24</span> <span class="tag">spark-99afc66e-6bb1-41ee-8497-e2abdbb3013f</span>
<span class="tag">drwx------</span>. 2 <span class="tag">root</span> <span class="tag">root</span>   4096 <span class="tag">May</span> 22 23<span class="pseudo">:24</span> <span class="tag">spark-e0919038-82ee-4d5d-b421-1f50f6a110ed</span>
<span class="tag">drwx------</span>. 2 <span class="tag">root</span> <span class="tag">root</span>   4096 <span class="tag">May</span> 22 23<span class="pseudo">:24</span> <span class="tag">spark-f37f1978-ad83-4208-86d8-2bdf8c3e5696</span>
</code></pre><p>在该目录下最简单的使用一个<code>find</code>操作</p>
<pre><code>[root<span class="annotation">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -name <span class="string">"NOTICE"</span>
./NOTICE
</code></pre><p>可以看到<code>NOTEICE</code>这个文件就查询出来了。</p>
<h2 id="逻辑运算">逻辑运算</h2><p><code>find</code>命令通过逻辑运算可以完成强大的组合查询，先抛开这个，看看我们码农平常写的条件判断：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(f1 &amp;&amp; (f2 || f3) &amp;&amp; !f4)</span><br></pre></td></tr></table></figure></p>
<p>而<code>find</code>的逻辑运算与之对应的就是：</p>
<ul>
<li><p><code>&amp;&amp;</code>对应<code>-and</code>，简写为：<code>-a</code></p>
<pre><code>[root<span class="variable">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -name <span class="string">"NOTICE"</span> -a -<span class="keyword">size</span> -<span class="number">20</span>
[root<span class="variable">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -name <span class="string">"NOTICE"</span> -a -<span class="keyword">size</span> +<span class="number">20</span>
./NOTICE
[root<span class="variable">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -name <span class="string">"NOTICE"</span> -<span class="keyword">size</span> +<span class="number">20</span>
./NOTICE
</code></pre><p>  可以发现”NOTICE”文件并且小于20是找不到的，但是大于20b的时候可以找到</p>
<blockquote>
<p>注意，缺省操作符的情况就是使用<code>-a</code>，所以第三条命令和第二条命令的效果是一样的。</p>
</blockquote>
</li>
<li><p><code>||</code>对应<code>-or</code>，简写为：<code>-o</code></p>
<pre><code>[root@master spark-<span class="number">1.3</span>.1-bin-hadoop2.6]<span class="preprocessor"># find -name <span class="title">"NOTICE"</span> -o -name <span class="title">"LICENSE"</span></span>
./LICE<span class="built_in">NSE</span>
./NOTICE
</code></pre><p>  在或操作下两个文件都能查询出来</p>
</li>
<li><p><code>!</code>还是对应<code>!</code></p>
<pre><code>[root<span class="variable">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -maxdepth <span class="number">1</span> ! -name <span class="string">"NOTICE"</span> -<span class="keyword">size</span> +<span class="number">20</span>
./LICENSE
./CHANGES.txt
</code></pre><p>  这样就可以查找在当前目录下名字不叫“NOTICE”以及大于20b的文件/文件夹了</p>
</li>
</ul>
<blockquote>
<p>注意，关于操作符还可以使用括号将各个操作表达式括起来，用起来还是非常灵活的^_^</p>
</blockquote>
<h2 id="可选项">可选项</h2><p>这个还是蛮有用的，看<code>—help</code>命令其实就是，还有:</p>
<ul>
<li><code>-depth</code>:使用它之后貌似先会从里向外打印，比如先找到最深的文件夹，然后一层一层向外显示</li>
<li><code>-maxdepth</code>:限制递归的最大深度，如果只在当前目录下找，那么设置<code>-maxdepth 1</code>即可</li>
<li><code>-mindepth</code>:限制最小深度，比如<code>-mindepth 2</code> 只查找深度大于2的文件</li>
<li><code>-daystart</code>:限制查找的文件是今天起24小时的文件</li>
<li><code>-follow</code>:遵循通配符链接方式查找</li>
<li>还有其他等等</li>
</ul>
<h2 id="条件属性">条件属性</h2><p>在使用<code>find</code>的时候条件属性是我们的核心,这里有两个技巧</p>
<ol>
<li><p>如果属性后面跟着的条件是数字N，那么一般支持+,-操作，比如</p>
<pre><code>[root<span class="annotation">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -maxdepth <span class="number">1</span> -<span class="class"><span class="keyword">type</span> <span class="title">f</span> <span class="title">-size</span> <span class="title">+22559c</span>
</span>./<span class="type">LICENSE</span>
./<span class="type">CHANGES</span>.txt
[root<span class="annotation">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -maxdepth <span class="number">1</span> -<span class="class"><span class="keyword">type</span> <span class="title">f</span> <span class="title">-size</span> 22559<span class="title">c</span>
</span>./<span class="type">NOTICE</span>
[root<span class="annotation">@master</span> spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -maxdepth <span class="number">1</span> -<span class="class"><span class="keyword">type</span> <span class="title">f</span> <span class="title">-size</span> <span class="title">-22559c</span>
</span>./<span class="type">README</span>.md
./<span class="type">RELEASE</span>
</code></pre><p> 上面3条命令分别就是查大于22559字节的文件，等于22559字节以及小于22559字节的文件</p>
</li>
<li><p>如果属性后面跟着的条件是字串，那么一般都支持通配符<code>*</code>、<code>?</code>、<code>［ ］</code></p>
<pre><code>[root@master spark-<span class="number">1</span>.<span class="number">3</span>.<span class="number">1</span>-bin-hadoop2.<span class="number">6</span>]# <span class="built_in">find</span> -maxdepth <span class="number">1</span> -<span class="built_in">type</span> f -name "RE*"
./README.<span class="built_in">md</span>
./RELEASE
</code></pre><p> 取”RE”开头的文件名</p>
</li>
</ol>
<p>接下来看一些常用的筛选属性(要知道全部的话看<code>—help</code>里面的信息即可)</p>
<ul>
<li><code>-name PATTERN</code>:根据文件名进行匹配<blockquote>
<p>估计是最为常用的一个属性之一了，上面的演示都是用它来作为示例，所以这里不加其他说明了</p>
</blockquote>
</li>
<li><code>-type [bcdpflsD]</code>:筛选查找的类型：<ul>
<li>b 块设备文件 </li>
<li>c 字符设备文件 </li>
<li>d 目录文件 </li>
<li>p 命名管道（FIFO） </li>
<li>f 普通文件 </li>
<li>l 符号链接文件（symbolic links） </li>
<li>s socket文件 </li>
</ul>
</li>
</ul>
<pre><code>[root@master spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -maxdepth <span class="number">1</span> -<span class="typedef"><span class="keyword">type</span> f</span>
./<span class="type">LICENSE</span>
./<span class="type">CHANGES</span>.txt
./<span class="type">README</span>.md
./<span class="type">NOTICE</span>
./<span class="type">RELEASE</span>
[root@master spark-<span class="number">1.3</span>.1-bin-hadoop2.6]# find -maxdepth <span class="number">1</span> -<span class="typedef"><span class="keyword">type</span> d</span>
.
./sbin
./spark-f37f1978-ad83-<span class="number">4208</span>-<span class="number">86</span>d8-<span class="number">2</span>bdf8c3e5696
./ec2
./bin
./spark-<span class="number">99</span>afc66e-<span class="number">6</span>bb1-<span class="number">41</span>ee-<span class="number">8497</span>-e2abdbb3013f
./<span class="typedef"><span class="keyword">data</span></span>
./lib
./conf
./python
./examples
./runjar
./spark-e0919038-<span class="number">82</span>ee-<span class="number">4</span>d5d-b421-<span class="number">1</span>f50f6a110ed
./logs


上述命名分别是查找当前目录下的文件和文件夹
</code></pre><ul>
<li><code>- size</code>:根据文件大小来进行匹配，这里大小的单位默认是字节<code>b</code>，还可以显式的其他单位<code>bcwkMG</code></li>
<li><p><code>-perm</code>: 查找具有指定权限的文件和目录</p>
<pre><code>[root@master spark-<span class="number">1.3</span>.<span class="number">1</span>-bin-hadoop2.<span class="number">6</span>]<span class="comment"># find -maxdepth 1 -perm 700</span>
./spark<span class="operator">-f</span>37f1978-ad83-<span class="number">4208</span>-<span class="number">86</span>d8-<span class="number">2</span>bdf8c3e5696
./spark-<span class="number">99</span>afc66e-<span class="number">6</span>bb1-<span class="number">41</span>ee-<span class="number">8497</span><span class="operator">-e</span>2abdbb3013f
./spark<span class="operator">-e</span>0919038-<span class="number">82</span>ee-<span class="number">4</span>d5d-b421-<span class="number">1</span>f50f6a110ed
</code></pre><p>  查找自有创建者才能用全完控制权限的目录和文件</p>
</li>
<li><code>-empty</code>:查找大小为0的目录或者空文件 </li>
<li><code>-user NAME</code>:查找所属用户名的文件</li>
<li><code>-amin n</code>:查找n分钟以前被访问过的所有文件</li>
<li><code>-atime n</code>:查找n天以前被访问过的所有文件</li>
<li><code>-cmin n</code>:查找n分钟以前文件状态被修改过的所有文件</li>
<li><code>-ctime n</code>:查找n天以前文件状态被修改过的所有文件</li>
<li><code>-mmin n</code>:查找n分钟以前文件内容被修改过的所有文件</li>
<li><code>-mtime n</code>:查找n天以前文件内容被修改过的所有文件</li>
<li>等等等自己看<code>—help</code></li>
</ul>
<h2 id="行为">行为</h2><blockquote>
<p>这里的行为是指找到文件之后再做的行为操作</p>
</blockquote>
<ul>
<li><code>-print</code>:将找到的文件/文件夹的名称给打印出来</li>
<li><code>-ls</code>:将找到的文件/文件夹的的具体信息列出来</li>
<li><code>-delete</code>:将找到的文件/文件夹的删除掉</li>
<li><p><code>-exec command {} \;</code>:异常强大，在command 里面可以写linux的命令</p>
<p>  [root@master spark-1.3.1-bin-hadoop2.6]# find -maxdepth 1 -size +20 -exec ls -l {} \;<br>  -rw-rw-r—. 1 1000 1000 46083 Apr 11 01:32 ./LICENSE<br>  -rw-rw-r—. 1 1000 1000 278851 Apr 11 01:32 ./CHANGES.txt<br>  -rw-rw-r—. 1 1000 1000 22559 Apr 11 01:32 ./NOTICE</p>
<p>  比如来实现<code>-ls</code>的功能</p>
</li>
<li><p><code>-xargs</code>:也是异常强大，它会批次/依次的取得参数，进行相应的命令操作</p>
<pre><code><span class="keyword">find</span> -maxdepth <span class="number">1</span> -<span class="keyword">size</span> +<span class="number">20</span> -<span class="keyword">print</span> |xargs <span class="keyword">grep</span> <span class="string">"License"</span>
</code></pre><p>  类似这个可以查找含有”License”的文件、文件夹</p>
</li>
</ul>
<h2 id="总结">总结</h2><blockquote>
<p>find命令是一个非常优秀的工具，它可以按照用户指定的准则来匹配文件。使用exec和xargs可以使用户对所匹配到的文件执行几乎所有的命令。<br>但是这些命令还是得常用，但能熟能生巧啊-_-</p>
</blockquote>
<h2 id="参考">参考</h2><ul>
<li><a href="http://blog.chinaunix.net/uid-20082146-id-83489.html" target="_blank" rel="external">find命令</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p><code>find</code>命令极为好使，在面试中也常常会被问到，所以在这里再好好学习一下^_^<br>注：本文使用的环境是CentOS6.5</p>
</blockquote>
<h2 id="Find介绍">Find介绍</h2><pre><code>功能：在目录结构中搜索文件，并执行指定的操作。此命令提供了相当多的查找条件，功能很强大。 
语法：<span class="built_in">find</span> 起始目录 寻找条件 操作 
说明：<span class="built_in">find</span>命令从指定的起始目录开始，递归地搜索其各个子目录，查找满足寻找条件的文件并对之采取相关的操作。 
</code></pre><p>其实关于<code>Linux</code>下的命令一般通过<code>—help</code>就可以大致入门使用，实在不行再用<code>man</code>来看更为完整版的手册。<br>下面先长长得列一下：<br>]]>
    
    </summary>
    
      <category term="Linux" scheme="http://yyl8781697.github.io/tags/Linux/"/>
    
      <category term="Linux" scheme="http://yyl8781697.github.io/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[对策字符串的最大长度]]></title>
    <link href="http://yyl8781697.github.io/2015/07/25/Algorithm/The-Longest-Palindrome/"/>
    <id>http://yyl8781697.github.io/2015/07/25/Algorithm/The-Longest-Palindrome/</id>
    <published>2015-07-25T07:03:19.000Z</published>
    <updated>2015-07-25T12:06:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>输入一个字符串,输出该字符串中对称的子字符串的最大长度。比如输入字符串 “google”,由于该字符串里最长的对称子字符串是“goog”,因此输出 4。
</code></pre><h2 id="解析">解析</h2><p>该题目比较直观的解法有：</p>
<ol>
<li>暴力法：遍历所有可能的子串，然后判断子串是否为回文，故总得复杂度为O(n^3)</li>
<li>遍历字符串，以当前遍历为中心点，然后向两边扩展，直至扩展到不是回文，总复杂度为O(n^2)</li>
</ol>
<p>还有后缀树也可以解，不过需要较大的空间，本文使用的是manacher算法：</p>
<pre><code>Manacher最早发现了可以用<span class="function"><span class="title">O</span><span class="params">(n)</span></span>的时间复杂度来解决该问题，所以这种方法称之为Manacher算法。
</code></pre><p>现在以查询字符串”abaab”为例，该算法为了将”aba”和”baab” 奇偶形式统一考虑，做了一个很精妙的预处理：每每两个字符串以及两端都加一个标志符号#，就形成了<br>“#a#b#a#a#b#”新字符串，那么”aba”则可以看做”#a#b#a#”，同时”baab”转为#b#a#a#b#”，就都为奇数形式了<br><a id="more"></a></p>
<pre><code>假设当前的字符串长度为<span class="keyword">n</span>,则添加的#个数为2*<span class="keyword">n</span>+1
</code></pre><p>接下来需要添加一个辅助数组p,其中p[i]的值表示第i位上可以形成的最大回文半径(比如p[1]=2  因为#a#的半径为2)，全部先列出的话为：</p>
<pre><code>新串:<span class="array"># a </span><span class="array"># b </span><span class="array"># a </span><span class="array"># a </span><span class="array"># b </span>#
p[]:<span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span>
</code></pre><p>其实我们可以通过p[i]的值就可以得到每个字串相应位置的回文长度</p>
<pre><code>半径<span class="tag">p</span>[i]的回文长度为<span class="number">2</span>*<span class="tag">p</span>[i]-<span class="number">1</span>，而每个在新字符串上每个回文两端必定是#，也是也就是相当于对原回文做了#的添加操作，假设原回文串为x长度，根据上面的添加#计算方式得到添加后的回文串为<span class="number">2</span>*x+<span class="number">1</span>
故<span class="number">2</span>*<span class="tag">p</span>[i]-<span class="number">1</span>=<span class="number">2</span>*x+<span class="number">1</span> 
可得x=<span class="tag">p</span>[i]-<span class="number">1</span>
</code></pre><p>那么现在的问题就是相当于如何求出新字符串上p数组各个元素的值了,当然计算这个也不能靠暴力来算，不然就没意思了，大概我们了解到计算p[i]的时候 p<a href="j&lt;i">[j]</a>的值都是已经算出来了，同时回文串有对称性质，所以我们接下来可以这么看</p>
<pre><code>现在要求<span class="tag">p</span>[<span class="number">5</span>]，根据P[<span class="number">3</span>]=<span class="number">4</span>可知，<span class="tag">p</span>[<span class="number">5</span>]是包含在<span class="tag">p</span>[<span class="number">3</span>]的回文串中，又因为回文的对称性，所以<span class="tag">p</span>[<span class="number">3</span>]左侧一定存在一个字符串与<span class="tag">p</span>[<span class="number">5</span>]一致，
其实这里就可以算出其对称串为<span class="number">2</span>*<span class="number">3</span>-<span class="number">5</span>=<span class="number">1</span>  也就是<span class="tag">p</span>[<span class="number">1</span>]，P[<span class="number">1</span>]是已经算出的=<span class="number">2</span>  所以<span class="tag">p</span>[<span class="number">5</span>]也必定至少为<span class="number">2</span>（这里要考虑P[<span class="number">3</span>]回文的右界，不能超过）
所以此时<span class="tag">p</span>[<span class="number">5</span>]只需要从<span class="tag">p</span>[<span class="number">3</span>]和<span class="tag">p</span>[<span class="number">7</span>]往两侧扩展即可，判断其存在的最大回文，这样就可以大大减少了重复计算
</code></pre><p>接下来借用别人的图来解释一下<br><img src="/img/The-Longest-Palindrome/p1.png" alt=""></p>
<blockquote>
<p>对应上面的例子你可以将变量这么认为:i=5,id=3,j=1(通过2*id-i计算) 而mx=p[id]+4，其中id表示先前存在的能到最大右边的回文中心标记。。。</p>
</blockquote>
<p>所以当mx&gt;i的时候  就可以说明在计算i的时候  可以根据id找到左侧对应的点  这样就可以减少计算量</p>
<p>但是另一种情况就是p[j]的回文范围超越了p[id]的回文范围，那这样就不能完全使用p[j]的值了<br><img src="/img/The-Longest-Palindrome/p2.png" alt=""><br>此时p[i]已知的最大可确保回文的范围就是mx-i</p>
<p>综合上述：初始化p[i]=min(p[2*id-i],mx-i)  当mx&gt;i</p>
<p>好，该算法的核心已经说明了接下来直接上代码：</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * Manacher 方法</span><br><span class="line"> * 通过增加#字符将问题统一转为奇数回文的计算</span><br><span class="line"> * 借助半径辅助数组，每次计算当前辅助数组的值的时候</span><br><span class="line"> * 利用回文的对称性可能避免重复计算</span><br><span class="line"> *<span class="javadoctag"> @param</span> str</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">manacher</span><span class="params">(String str)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=(str.length()&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">char</span>[] f=<span class="keyword">new</span> <span class="keyword">char</span>[len];<span class="comment">//将每每两个字符中间加上#，同时首位也加#</span></span><br><span class="line">	<span class="keyword">int</span>[] p=<span class="keyword">new</span> <span class="keyword">int</span>[len];<span class="comment">//辅助数组 存储对应索引上能形成最大回文的半径</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str.length();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i&lt;&lt;<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line">		f[(i&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>]=str.charAt(i);</span><br><span class="line">	&#125;</span><br><span class="line">	f[len-<span class="number">1</span>]=<span class="string">'#'</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> id=<span class="number">0</span>,maxId=<span class="number">0</span>,maxLen=<span class="number">0</span>,maxIndex=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(maxId&gt;i)</span><br><span class="line">		&#123;</span><br><span class="line">			p[i]=Math.min(p[<span class="number">2</span>*id-i], maxId-i);<span class="comment">//找到对称点</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			p[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//继续往两边进行回文判断</span></span><br><span class="line">		<span class="keyword">while</span>((i-p[i])&gt;=<span class="number">0</span> &amp;&amp; (i+p[i])&lt;len &amp;&amp; f[i+p[i]]==f[i-p[i]])</span><br><span class="line">			p[i]++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//更新当前可以到达的最远的索引id</span></span><br><span class="line">		<span class="keyword">if</span>(p[i]+i&gt;maxId)</span><br><span class="line">		&#123;</span><br><span class="line">			maxId=p[i]+i;</span><br><span class="line">			id=i;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//更新最大半径以及索引位置</span></span><br><span class="line">		<span class="keyword">if</span>(p[i]&gt;maxLen)</span><br><span class="line">		&#123;</span><br><span class="line">			maxLen=p[i];</span><br><span class="line">			maxIndex=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造回文字符串</span></span><br><span class="line">	<span class="keyword">char</span>[] ret=<span class="keyword">new</span> <span class="keyword">char</span>[maxLen-<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">int</span> j=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=maxIndex-maxLen+<span class="number">1</span>;i&lt;maxIndex+maxLen;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i]!=<span class="string">'#'</span>)</span><br><span class="line">			ret[j++]=f[i];</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">return</span> String.valueOf(ret);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试的一些样例为</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	System.out.println(manacher(<span class="string">"abaab"</span>));</span><br><span class="line">	System.out.println(manacher(<span class="string">"google"</span>));</span><br><span class="line">	System.out.println(manacher(<span class="string">"adfdfsedasdxdsa"</span>));</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<pre><code><span class="title">baab</span>
goog
asdxdsa
</code></pre><blockquote>
<p>他们都说这个方法复杂度为O(n)，应该也是，主要是比较maxId，其余的重复已经都是可以根据前面的结果算得</p>
</blockquote>
<h2 id="参考">参考</h2><ul>
<li><a href="http://blog.csdn.net/pi9nc/article/details/9251455" target="_blank" rel="external">Manacher算法处理字符串回文</a></li>
<li><a href="http://blog.csdn.net/yzl_rex/article/details/7908259" target="_blank" rel="external">Manacher算法：求解最长回文字符串，时间复杂度为O(N)</a></li>
<li>july 编程之美 73题</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>输入一个字符串,输出该字符串中对称的子字符串的最大长度。比如输入字符串 “google”,由于该字符串里最长的对称子字符串是“goog”,因此输出 4。
</code></pre><h2 id="解析">解析</h2><p>该题目比较直观的解法有：</p>
<ol>
<li>暴力法：遍历所有可能的子串，然后判断子串是否为回文，故总得复杂度为O(n^3)</li>
<li>遍历字符串，以当前遍历为中心点，然后向两边扩展，直至扩展到不是回文，总复杂度为O(n^2)</li>
</ol>
<p>还有后缀树也可以解，不过需要较大的空间，本文使用的是manacher算法：</p>
<pre><code>Manacher最早发现了可以用<span class="function"><span class="title">O</span><span class="params">(n)</span></span>的时间复杂度来解决该问题，所以这种方法称之为Manacher算法。
</code></pre><p>现在以查询字符串”abaab”为例，该算法为了将”aba”和”baab” 奇偶形式统一考虑，做了一个很精妙的预处理：每每两个字符串以及两端都加一个标志符号#，就形成了<br>“#a#b#a#a#b#”新字符串，那么”aba”则可以看做”#a#b#a#”，同时”baab”转为#b#a#a#b#”，就都为奇数形式了<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[求旋转数组中的最小值]]></title>
    <link href="http://yyl8781697.github.io/2015/07/25/Algorithm/Min-Value-In-Ratate-Array/"/>
    <id>http://yyl8781697.github.io/2015/07/25/Algorithm/Min-Value-In-Ratate-Array/</id>
    <published>2015-07-25T02:42:58.000Z</published>
    <updated>2015-07-25T03:02:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>题目:把一个数组最开始的若干个元素搬到数组的末尾,我们称之为数组的旋转。输入一个 排好序的数组的一个旋转,
输出旋转数组的最小元素。例如数组<span class="list">{3, 4, 5, 1, 2}</span>为<span class="list">{1, 2, 3, 4, 5}</span>的一个旋转,该数 组的最小值为 <span class="number">1</span>。
</code></pre><h2 id="解析">解析</h2><blockquote>
<p>该题最容易想到的就是遍历，但是他的复杂度是O(n)，而作为面试题肯定是需要我们找出一种更优的方法</p>
</blockquote>
<p>这里使用可以二分法来解决该问题,假设数组a的长度为n，现在使用二分法过程中左端索引s,右端索引t，则中间位置为m=s+(t-s)/2<br>首先可以知道旋转数组在旋转之后a[0]&gt;a[n-1]是肯定成立的，</p>
<p>当a[s]&lt;=a[m]的时候，我们应该进去右侧继续查找，比如a[0]<a[2] 接下来我们只需要找a[3~4]即可（注意a[m]都已经大于a[s]了，所以这里取右侧的时候m舍去的）="" 同理，当a[s]="">a[m]的时候 进入左侧继续搜索，直到<br>可以发现当a[s]&lt;=a[t]的时候  a[s]肯定就是最小值了。</a[2]></p>
<a id="more"></a>
<pre><code>以[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]的旋转数组[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]为例
第一次搜索
[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
 s     m       t
 此时<span class="tag">a</span>[s]&lt;<span class="tag">a</span>[m] 进入右侧，则有

[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
         s m   t
此时<span class="tag">a</span>[s]&gt;<span class="tag">a</span>[m]，进入左侧
[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
        sm t
此时<span class="tag">a</span>[s]=<span class="tag">a</span>[m] 继续右侧
[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]
           st
这里就满足<span class="tag">a</span>[s]&lt;=<span class="tag">a</span>[t]  则<span class="tag">a</span>[s]=<span class="number">1</span> 最小
</code></pre><blockquote>
<p>这样就可以将复杂度降为O(logn) ^_^</p>
</blockquote>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 求旋转数组中最小的值  避免遍历O(n)</span><br><span class="line"> * 可以使用二分法来做</span><br><span class="line"> * [4,5,6,7,8,1,2,3]</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> *<span class="javadoctag"> @param</span> s</span><br><span class="line"> *<span class="javadoctag"> @param</span> t</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">minValueRatateArray</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	 <span class="keyword">if</span>(a[s]&lt;=a[t])</span><br><span class="line">		 <span class="keyword">return</span> a[s];<span class="comment">//其实这个就是最小值了</span></span><br><span class="line">	 </span><br><span class="line">	 <span class="keyword">int</span> m=s+(t-s)/<span class="number">2</span>;<span class="comment">//中间数</span></span><br><span class="line">	 <span class="keyword">if</span>(a[s]&lt;=a[m])</span><br><span class="line">		 <span class="keyword">return</span> minValueRatateArray(a,m+<span class="number">1</span>,t);<span class="comment">//取右边</span></span><br><span class="line">	 <span class="function"><span class="keyword">else</span> </span><br><span class="line">		 return <span class="title">minValueRatateArray</span><span class="params">(a,s,m)</span></span>;<span class="comment">//取左边</span></span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ul>
<li>July 微软面试100题系列 第69题</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>题目:把一个数组最开始的若干个元素搬到数组的末尾,我们称之为数组的旋转。输入一个 排好序的数组的一个旋转,
输出旋转数组的最小元素。例如数组<span class="list">{3, 4, 5, 1, 2}</span>为<span class="list">{1, 2, 3, 4, 5}</span>的一个旋转,该数 组的最小值为 <span class="number">1</span>。
</code></pre><h2 id="解析">解析</h2><blockquote>
<p>该题最容易想到的就是遍历，但是他的复杂度是O(n)，而作为面试题肯定是需要我们找出一种更优的方法</p>
</blockquote>
<p>这里使用可以二分法来解决该问题,假设数组a的长度为n，现在使用二分法过程中左端索引s,右端索引t，则中间位置为m=s+(t-s)/2<br>首先可以知道旋转数组在旋转之后a[0]&gt;a[n-1]是肯定成立的，</p>
<p>当a[s]&lt;=a[m]的时候，我们应该进去右侧继续查找，比如a[0]<a[2] 接下来我们只需要找a[3~4]即可（注意a[m]都已经大于a[s]了，所以这里取右侧的时候m舍去的）
同理，当a[s]>a[m]的时候 进入左侧继续搜索，直到<br>可以发现当a[s]&lt;=a[t]的时候  a[s]肯定就是最小值了。</p>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[左边的数都小于等 于它,右边的数都大于等于它]]></title>
    <link href="http://yyl8781697.github.io/2015/07/25/Algorithm/Left-Lte-Right-Gte/"/>
    <id>http://yyl8781697.github.io/2015/07/25/Algorithm/Left-Lte-Right-Gte/</id>
    <published>2015-07-25T00:52:50.000Z</published>
    <updated>2015-07-27T13:51:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>一个 int 数组,里面数据无任何限制,要求求出所有这样的数 <span class="tag">a</span>[i],其左边的数都小于等 于它,右边的数都大于等于它。能否只用一个额外数组和少量其它空间实现
</code></pre><h2 id="解析">解析</h2><p>想其他的都是泪（递归、分治）<br>最妙的方法就是将原数组排序得到b，如果b[i]=a[i]，则a[i]就是满足该条件的数<br>这样正好满足只使用了一个额外数组^_^<br>最终的复杂度为<code>O(nlogn)</code><br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 左边的数都小于等 于它,右边的数都大于等于它</span><br><span class="line"> * 将原数组排序b 如果a[i]=b[i] 则该i对应的值满足条件</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leftLtRightGt</span><span class="params">(<span class="keyword">int</span>[] a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] b=a.clone();</span><br><span class="line">	Arrays.sort(b);<span class="comment">//O(nlogn)</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(a[i]==b[i])<span class="comment">//只要相等 就表示满足条件</span></span><br><span class="line">			System.out.println(i+<span class="string">":"</span>+a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><p>July 微软面试题  第81题</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>一个 int 数组,里面数据无任何限制,要求求出所有这样的数 <span class="tag">a</span>[i],其左边的数都小于等 于它,右边的数都大于等于它。能否只用一个额外数组和少量其它空间实现
</code></pre><h2 id="解析">解析</h2><p>想其他的都是泪（递归、分治）<br>最妙的方法就是将原数组排序得到b，如果b[i]=a[i]，则a[i]就是满足该条件的数<br>这样正好满足只使用了一个额外数组^_^<br>最终的复杂度为<code>O(nlogn)</code><br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[数值的整数次方]]></title>
    <link href="http://yyl8781697.github.io/2015/07/24/Algorithm/x-exponent/"/>
    <id>http://yyl8781697.github.io/2015/07/24/Algorithm/x-exponent/</id>
    <published>2015-07-24T12:05:12.000Z</published>
    <updated>2015-07-24T13:44:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>实现函数<span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> <span class="keyword">base</span>,<span class="keyword">int</span> exponent)</span>，求<span class="keyword">base</span>的exponent次方。不得使用库函数，同时不需要考虑大树问题。</span>
</code></pre><h2 id="解析">解析</h2><p>这题看似简单，但是请别这么写-_-<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> result=<span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=exp;i++)</span><br><span class="line">		result*=result;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还需要考虑：</p>
<ol>
<li>exp是负数怎么办？？  恩，那就是需要求倒数了</li>
<li>exp是负数 但是base是0怎么办？？ 恩，那就是无穷大了</li>
<li>复杂度能否小于O(exp)吗？  a^5=a*a^4=a*(a*a)^2 所以可以使用递归法来做</li>
</ol>
<a id="more"></a>
<p>考虑了这么多，那么可以直接上完整代码了</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 数值的整数次方 </span><br><span class="line"> * 使用递归来求解，并且同时考虑特殊情况 </span><br><span class="line"> * 复杂度为O(exp)</span><br><span class="line"> *<span class="javadoctag"> @param</span> base</span><br><span class="line"> *<span class="javadoctag"> @param</span> exp</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (exp==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//任何数的0次方都是 1</span></span><br><span class="line">	<span class="keyword">if</span> (exp == <span class="number">1</span>) <span class="keyword">return</span> base;<span class="comment">//任何数的1 都是自己</span></span><br><span class="line">	<span class="keyword">if</span>(base == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(exp&lt;<span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> Double.POSITIVE_INFINITY;<span class="comment">//0的负数次方都是 无穷大</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//0的正数次方都是0</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">double</span> half = power(base, Math.abs(exp) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//这里判断如何当前是奇数次数 还需要再乘以一个自己</span></span><br><span class="line">	<span class="keyword">double</span> ret= (((exp &amp; <span class="number">1</span>) == <span class="number">1</span>) ? base : <span class="number">1.0</span>) * half * half;</span><br><span class="line">	<span class="keyword">if</span>(exp&lt;<span class="number">0</span>)<span class="comment">//如果这个整数是负数的时候  则取倒数</span></span><br><span class="line">		ret=<span class="number">1</span>/ret;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ul>
<li><a href="http://www.cnblogs.com/xwdreamer/archive/2012/05/15/2502329.html" target="_blank" rel="external">http://www.cnblogs.com/xwdreamer/archive/2012/05/15/2502329.html</a></li>
<li>July 微软面试 第71题</li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>实现函数<span class="function"><span class="keyword">double</span> <span class="title">Power</span><span class="params">(<span class="keyword">double</span> <span class="keyword">base</span>,<span class="keyword">int</span> exponent)</span>，求<span class="keyword">base</span>的exponent次方。不得使用库函数，同时不需要考虑大树问题。</span>
</code></pre><h2 id="解析">解析</h2><p>这题看似简单，但是请别这么写-_-<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">power</span><span class="params">(<span class="keyword">double</span> base,<span class="keyword">int</span> exp)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> result=<span class="number">1.0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=exp;i++)</span><br><span class="line">		result*=result;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>还需要考虑：</p>
<ol>
<li>exp是负数怎么办？？  恩，那就是需要求倒数了</li>
<li>exp是负数 但是base是0怎么办？？ 恩，那就是无穷大了</li>
<li>复杂度能否小于O(exp)吗？  a^5=a*a^4=a*(a*a)^2 所以可以使用递归法来做</li>
</ol>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[把数组排成最小的数]]></title>
    <link href="http://yyl8781697.github.io/2015/07/20/Algorithm/Minimum-Combination-in-Array/"/>
    <id>http://yyl8781697.github.io/2015/07/20/Algorithm/Minimum-Combination-in-Array/</id>
    <published>2015-07-20T12:31:43.000Z</published>
    <updated>2015-07-24T13:43:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>输入一个正整数数组，将它们连接起来排成一个数，输出能排出的所有数字中最小的一个。例如输入数组<span class="list">{32,  321}</span>，则输出这两个能排成的最小数字<span class="number">32132</span>。请给出解决问题的算法，并证明该算法。
</code></pre><h2 id="解析">解析</h2><p>假如有两个数字a,b，其关键思路不是比较a,b，而是比较ab和ba。。。<br>如果ab&lt;ba,则会有a&lt;b，所以这题的关键就是构建a,b的比较器</p>
<blockquote>
<p>不得不说，这个思路太妙了^_^<br><a id="more"></a></p>
</blockquote>
<p>关于证明：请看<a href="http://blog.csdn.net/cxllyg/article/details/7659525" target="_blank" rel="external">这个</a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 思路是比较ab和ba。。。如果ab&lt;ba,则会有a&lt;b</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">minimumCombination</span><span class="params">(Integer[] a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	Arrays.sort(a, <span class="keyword">new</span> Comparator&lt;Integer&gt;()&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a,Integer b)</span></span><br><span class="line">		</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> (a+<span class="string">""</span>+b).compareTo(b+<span class="string">""</span>+a);<span class="comment">//构建ab的比较器</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">	</span><br><span class="line">	StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sb.append(a[i]);<span class="comment">//然后直接连起来就可以了</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> sb.toString();</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	Integer[] a=&#123;<span class="number">32</span>,<span class="number">321</span>,<span class="number">23</span>&#125;; </span><br><span class="line">	System.out.println(minimumCombination(a));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出</p>
<pre><code>2332132
</code></pre><h2 id="参考">参考</h2><ul>
<li>July 微软面试100题系列 第68题</li>
<li><a href="http://blog.csdn.net/cxllyg/article/details/7659525" target="_blank" rel="external">【百度面试题】把数组排成最小的数</a></li>
</ul>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>输入一个正整数数组，将它们连接起来排成一个数，输出能排出的所有数字中最小的一个。例如输入数组<span class="list">{32,  321}</span>，则输出这两个能排成的最小数字<span class="number">32132</span>。请给出解决问题的算法，并证明该算法。
</code></pre><h2 id="解析">解析</h2><p>假如有两个数字a,b，其关键思路不是比较a,b，而是比较ab和ba。。。<br>如果ab&lt;ba,则会有a&lt;b，所以这题的关键就是构建a,b的比较器</p>
<blockquote>
<p>不得不说，这个思路太妙了^_^<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[火车票 查询问题  针对12306设计一个快速的查询系统]]></title>
    <link href="http://yyl8781697.github.io/2015/07/19/Algorithm/TrainTickets/"/>
    <id>http://yyl8781697.github.io/2015/07/19/Algorithm/TrainTickets/</id>
    <published>2015-07-19T14:22:31.000Z</published>
    <updated>2015-07-24T13:43:52.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>火车票 查询问题  针对12306设计一个快速的查询系统
</code></pre><blockquote>
<p>这个网上看到的，好像是百度的一道面试题</p>
</blockquote>
<h2 id="解析">解析</h2><blockquote>
<p>思想就是将火车票区间的每个站按位映射，然后通过位操作法来查询，这种方式应该比较快，并且存储比较小</p>
</blockquote>
<p>比如宁波到上海的高铁G7518有7个站：宁波-&gt;余姚北-&gt;绍兴北-&gt;杭州东-&gt;桐乡-&gt;嘉善南-&gt;上海虹桥<br>那么这趟车的一张票可以用0X7F来存储：01111111，低位表示出发，高位表示终止<br>那么我如果需要查询的话：查宁波到杭州东就为:00000111（第4站杭州东站只作为达到之用，不会占用其他票，所以置0即可），然后这两个数做一个与操作就可以，如果与操作之后的值还是00000111的话，就表示有票<br>还有购买的话 只需要做抑或操作即可,01111111^00000111=01111000，这样就表示余票就只有杭州东到上海虹桥的票了</p>
<a id="more"></a>
<p>有了，有这种思路之后，可以简单的看几个代码片段</p>
<h2 id="查询票的构建">查询票的构建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 根据出发和达到站构建票</span><br><span class="line"> *<span class="javadoctag"> @param</span> start</span><br><span class="line"> *<span class="javadoctag"> @param</span> end</span><br><span class="line"> *<span class="javadoctag"> @return</span> -1表示没有这些站点</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">buildTicket</span><span class="params">(String start,String end)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!STATION_MAP.containsKey(start) || !STATION_MAP.containsKey(end))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//表示没有这些站点  或者站点名字出错</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> si=STATION_MAP.get(start),ei=STATION_MAP.get(end);</span><br><span class="line">	<span class="keyword">int</span> qTicket=<span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span>(si&lt;ei)</span><br><span class="line">	&#123;</span><br><span class="line">		qTicket|=<span class="number">0x1</span>&lt;&lt;si;<span class="comment">//在相应的位置上置1  注意  达到站是不置1  </span></span><br><span class="line">		si++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> qTicket;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查票的时候往往是一个起始站，还有一个到达站，这里我们就要构建乘车区间的位置为1</p>
<blockquote>
<p>注意：到达站只做到达之用，并不是经过它，为了顺利让到达站还可以作为其他票的起始点，所以这里达到站不置1<br>同时为了方法无法找到对应的区间，所以这里要先判断一下</p>
</blockquote>
<h2 id="查询">查询</h2><p>查询只需要进行一个与操作即可，并且不需要改变原数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 查询是否有票</span><br><span class="line"> *<span class="javadoctag"> @param</span> start</span><br><span class="line"> *<span class="javadoctag"> @param</span> end</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">query</span><span class="params">(String start,String end)</span></span><br><span class="line"></span>&#123;		</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.query(<span class="keyword">this</span>.buildTicket(start, end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> State <span class="title">query</span><span class="params">(<span class="keyword">int</span> qTicket)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(qTicket==-<span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> State.ERROR;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (rTicket&amp;qTicket)==qTicket?State.SUCCESS:State.FAILED;<span class="comment">//如果进行与操作之后值还是查询票的数据 就表示有票</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="购买">购买</h2><p>购买时需要改变原存储数据，这里只需要进行异或操作即可，将购买区间的位置0<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 买票操作</span><br><span class="line"> *<span class="javadoctag"> @param</span> start</span><br><span class="line"> *<span class="javadoctag"> @param</span> end</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">buy</span><span class="params">(String start,String end)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> qTicket=<span class="keyword">this</span>.buildTicket(start, end);</span><br><span class="line">	State state=<span class="keyword">this</span>.query(qTicket);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(state==State.SUCCESS)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.rTicket^=qTicket;<span class="comment">//进行异或操作 将票买了</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="退票">退票</h2><p>退票操作起始也需要进行或运算，将原来置0的的位置置1即可，不过为了安全，在或运算之前先判断要退的票是否是该票区间的位都已经置0<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 退票操作</span><br><span class="line"> *<span class="javadoctag"> @param</span> start</span><br><span class="line"> *<span class="javadoctag"> @param</span> end</span><br><span class="line"> *<span class="javadoctag"> @return</span></span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">refund</span><span class="params">(String start,String end)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> qTicket=<span class="keyword">this</span>.buildTicket(start, end);</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 1100010</span><br><span class="line">	 * 0011100</span><br><span class="line">	 * 这里是为了判断退票的区间在余票中是否被正好买掉</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">if</span>((<span class="keyword">this</span>.rTicket|qTicket)-<span class="keyword">this</span>.rTicket==qTicket)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">this</span>.rTicket|=qTicket;<span class="comment">//将票归还</span></span><br><span class="line">		<span class="keyword">return</span> State.SUCCESS;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> State.ERROR;<span class="comment">//发生意外错误了</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="全部贴上来">全部贴上来</h2><p>全部的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 火车票 查询问题  针对12306设计一个快速的查询系统</span><br><span class="line"> * 思想就是将火车票区间的每个站按位映射，然后通过位操作法来查询</span><br><span class="line"> * 注：本代码只是演示了查询的流程  关于同步方面并未考虑</span><br><span class="line"> *<span class="javadoctag"> @author</span> yanyl</span><br><span class="line"> *</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainTickets</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 一个宁波到上海的高铁为例</span><br><span class="line">	 * 每一个元素都是表示停靠站点</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String,Integer&gt; STATION_MAP;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 和STATION_MAP一样的信息  </span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> String[] STATION_ARRAY=&#123;<span class="string">"宁波"</span>,<span class="string">"余姚北"</span>,<span class="string">"绍兴北"</span>,<span class="string">"杭州东"</span>,<span class="string">"桐乡"</span>,<span class="string">"嘉善南"</span>,<span class="string">"上海虹桥"</span>&#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">TrainTickets</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//初始化一下站点信息</span></span><br><span class="line">		STATION_MAP=<span class="keyword">new</span> HashMap&lt;String,Integer&gt;()&#123;</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;STATION_ARRAY.length;i++)</span><br><span class="line">				&#123;</span><br><span class="line">					put(STATION_ARRAY[i],i);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 01111111  低位表示起始  高位表示终止  一共7站</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> rTicket=<span class="number">0x7F</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">enum</span> State&#123;</span><br><span class="line">		<span class="javadoc">/**</span><br><span class="line">		 * 成功标志 有票 或者购买成功</span><br><span class="line">		 */</span></span><br><span class="line">		SUCCESS,</span><br><span class="line">		<span class="javadoc">/**</span><br><span class="line">		 * 失败标志 无票 或者购买失败</span><br><span class="line">		 */</span></span><br><span class="line">		FAILED,</span><br><span class="line">		<span class="javadoc">/**</span><br><span class="line">		 * 错误标志 可能使两个站点不存在</span><br><span class="line">		 */</span></span><br><span class="line">		ERROR;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 查询是否有票</span><br><span class="line">	 *<span class="javadoctag"> @param</span> start</span><br><span class="line">	 *<span class="javadoctag"> @param</span> end</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">query</span><span class="params">(String start,String end)</span></span><br><span class="line">	</span>&#123;		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.query(<span class="keyword">this</span>.buildTicket(start, end));</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> State <span class="title">query</span><span class="params">(<span class="keyword">int</span> qTicket)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(qTicket==-<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> State.ERROR;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> (rTicket&amp;qTicket)==qTicket?State.SUCCESS:State.FAILED;<span class="comment">//如果进行与操作之后值还是查询票的数据 就表示有票</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 买票操作</span><br><span class="line">	 *<span class="javadoctag"> @param</span> start</span><br><span class="line">	 *<span class="javadoctag"> @param</span> end</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">buy</span><span class="params">(String start,String end)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> qTicket=<span class="keyword">this</span>.buildTicket(start, end);</span><br><span class="line">		State state=<span class="keyword">this</span>.query(qTicket);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(state==State.SUCCESS)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>.rTicket^=qTicket;<span class="comment">//进行异或操作 将票买了</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 退票操作</span><br><span class="line">	 *<span class="javadoctag"> @param</span> start</span><br><span class="line">	 *<span class="javadoctag"> @param</span> end</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">refund</span><span class="params">(String start,String end)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> qTicket=<span class="keyword">this</span>.buildTicket(start, end);</span><br><span class="line">		</span><br><span class="line">		<span class="javadoc">/**</span><br><span class="line">		 * 1100010</span><br><span class="line">		 * 0011100</span><br><span class="line">		 * 这里是为了判断退票的区间在余票中是否被正好买掉</span><br><span class="line">		 */</span></span><br><span class="line">		<span class="keyword">if</span>((<span class="keyword">this</span>.rTicket|qTicket)-<span class="keyword">this</span>.rTicket==qTicket)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">this</span>.rTicket|=qTicket;<span class="comment">//将票归还</span></span><br><span class="line">			<span class="keyword">return</span> State.SUCCESS;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> State.ERROR;<span class="comment">//发生意外错误了</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 根据出发和达到站构建票</span><br><span class="line">	 *<span class="javadoctag"> @param</span> start</span><br><span class="line">	 *<span class="javadoctag"> @param</span> end</span><br><span class="line">	 *<span class="javadoctag"> @return</span> -1表示没有这些站点</span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">buildTicket</span><span class="params">(String start,String end)</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!STATION_MAP.containsKey(start) || !STATION_MAP.containsKey(end))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//表示没有这些站点  或者站点名字出错</span></span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">int</span> si=STATION_MAP.get(start),ei=STATION_MAP.get(end);</span><br><span class="line">		<span class="keyword">int</span> qTicket=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>(si&lt;ei)</span><br><span class="line">		&#123;</span><br><span class="line">			qTicket|=<span class="number">0x1</span>&lt;&lt;si;<span class="comment">//在相应的位置上置1  注意  达到站是不置1  </span></span><br><span class="line">			si++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> qTicket;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="javadoc">/**</span><br><span class="line">	 * 获取余票状态</span><br><span class="line">	 *<span class="javadoctag"> @return</span></span><br><span class="line">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">remaining</span><span class="params">()</span></span><br><span class="line">	</span>&#123;</span><br><span class="line">		StringBuilder sb=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="keyword">boolean</span> cc=<span class="keyword">false</span>;<span class="comment">//false 表示前一站已经被买了 </span></span><br><span class="line">		sb.append(<span class="string">"余票状态："</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;STATION_ARRAY.length;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> mark=<span class="number">0x1</span>&lt;&lt;i;</span><br><span class="line">			<span class="keyword">if</span>((<span class="keyword">this</span>.rTicket&amp;mark)==mark)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(cc)</span><br><span class="line">				&#123;</span><br><span class="line">					sb.append(<span class="string">"-&gt;"</span>);</span><br><span class="line">				&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">					sb.append(<span class="string">"  "</span>);</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				sb.append(STATION_ARRAY[i]);</span><br><span class="line">				cc=<span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cc=<span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> sb.toString().trim();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		TrainTickets tt=<span class="keyword">new</span> TrainTickets();</span><br><span class="line">		System.out.println(tt.remaining());</span><br><span class="line">		System.out.println(<span class="string">"查询 宁波-&gt;杭州南:"</span>+tt.query(<span class="string">"宁波"</span>,<span class="string">"杭州南"</span>));</span><br><span class="line">		System.out.println(<span class="string">"查询 宁波-&gt;杭州东:"</span>+tt.query(<span class="string">"宁波"</span>,<span class="string">"杭州东"</span>));</span><br><span class="line">		System.out.println(<span class="string">"购买 宁波-&gt;杭州东:"</span>+tt.buy(<span class="string">"宁波"</span>,<span class="string">"杭州东"</span>));</span><br><span class="line">		System.out.println(tt.remaining());</span><br><span class="line">		System.out.println(<span class="string">"购买 宁波-&gt;杭州东:"</span>+tt.buy(<span class="string">"宁波"</span>,<span class="string">"杭州东"</span>));</span><br><span class="line">		System.out.println(<span class="string">"购买 宁波-&gt;绍兴北:"</span>+tt.buy(<span class="string">"宁波"</span>,<span class="string">"绍兴北"</span>));</span><br><span class="line">		System.out.println(<span class="string">"购买 绍兴北-&gt;桐乡:"</span>+tt.buy(<span class="string">"绍兴北"</span>,<span class="string">"桐乡"</span>));</span><br><span class="line">		System.out.println(<span class="string">"购买 杭州东-&gt;桐乡:"</span>+tt.buy(<span class="string">"杭州东"</span>,<span class="string">"桐乡"</span>));</span><br><span class="line">		System.out.println(tt.remaining());</span><br><span class="line">		System.out.println(<span class="string">"退票 宁波-&gt;杭州东:"</span>+tt.refund(<span class="string">"宁波"</span>,<span class="string">"杭州东"</span>));</span><br><span class="line">		System.out.println(tt.remaining());</span><br><span class="line">		System.out.println(<span class="string">"购买 宁波-&gt;杭州东:"</span>+tt.buy(<span class="string">"宁波"</span>,<span class="string">"杭州东"</span>));</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后的测试运算结果为：</p>
<pre><code>余票状态：  宁波-&gt;余姚北-&gt;绍兴北-&gt;杭州东-&gt;桐乡-&gt;嘉善南-&gt;上海虹桥
查询 宁波-&gt;杭州南<span class="symbol">:ERROR</span>
查询 宁波-&gt;杭州东<span class="symbol">:SUCCESS</span>
购买 宁波-&gt;杭州东<span class="symbol">:SUCCESS</span>
余票状态：  杭州东-&gt;桐乡-&gt;嘉善南-&gt;上海虹桥
购买 宁波-&gt;杭州东<span class="symbol">:FAILED</span>
购买 宁波-&gt;绍兴北<span class="symbol">:FAILED</span>
购买 绍兴北-&gt;桐乡<span class="symbol">:FAILED</span>
购买 杭州东-&gt;桐乡<span class="symbol">:SUCCESS</span>
余票状态：  桐乡-&gt;嘉善南-&gt;上海虹桥
退票 宁波-&gt;杭州东<span class="symbol">:SUCCESS</span>
余票状态：  宁波-&gt;余姚北-&gt;绍兴北  桐乡-&gt;嘉善南-&gt;上海虹桥
购买 宁波-&gt;杭州东<span class="symbol">:SUCCESS</span>
</code></pre><p>心细的小伙伴可以发现最后一次余票查询有bug，是的，应该有绍兴北到杭州东的票，不过这里只是显示问题而已，修改<code>remaining()</code>方法即可，因为看最后一条记录也的确都是可以购买到得</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>火车票 查询问题  针对12306设计一个快速的查询系统
</code></pre><blockquote>
<p>这个网上看到的，好像是百度的一道面试题</p>
</blockquote>
<h2 id="解析">解析</h2><blockquote>
<p>思想就是将火车票区间的每个站按位映射，然后通过位操作法来查询，这种方式应该比较快，并且存储比较小</p>
</blockquote>
<p>比如宁波到上海的高铁G7518有7个站：宁波-&gt;余姚北-&gt;绍兴北-&gt;杭州东-&gt;桐乡-&gt;嘉善南-&gt;上海虹桥<br>那么这趟车的一张票可以用0X7F来存储：01111111，低位表示出发，高位表示终止<br>那么我如果需要查询的话：查宁波到杭州东就为:00000111（第4站杭州东站只作为达到之用，不会占用其他票，所以置0即可），然后这两个数做一个与操作就可以，如果与操作之后的值还是00000111的话，就表示有票<br>还有购买的话 只需要做抑或操作即可,01111111^00000111=01111000，这样就表示余票就只有杭州东到上海虹桥的票了</p>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Java Base" scheme="http://yyl8781697.github.io/tags/Java-Base/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[最长递增子序列]]></title>
    <link href="http://yyl8781697.github.io/2015/07/19/Algorithm/Longest/"/>
    <id>http://yyl8781697.github.io/2015/07/19/Algorithm/Longest/</id>
    <published>2015-07-19T08:31:57.000Z</published>
    <updated>2015-07-24T13:44:51.000Z</updated>
    <content type="html"><![CDATA[<p>题目</p>
<pre><code>给定一个长度为<span class="keyword">N</span>的数组，找出一个最长的单调自增子序列（不一定连续，但是顺序不能乱）。例如：给定一个长度为<span class="number">6</span>的数组A<span class="list">{5， 6， 7， 1， 2， 8}</span>，则其最长的单调递增子序列为<span class="list">{5，6，7，8}</span>，长度为<span class="number">4.</span>
</code></pre><h2 id="解析">解析</h2><blockquote>
<p>此题面试中非常常见，其实比较简单，一般面试中不要慌，按条理来一般都能答出 ^_^</p>
</blockquote>
<p>N长度的数组，关于最长递增子序列有max(l(i))=max(l(i-1)),i&gt;1, a[i]&gt;a[i-1]，这个关系式很重要<br>再来看假如N=1，那么l=1<br>如果N=2,有{16,24}，那么可以发现l=2，因为max(l(0))=1,24&gt;16,所以max(l(1))=max(l(0))+1<br>好了，其实我们可以维护一个N的辅助数组，每个值表示在当前元素下考虑后面的元素可能组成的最长递增子序列,比如刚刚为N=2，有f[0]=2,f[1]=1<br><a id="more"></a><br>现在来看一个长一点的数组：</p>
<pre><code><span class="atom">a</span>={<span class="number">3</span>,<span class="number">18</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">41</span>,<span class="number">16</span>,<span class="number">24</span>}
我们从后往前进行遍历（第一个索引为<span class="number">0</span>）
<span class="atom">a</span>[<span class="number">9</span>]=<span class="number">24</span>，为最后一个元素，所以辅助数组<span class="atom">b</span>中<span class="atom">f</span>[<span class="number">9</span>]=<span class="number">1</span> 表示它以及它最后可能组成的最长递增子序列为<span class="number">1</span>
则有
<span class="atom">f</span>={<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="number">1</span>}
<span class="atom">a</span>[<span class="number">8</span>]=<span class="number">16</span>，所以<span class="atom">a</span>[<span class="number">8</span>]&lt;<span class="atom">a</span>[<span class="number">9</span>],故<span class="atom">f</span>[<span class="number">8</span>]=<span class="number">2</span>
<span class="atom">f</span>={<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="number">2</span>,<span class="number">1</span>}
而<span class="atom">a</span>[<span class="number">7</span>]=<span class="number">41</span>&gt;<span class="atom">a</span>[<span class="number">8</span>]，同时<span class="atom">a</span>[<span class="number">7</span>]&gt;<span class="number">10</span>，所以考虑<span class="atom">a</span>[<span class="number">7</span>]以后的元素它可能的最长递增子序列为<span class="number">1</span>
<span class="atom">f</span>={<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>}
现在来看<span class="atom">a</span>[<span class="number">6</span>]=<span class="number">23</span>&lt;<span class="atom">a</span>[<span class="number">41</span>]，暂时<span class="atom">f</span>[<span class="number">6</span>]=<span class="atom">f</span>[<span class="number">7</span>]+<span class="number">1</span>=<span class="number">2</span> 再来看<span class="atom">a</span>[<span class="number">6</span>]&lt;<span class="atom">a</span>[<span class="number">9</span>] 所以<span class="atom">f</span>[<span class="number">6</span>]=<span class="atom">f</span>[<span class="number">9</span>]+<span class="number">1</span> 还是<span class="number">2</span>
<span class="atom">f</span>={<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>}
再来看一个<span class="atom">a</span>[<span class="number">5</span>]=<span class="number">12</span>，<span class="atom">a</span>[<span class="number">5</span>]&lt;<span class="atom">a</span>[<span class="number">6</span>] 故<span class="atom">f</span>[<span class="number">5</span>]=<span class="atom">f</span>[<span class="number">6</span>]+<span class="number">1</span>=<span class="number">3</span> 再继续<span class="atom">a</span>[<span class="number">7</span>],<span class="atom">a</span>[<span class="number">8</span>],<span class="atom">a</span>[<span class="number">9</span>]对比之后<span class="atom">f</span>[<span class="number">5</span>]还是等于<span class="number">3</span>
<span class="atom">f</span>={<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="name">_</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>}
.
.
.
<span class="atom">f</span>={<span class="number">6</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>}

然后根据数组<span class="atom">b</span>取降序位置的索引<span class="number">6</span>，<span class="number">5</span>，<span class="number">4</span>，<span class="number">3</span>，<span class="number">2</span>，<span class="number">1</span>在<span class="atom">a</span>上打印出来即可
</code></pre><p>这里主要是介绍动态规划法：<br>貌似还有最大公共子序列法以及一个插入法来求</p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] a=&#123;<span class="number">3</span>,<span class="number">18</span>,<span class="number">7</span>,<span class="number">14</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">23</span>,<span class="number">41</span>,<span class="number">16</span>,<span class="number">24</span>&#125;;</span><br><span class="line">	<span class="keyword">int</span>[] f=<span class="keyword">new</span> <span class="keyword">int</span>[a.length];<span class="comment">//存放当前索引位置上以它为起点可能存在的最长子序列个数</span></span><br><span class="line">	<span class="keyword">int</span> maxIndex=-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> maxLen=-<span class="number">1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=a.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">	&#123;</span><br><span class="line">		f[i]=<span class="number">1</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(i==a.length-<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;a.length;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(a[i]&lt;a[j] &amp;&amp; f[i]&lt;=f[j])</span><br><span class="line">			&#123;</span><br><span class="line">				f[i]=f[j]+<span class="number">1</span>;<span class="comment">//计算当前以当前位置为索引起始点的最长自增字符串个数</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">if</span>(f[i]&gt;maxLen)</span><br><span class="line">		&#123;</span><br><span class="line">			maxLen=f[i];<span class="comment">//得到最长的标志</span></span><br><span class="line">			maxIndex=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=maxIndex;i&lt;a.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(f[i]==maxLen)</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(a[i]);</span><br><span class="line">			maxLen--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打印结果</p>
<pre><code>3
7
10
12
23
41
</code></pre><h2 id="参考">参考</h2><p><a href="http://qiemengdao.iteye.com/blog/1660229" target="_blank" rel="external">http://qiemengdao.iteye.com/blog/1660229</a></p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>题目</p>
<pre><code>给定一个长度为<span class="keyword">N</span>的数组，找出一个最长的单调自增子序列（不一定连续，但是顺序不能乱）。例如：给定一个长度为<span class="number">6</span>的数组A<span class="list">{5， 6， 7， 1， 2， 8}</span>，则其最长的单调递增子序列为<span class="list">{5，6，7，8}</span>，长度为<span class="number">4.</span>
</code></pre><h2 id="解析">解析</h2><blockquote>
<p>此题面试中非常常见，其实比较简单，一般面试中不要慌，按条理来一般都能答出 ^_^</p>
</blockquote>
<p>N长度的数组，关于最长递增子序列有max(l(i))=max(l(i-1)),i&gt;1, a[i]&gt;a[i-1]，这个关系式很重要<br>再来看假如N=1，那么l=1<br>如果N=2,有{16,24}，那么可以发现l=2，因为max(l(0))=1,24&gt;16,所以max(l(1))=max(l(0))+1<br>好了，其实我们可以维护一个N的辅助数组，每个值表示在当前元素下考虑后面的元素可能组成的最长递增子序列,比如刚刚为N=2，有f[0]=2,f[1]=1<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[打印一个集合所有的子集和]]></title>
    <link href="http://yyl8781697.github.io/2015/07/19/Algorithm/SubCollection/"/>
    <id>http://yyl8781697.github.io/2015/07/19/Algorithm/SubCollection/</id>
    <published>2015-07-19T07:39:20.000Z</published>
    <updated>2015-07-24T13:45:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>打印一个集合所有的子集和，比如<span class="list">{a,b,c}</span>的子集和有<span class="list">{a}</span>,<span class="list">{b}</span>,<span class="list">{c}</span>,<span class="list">{a,b}</span>,<span class="list">{a,c}</span>,<span class="list">{b,c}</span>,<span class="list">{a,b,c}</span>以及 空
</code></pre><h2 id="解析">解析</h2><p>一个元素个数为n的集合所包含的所有组合的子集个数有2^n个，这样其实就可以将所以集合的情况映射到0~2^n-1个，然后按位取元素即可</p>
<pre><code>比如<span class="list">{a,b,c}</span>这个三元素的集合按位映射
<span class="list">{0,0,0}</span>=&gt;空
<span class="list">{0,0,1}</span>=&gt;<span class="list">{c}</span>
<span class="list">{0,1,0}</span>=&gt;<span class="list">{b}</span>
<span class="list">{0,1,1}</span>=&gt;<span class="list">{b,c}</span>
.
.
.
<span class="list">{1,1,1}</span>=&gt;<span class="list">{a,b,c}</span>
</code></pre><a id="more"></a>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 将集合映射到位，然后进行与操作,然后一个集合可能含有的子元素最多是2^n个</span><br><span class="line"> *<span class="javadoctag"> @param</span> cs</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">subCollection</span><span class="params">(<span class="keyword">char</span>[] cs)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len=cs.length,maxNum=<span class="number">1</span>&lt;&lt;len;</span><br><span class="line">	<span class="keyword">int</span> temp=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> mark=<span class="number">0x1</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;maxNum;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len &amp;&amp; temp!=<span class="number">0</span>;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>((temp&amp;mark)==<span class="number">1</span>)<span class="comment">//取最低位的数字是否为1   </span></span><br><span class="line">			&#123;</span><br><span class="line">				System.out.print(cs[j]);</span><br><span class="line">			&#125;</span><br><span class="line">			temp=temp&gt;&gt;<span class="number">1</span>;<span class="comment">//右移一位</span></span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">""</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终的复杂度为<code>O(n*2^n)</code>，最主要的是这种方式代码写起来很方便<br>其测试代码为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span>[] cs=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">	subCollection(cs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出的结果为</p>
<pre><code><span class="tag">a</span>
<span class="tag">b</span>
ab
c
ac
bc
abc
</code></pre><h2 id="参考">参考</h2><p>July微软100道面试题  忘了第哪一道 -_-</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>打印一个集合所有的子集和，比如<span class="list">{a,b,c}</span>的子集和有<span class="list">{a}</span>,<span class="list">{b}</span>,<span class="list">{c}</span>,<span class="list">{a,b}</span>,<span class="list">{a,c}</span>,<span class="list">{b,c}</span>,<span class="list">{a,b,c}</span>以及 空
</code></pre><h2 id="解析">解析</h2><p>一个元素个数为n的集合所包含的所有组合的子集个数有2^n个，这样其实就可以将所以集合的情况映射到0~2^n-1个，然后按位取元素即可</p>
<pre><code>比如<span class="list">{a,b,c}</span>这个三元素的集合按位映射
<span class="list">{0,0,0}</span>=&gt;空
<span class="list">{0,0,1}</span>=&gt;<span class="list">{c}</span>
<span class="list">{0,1,0}</span>=&gt;<span class="list">{b}</span>
<span class="list">{0,1,1}</span>=&gt;<span class="list">{b,c}</span>
.
.
.
<span class="list">{1,1,1}</span>=&gt;<span class="list">{a,b,c}</span>
</code></pre>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[奇数偶数分离 奇数在左侧,偶数在右侧,要求复杂度为O(N)]]></title>
    <link href="http://yyl8781697.github.io/2015/07/19/Algorithm/OddEvenSplit/"/>
    <id>http://yyl8781697.github.io/2015/07/19/Algorithm/OddEvenSplit/</id>
    <published>2015-07-19T07:20:01.000Z</published>
    <updated>2015-07-24T13:45:23.000Z</updated>
    <content type="html"><![CDATA[<h2 id="题目">题目</h2><pre><code>奇数偶数分离 奇数在左侧  偶数在右侧 要求复杂度为<span class="function"><span class="title">O</span><span class="params">(N)</span></span>
</code></pre><h2 id="解析">解析</h2><p>本题的难点主要是在O(N)复杂度的要求，但是想想有没有类似对数组左右分离的操作？<br>对，就是快速排序，在使用快速排序的分区中左边都是小于基准，右边都是大于基准<br>所以，同理，现在按照快排分区的思想，左边都是为奇数，右边都是为偶数，基数无论为奇偶皆可<br><a id="more"></a></p>
<h2 id="代码">代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="javadoc">/**</span><br><span class="line"> * 使用快速排序的分区思想，只是&amp;lt;和&amp;gt;变为奇数和偶数而已</span><br><span class="line"> *<span class="javadoctag"> @param</span> a</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">oddEvenSplit</span><span class="params">(<span class="keyword">int</span>[] a)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(a.length&lt;<span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">int</span> k=a[<span class="number">0</span>],i=<span class="number">0</span>,j=a.length-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>((a[j]&amp;<span class="number">1</span>)==<span class="number">0</span> &amp;&amp; i&lt;j)<span class="comment">//从右往左找  直到遇到奇数</span></span><br><span class="line">			j--;</span><br><span class="line">		a[i]=a[j];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">while</span>((a[i]&amp;<span class="number">1</span>)==<span class="number">1</span> &amp;&amp; i&lt;j)<span class="comment">//从左往右找  直到遇到偶数</span></span><br><span class="line">			i++;</span><br><span class="line">		a[j]=a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	a[i]=k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看下测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span>[] a=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">	oddEvenSplit(a);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">		System.out.print(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>输出的结果为：</p>
<pre><code>75314628
</code></pre><p>可以发现这里是以1为基准，1左边的都是奇数，1右边的都是偶数</p>
<h2 id="参考">参考</h2><p>July微软100道面试题  忘了第哪一道 -_-</p>
<hr>
<blockquote>
<p>本作品采用<a href="http://creativecommons.org/licenses/by-nc-sa/2.5/cn/" target="_blank">[知识共享署名-非商业性使用-相同方式共享 2.5]</a>中国大陆许可协议进行许可，我的博客欢迎复制共享，但在同时，希望保留我的署名权<a href="http://kubicode.me/" target="_blank" rel="external"></a></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="题目">题目</h2><pre><code>奇数偶数分离 奇数在左侧  偶数在右侧 要求复杂度为<span class="function"><span class="title">O</span><span class="params">(N)</span></span>
</code></pre><h2 id="解析">解析</h2><p>本题的难点主要是在O(N)复杂度的要求，但是想想有没有类似对数组左右分离的操作？<br>对，就是快速排序，在使用快速排序的分区中左边都是小于基准，右边都是大于基准<br>所以，同理，现在按照快排分区的思想，左边都是为奇数，右边都是为偶数，基数无论为奇偶皆可<br>]]>
    
    </summary>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/tags/Algorithm/"/>
    
      <category term="Algorithm" scheme="http://yyl8781697.github.io/categories/Algorithm/"/>
    
  </entry>
  
</feed>